
mlxh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009194  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009438  08009438  00019438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009530  08009530  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009538  08009538  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009538  08009538  00019538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  08009540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400007c  080095bc  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000dc  0800961c  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000644  2400013c  0800967c  0002013c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000780  0800967c  00020780  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028ae9  00000000  00000000  0002016a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004042  00000000  00000000  00048c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001310  00000000  00000000  0004cc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001178  00000000  00000000  0004dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038a50  00000000  00000000  0004f120  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00014e8f  00000000  00000000  00087b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0015d6ad  00000000  00000000  0009c9ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001fa0ac  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005560  00000000  00000000  001fa128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400013c 	.word	0x2400013c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800941c 	.word	0x0800941c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000140 	.word	0x24000140
 80002dc:	0800941c 	.word	0x0800941c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <readConfig>:
int16_t irData[64];

//Teste

int16_t readConfig(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af04      	add	r7, sp, #16
	uint8_t configLow = 0, configHigh = 0, buff[2];
 8000686:	2300      	movs	r3, #0
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	2300      	movs	r3, #0
 800068c:	73bb      	strb	r3, [r7, #14]
	uint32_t comando = 0x02920001;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <readConfig+0x5c>)
 8000690:	60bb      	str	r3, [r7, #8]
	while(HAL_I2C_Mem_Read2(&hi2c2, (uint16_t)0xC0, comando, I2C_MEMADD_SIZE_32BIT, buff, 2, 1000) != HAL_OK);
 8000692:	bf00      	nop
 8000694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2302      	movs	r3, #2
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2304      	movs	r3, #4
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	21c0      	movs	r1, #192	; 0xc0
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <readConfig+0x60>)
 80006aa:	f002 ffb1 	bl	8003610 <HAL_I2C_Mem_Read2>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1ef      	bne.n	8000694 <readConfig+0x14>
	configLow = buff[0];
 80006b4:	793b      	ldrb	r3, [r7, #4]
 80006b6:	73fb      	strb	r3, [r7, #15]
	configHigh = buff[1];
 80006b8:	797b      	ldrb	r3, [r7, #5]
 80006ba:	73bb      	strb	r3, [r7, #14]
	configuration = ((int16_t)(configHigh << 8) | configLow);
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <readConfig+0x64>)
 80006cc:	801a      	strh	r2, [r3, #0]
	return configuration;
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <readConfig+0x64>)
 80006d0:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	02920001 	.word	0x02920001
 80006e0:	2400020c 	.word	0x2400020c
 80006e4:	2400015a 	.word	0x2400015a

080006e8 <setConfiguration>:
	while(HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)MLXir<<1, buff, 5, 100) != HAL_OK);

}

void setConfiguration(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af02      	add	r7, sp, #8
	uint8_t Hz_LSB, buff[5];
	switch (refreshRate){
 80006ee:	2308      	movs	r3, #8
 80006f0:	2b20      	cmp	r3, #32
 80006f2:	d85a      	bhi.n	80007aa <setConfiguration+0xc2>
 80006f4:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <setConfiguration+0x14>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	08000781 	.word	0x08000781
 8000700:	08000787 	.word	0x08000787
 8000704:	0800078d 	.word	0x0800078d
 8000708:	080007ab 	.word	0x080007ab
 800070c:	08000793 	.word	0x08000793
 8000710:	080007ab 	.word	0x080007ab
 8000714:	080007ab 	.word	0x080007ab
 8000718:	080007ab 	.word	0x080007ab
 800071c:	08000799 	.word	0x08000799
 8000720:	080007ab 	.word	0x080007ab
 8000724:	080007ab 	.word	0x080007ab
 8000728:	080007ab 	.word	0x080007ab
 800072c:	080007ab 	.word	0x080007ab
 8000730:	080007ab 	.word	0x080007ab
 8000734:	080007ab 	.word	0x080007ab
 8000738:	080007ab 	.word	0x080007ab
 800073c:	0800079f 	.word	0x0800079f
 8000740:	080007ab 	.word	0x080007ab
 8000744:	080007ab 	.word	0x080007ab
 8000748:	080007ab 	.word	0x080007ab
 800074c:	080007ab 	.word	0x080007ab
 8000750:	080007ab 	.word	0x080007ab
 8000754:	080007ab 	.word	0x080007ab
 8000758:	080007ab 	.word	0x080007ab
 800075c:	080007ab 	.word	0x080007ab
 8000760:	080007ab 	.word	0x080007ab
 8000764:	080007ab 	.word	0x080007ab
 8000768:	080007ab 	.word	0x080007ab
 800076c:	080007ab 	.word	0x080007ab
 8000770:	080007ab 	.word	0x080007ab
 8000774:	080007ab 	.word	0x080007ab
 8000778:	080007ab 	.word	0x080007ab
 800077c:	080007a5 	.word	0x080007a5
	case 0:
		Hz_LSB = 0b00111111;
 8000780:	233f      	movs	r3, #63	; 0x3f
 8000782:	71fb      	strb	r3, [r7, #7]
		break;
 8000784:	e013      	b.n	80007ae <setConfiguration+0xc6>
	case 1:
		Hz_LSB = 0b00111110;
 8000786:	233e      	movs	r3, #62	; 0x3e
 8000788:	71fb      	strb	r3, [r7, #7]
		break;
 800078a:	e010      	b.n	80007ae <setConfiguration+0xc6>
	case 2:
		Hz_LSB = 0b00111101;
 800078c:	233d      	movs	r3, #61	; 0x3d
 800078e:	71fb      	strb	r3, [r7, #7]
		break;
 8000790:	e00d      	b.n	80007ae <setConfiguration+0xc6>
	case 4:
		Hz_LSB = 0b00111100;
 8000792:	233c      	movs	r3, #60	; 0x3c
 8000794:	71fb      	strb	r3, [r7, #7]
		break;
 8000796:	e00a      	b.n	80007ae <setConfiguration+0xc6>
	case 8:
		Hz_LSB = 0b00111011;
 8000798:	233b      	movs	r3, #59	; 0x3b
 800079a:	71fb      	strb	r3, [r7, #7]
		break;
 800079c:	e007      	b.n	80007ae <setConfiguration+0xc6>
	case 16:
		Hz_LSB = 0b00111010;
 800079e:	233a      	movs	r3, #58	; 0x3a
 80007a0:	71fb      	strb	r3, [r7, #7]
		break;
 80007a2:	e004      	b.n	80007ae <setConfiguration+0xc6>
	case 32:
		Hz_LSB = 0b00111001;
 80007a4:	2339      	movs	r3, #57	; 0x39
 80007a6:	71fb      	strb	r3, [r7, #7]
		break;
 80007a8:	e001      	b.n	80007ae <setConfiguration+0xc6>
	default:
		Hz_LSB = 0b00111110;
 80007aa:	233e      	movs	r3, #62	; 0x3e
 80007ac:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t defaultConfig_H = 0b00000100;
 80007ae:	2304      	movs	r3, #4
 80007b0:	71bb      	strb	r3, [r7, #6]
	/*buff[0] = 0x03;
	buff[1] = (Hz_LSB - 0x55);
	buff[2] = Hz_LSB;
	buff[3] = (eepromData[0xF6] - 0x55);
	buff[4] = eepromData[0xF6];*/
	buff[0] = 0x03;
 80007b2:	2303      	movs	r3, #3
 80007b4:	703b      	strb	r3, [r7, #0]
	buff[1] = ((uint8_t)Hz_LSB - 0x55);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	3b55      	subs	r3, #85	; 0x55
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	707b      	strb	r3, [r7, #1]
	buff[2] = Hz_LSB;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	70bb      	strb	r3, [r7, #2]
	buff[3] = defaultConfig_H - 0x55;
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	3b55      	subs	r3, #85	; 0x55
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	70fb      	strb	r3, [r7, #3]
	buff[4] = defaultConfig_H;
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	713b      	strb	r3, [r7, #4]
	while(HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)MLXir<<1, buff, 5, 100) != HAL_OK);
 80007ce:	bf00      	nop
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <setConfiguration+0x124>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	b299      	uxth	r1, r3
 80007d8:	463a      	mov	r2, r7
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2305      	movs	r3, #5
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <setConfiguration+0x128>)
 80007e2:	f002 fd93 	bl	800330c <HAL_I2C_Master_Transmit>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f1      	bne.n	80007d0 <setConfiguration+0xe8>
	resolution = (readConfig() & 0x30) >> 4;
 80007ec:	f7ff ff48 	bl	8000680 <readConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	111b      	asrs	r3, r3, #4
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	f003 0303 	and.w	r3, r3, #3
 80007fc:	b21a      	sxth	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <setConfiguration+0x12c>)
 8000800:	801a      	strh	r2, [r3, #0]
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	24000000 	.word	0x24000000
 8000810:	2400020c 	.word	0x2400020c
 8000814:	24000158 	.word	0x24000158

08000818 <MLX_Init>:
}

/*---------------------------------------------*/

MLX * MLX_Init(I2C_HandleTypeDef * hi2c)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0ca      	sub	sp, #296	; 0x128
 800081c:	af04      	add	r7, sp, #16
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	6018      	str	r0, [r3, #0]
	uint8_t pacote[5];
	MLX * mlx = malloc(sizeof(*mlx));
 8000822:	f44f 70b2 	mov.w	r0, #356	; 0x164
 8000826:	f007 fb9d 	bl	8007f64 <malloc>
 800082a:	4603      	mov	r3, r0
 800082c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	if (NULL == mlx) {return NULL;}
 8000830:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <MLX_Init+0x24>
 8000838:	2300      	movs	r3, #0
 800083a:	e169      	b.n	8000b10 <MLX_Init+0x2f8>

	//Read EEPROM
	uint8_t eepromData[256];

	uint8_t cmd = 0x00;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	while(HAL_I2C_Mem_Read(&hi2c2,  (uint16_t)0xA0, (uint16_t)0x00, sizeof(cmd), eepromData, 256, 100) != HAL_OK);
 8000842:	bf00      	nop
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	2200      	movs	r2, #0
 8000858:	21a0      	movs	r1, #160	; 0xa0
 800085a:	48b0      	ldr	r0, [pc, #704]	; (8000b1c <MLX_Init+0x304>)
 800085c:	f002 fff0 	bl	8003840 <HAL_I2C_Mem_Read>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1ee      	bne.n	8000844 <MLX_Init+0x2c>

	//Salvando as constantes de acordo com a tabela 8
	memcpy(mlx->delA, &eepromData, sizeof(*mlx->delA)*NUM_PIXELS);
 8000866:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800086a:	3382      	adds	r3, #130	; 0x82
 800086c:	f107 0108 	add.w	r1, r7, #8
 8000870:	2240      	movs	r2, #64	; 0x40
 8000872:	4618      	mov	r0, r3
 8000874:	f007 fb86 	bl	8007f84 <memcpy>
	memcpy(mlx->TaDep, &eepromData[0x40], sizeof(*mlx->TaDep)*NUM_PIXELS);
 8000878:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800087c:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	3340      	adds	r3, #64	; 0x40
 8000886:	2240      	movs	r2, #64	; 0x40
 8000888:	4619      	mov	r1, r3
 800088a:	f007 fb7b 	bl	8007f84 <memcpy>
	memcpy(mlx->delAlpha, &eepromData[0x80], sizeof(*mlx->delAlpha)*NUM_PIXELS);
 800088e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000892:	f503 7081 	add.w	r0, r3, #258	; 0x102
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	3380      	adds	r3, #128	; 0x80
 800089c:	2240      	movs	r2, #64	; 0x40
 800089e:	4619      	mov	r1, r3
 80008a0:	f007 fb70 	bl	8007f84 <memcpy>
	mlx->Ks_scale = eepromData[0xC0];
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 80008ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008b0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	mlx->Ks4_EE = eepromData[0xC4];
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80008bc:	b25a      	sxtb	r2, r3
 80008be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008c2:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
	mlx->AcommL = eepromData[0xD0];
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 80008ce:	b25a      	sxtb	r2, r3
 80008d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008d4:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	mlx->AcommH = eepromData[0xD1];
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 80008e0:	b25a      	sxtb	r2, r3
 80008e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008e6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	mlx->AcpL = eepromData[0xD3];
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80008f2:	b25a      	sxtb	r2, r3
 80008f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008f8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	mlx->AcpH = eepromData[0xD4];
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8000904:	b25a      	sxtb	r2, r3
 8000906:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800090a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	mlx->Bcp = eepromData[0xD5];
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
 8000916:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800091a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	mlx->alphaCPL = eepromData[0xD6];
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
 8000926:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800092a:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	mlx->alphaCPH = eepromData[0xD7];
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
 8000936:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800093a:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	mlx->tgc = eepromData[0xD8];
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8000946:	b25a      	sxtb	r2, r3
 8000948:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800094c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	mlx->delAlphaScale = eepromData[0xD9];
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
 8000958:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800095c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	mlx->Bi_scale = eepromData[0xD9];
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
 8000968:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800096c:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	memcpy(&(mlx->Vth), &eepromData[0xDA], sizeof(mlx->Vth));
 8000970:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000974:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8000978:	f107 0208 	add.w	r2, r7, #8
 800097c:	f8b2 20da 	ldrh.w	r2, [r2, #218]	; 0xda
 8000980:	801a      	strh	r2, [r3, #0]
	memcpy(&(mlx->Kt1), &eepromData[0xDC], sizeof(mlx->Kt1));
 8000982:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000986:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800098a:	f107 0208 	add.w	r2, r7, #8
 800098e:	f8b2 20dc 	ldrh.w	r2, [r2, #220]	; 0xdc
 8000992:	801a      	strh	r2, [r3, #0]
	memcpy(&(mlx->Kt2), &eepromData[0xDE], sizeof(mlx->Kt2));
 8000994:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000998:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800099c:	f107 0208 	add.w	r2, r7, #8
 80009a0:	f8b2 20de 	ldrh.w	r2, [r2, #222]	; 0xde
 80009a4:	801a      	strh	r2, [r3, #0]
	mlx->Kt_scale = eepromData[0xD2];
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 80009ae:	b25a      	sxtb	r2, r3
 80009b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009b4:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 	mlx->alpha0L = eepromData[0xE0];
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
 80009c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009c4:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	mlx->alpha0H = eepromData[0xE1];
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 80009d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009d4:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	mlx->alpha0Scale = eepromData[0xE2];
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 80009e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009e4:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	mlx->delAlphaScale = eepromData[0xE3];
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	f893 20e3 	ldrb.w	r2, [r3, #227]	; 0xe3
 80009f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80009f4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	mlx->epsilL = eepromData[0xE4];
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
 8000a00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a04:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	mlx->epsilH = eepromData[0xE5];
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	f893 20e5 	ldrb.w	r2, [r3, #229]	; 0xe5
 8000a10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a14:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
	mlx->KsTaL = eepromData[0xE6];
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8000a20:	b25a      	sxtb	r2, r3
 8000a22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a26:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	mlx->KsTaH = eepromData[0xE7];
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 8000a32:	b25a      	sxtb	r2, r3
 8000a34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a38:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	memcpy(&(mlx->config), &eepromData[0xF5], sizeof(mlx->config));
 8000a3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a40:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8000a44:	f107 0208 	add.w	r2, r7, #8
 8000a48:	f8b2 20f5 	ldrh.w	r2, [r2, #245]	; 0xf5
 8000a4c:	b292      	uxth	r2, r2
 8000a4e:	801a      	strh	r2, [r3, #0]
	mlx->OSCtrim = eepromData[0xF7];
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
 8000a58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a5c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	//Write Oscillator Trim
	//pg. 10 datasheet
	pacote[0] = WRITE_OSC_TRIM;
 8000a60:	2304      	movs	r3, #4
 8000a62:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
	pacote[1] = mlx->OSCtrim-0xAA;
 8000a66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a6a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000a6e:	3356      	adds	r3, #86	; 0x56
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
	pacote[2] = mlx->OSCtrim;
 8000a76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a7a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000a7e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	pacote[3] = 0x56;
 8000a82:	2356      	movs	r3, #86	; 0x56
 8000a84:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	pacote[4] = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	while(HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)MLXir<<1, pacote,  sizeof(*pacote)*5, 100) != HAL_OK);
 8000a8e:	bf00      	nop
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MLX_Init+0x308>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	b299      	uxth	r1, r3
 8000a98:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000a9c:	2364      	movs	r3, #100	; 0x64
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2305      	movs	r3, #5
 8000aa2:	481e      	ldr	r0, [pc, #120]	; (8000b1c <MLX_Init+0x304>)
 8000aa4:	f002 fc32 	bl	800330c <HAL_I2C_Master_Transmit>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f0      	bne.n	8000a90 <MLX_Init+0x278>
	pacote[1] = eepromData[0xF5] - 0x55;
	pacote[2] = eepromData[0xF5];
	pacote[3] = eepromData[0xF6] - 0x55;
	pacote[4] = eepromData[0xF6];*/
	//while(HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)MLXir<<1, packet, sizeof(*packet)*5, 100) != HAL_OK);
	setConfiguration();
 8000aae:	f7ff fe1b 	bl	80006e8 <setConfiguration>

	  UART_print("eeprom\n");
 8000ab2:	481c      	ldr	r0, [pc, #112]	; (8000b24 <MLX_Init+0x30c>)
 8000ab4:	f000 ff6e 	bl	8001994 <UART_print>
	  for(int k = 0; k < 256; k++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000abe:	e01a      	b.n	8000af6 <MLX_Init+0x2de>
	    {
			UART_print("(#%d)-> %d ", k,  eepromData[k]);
 8000ac0:	f107 0208 	add.w	r2, r7, #8
 8000ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ac8:	4413      	add	r3, r2
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000ad2:	4815      	ldr	r0, [pc, #84]	; (8000b28 <MLX_Init+0x310>)
 8000ad4:	f000 ff5e 	bl	8001994 <UART_print>
			if((k+1)%32 == 0) UART_print("\n");
 8000ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000adc:	3301      	adds	r3, #1
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d102      	bne.n	8000aec <MLX_Init+0x2d4>
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <MLX_Init+0x314>)
 8000ae8:	f000 ff54 	bl	8001994 <UART_print>
	  for(int k = 0; k < 256; k++)
 8000aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000af0:	3301      	adds	r3, #1
 8000af2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000afa:	2bff      	cmp	r3, #255	; 0xff
 8000afc:	dde0      	ble.n	8000ac0 <MLX_Init+0x2a8>
		}
	  UART_print("\n\n\n");
 8000afe:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MLX_Init+0x318>)
 8000b00:	f000 ff48 	bl	8001994 <UART_print>

	free(mlx);
 8000b04:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8000b08:	f007 fa34 	bl	8007f74 <free>
	return mlx;
 8000b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2400020c 	.word	0x2400020c
 8000b20:	24000000 	.word	0x24000000
 8000b24:	08009464 	.word	0x08009464
 8000b28:	08009440 	.word	0x08009440
 8000b2c:	0800944c 	.word	0x0800944c
 8000b30:	0800946c 	.word	0x0800946c

08000b34 <MLX_Read_IT>:

HAL_StatusTypeDef MLX_Read_IT(MLX * mlx) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0ac      	sub	sp, #176	; 0xb0
 8000b38:	af04      	add	r7, sp, #16
 8000b3a:	6078      	str	r0, [r7, #4]
	}*/



	// Sensor Data (Temperature / PTAT)
	uint8_t ptatLow=0,ptatHigh=0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	uint32_t comando = 0x02400001;
 8000b48:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <MLX_Read_IT+0x134>)
 8000b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint8_t buff[2] = {0};
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t ptt = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	while(HAL_I2C_Mem_Read2(&hi2c2, (uint16_t)0xC0, comando, I2C_MEMADD_SIZE_32BIT, buff, 2, 1000) != HAL_OK);
 8000b5a:	bf00      	nop
 8000b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	2302      	movs	r3, #2
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000b72:	21c0      	movs	r1, #192	; 0xc0
 8000b74:	483d      	ldr	r0, [pc, #244]	; (8000c6c <MLX_Read_IT+0x138>)
 8000b76:	f002 fd4b 	bl	8003610 <HAL_I2C_Mem_Read2>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1ed      	bne.n	8000b5c <MLX_Read_IT+0x28>
	ptatLow = buff[0];
 8000b80:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000b84:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	ptatHigh = buff[1];
 8000b88:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000b8c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	mlx->ptat = ((uint16_t) (ptatHigh << 8) | ptatLow);
 8000b90:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80


	//CPIX
	comando = 0x02410001;
 8000baa:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <MLX_Read_IT+0x13c>)
 8000bac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint8_t cpixLow=0,cpixHigh=0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	while(HAL_I2C_Mem_Read2(&hi2c2, (uint16_t)0xC0, comando, I2C_MEMADD_SIZE_32BIT, buff, 2, 1000) != HAL_OK);
 8000bbc:	bf00      	nop
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2304      	movs	r3, #4
 8000bd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000bd4:	21c0      	movs	r1, #192	; 0xc0
 8000bd6:	4825      	ldr	r0, [pc, #148]	; (8000c6c <MLX_Read_IT+0x138>)
 8000bd8:	f002 fd1a 	bl	8003610 <HAL_I2C_Mem_Read2>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1ed      	bne.n	8000bbe <MLX_Read_IT+0x8a>
	cpixLow = buff[0];
 8000be2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000be6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	cpixHigh = buff[1];
 8000bea:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8000bee:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	mlx->CPIX = ((uint16_t) (cpixHigh << 8) | cpixLow);
 8000bf2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162


	// Tire Data (Temperature)
	volatile int i;
	uint8_t buffer[128] = {0};
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f007 f9c0 	bl	8007f9a <memset>
	comando = 0x02000140;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MLX_Read_IT+0x140>)
 8000c1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	while(HAL_I2C_Mem_Read2(&hi2c2, (uint16_t)(0x60<<1), comando, I2C_MEMADD_SIZE_32BIT, mlx->rawIR, 128, 1000) != HAL_OK);
 8000c20:	bf00      	nop
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c28:	9202      	str	r2, [sp, #8]
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2304      	movs	r3, #4
 8000c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000c36:	21c0      	movs	r1, #192	; 0xc0
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <MLX_Read_IT+0x138>)
 8000c3a:	f002 fce9 	bl	8003610 <HAL_I2C_Mem_Read2>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1ee      	bne.n	8000c22 <MLX_Read_IT+0xee>
	//UART_print("rawIR: \n");
	for(int k = 0; k < 64; k++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000c4a:	e004      	b.n	8000c56 <MLX_Read_IT+0x122>
 8000c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c50:	3301      	adds	r3, #1
 8000c52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000c5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c5c:	ddf6      	ble.n	8000c4c <MLX_Read_IT+0x118>
	    // if((k+1)%16 == 0) UART_print("\n");
		}
	//UART_print("\n");


	return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	37a0      	adds	r7, #160	; 0xa0
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	02400001 	.word	0x02400001
 8000c6c:	2400020c 	.word	0x2400020c
 8000c70:	02410001 	.word	0x02410001
 8000c74:	02000140 	.word	0x02000140

08000c78 <Calc_Ta>:

double Calc_Ta(MLX* mlx) {
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	ed2d 8b04 	vpush	{d8-d9}
 8000c7e:	b095      	sub	sp, #84	; 0x54
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	// Temperatura absoluta

	// Ta = (-Kt1 + sqrt(power(Kt1, 2)-4*Kt2*(Vth-PTAT_DATA)))/(2*Kt2) + 25

	// Calculating Vth
	uint8_t config_reg = (uint8_t) ((mlx->config) >> 4) & CONFIG_MASK;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	double v = (mlx->Vth) / pow(2, (3-config_reg));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f9b3 314e 	ldrsh.w	r3, [r3, #334]	; 0x14e
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000ca6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000caa:	f1c3 0303 	rsb	r3, r3, #3
 8000cae:	ee07 3a90 	vmov	s15, r3
 8000cb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cb6:	eeb0 1b47 	vmov.f64	d1, d7
 8000cba:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000cbe:	f007 fd73 	bl	80087a8 <pow>
 8000cc2:	eeb0 6b40 	vmov.f64	d6, d0
 8000cc6:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000cca:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	uint8_t Kt_scale_shift1 = (uint8_t) ((mlx->Kt_scale) >> 4) & EEPROM_MASK;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	double kt1 = (mlx->Kt1) / (pow(2, Kt_scale_shift1) * pow(2, (3-config_reg)));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f9b3 3150 	ldrsh.w	r3, [r3, #336]	; 0x150
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000cea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000cee:	ee07 3a90 	vmov	s15, r3
 8000cf2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cf6:	eeb0 1b47 	vmov.f64	d1, d7
 8000cfa:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000cfe:	f007 fd53 	bl	80087a8 <pow>
 8000d02:	eeb0 9b40 	vmov.f64	d9, d0
 8000d06:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d0a:	f1c3 0303 	rsb	r3, r3, #3
 8000d0e:	ee07 3a90 	vmov	s15, r3
 8000d12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d16:	eeb0 1b47 	vmov.f64	d1, d7
 8000d1a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000d1e:	f007 fd43 	bl	80087a8 <pow>
 8000d22:	eeb0 7b40 	vmov.f64	d7, d0
 8000d26:	ee29 6b07 	vmul.f64	d6, d9, d7
 8000d2a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000d2e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	uint8_t Kt_scale_shift2 = (uint8_t) (mlx->Kt_scale) & EEPROM_MASK;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	double kt2 = ((mlx->Kt2) / (pow(2, Kt_scale_shift2+10) * pow(2, (3-config_reg)))); //não consigo casa decimal?
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	; 0x152
 8000d48:	ee07 3a90 	vmov	s15, r3
 8000d4c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d54:	330a      	adds	r3, #10
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d5e:	eeb0 1b47 	vmov.f64	d1, d7
 8000d62:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000d66:	f007 fd1f 	bl	80087a8 <pow>
 8000d6a:	eeb0 9b40 	vmov.f64	d9, d0
 8000d6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d72:	f1c3 0303 	rsb	r3, r3, #3
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d7e:	eeb0 1b47 	vmov.f64	d1, d7
 8000d82:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000d86:	f007 fd0f 	bl	80087a8 <pow>
 8000d8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d8e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8000d92:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000d96:	ed87 7b08 	vstr	d7, [r7, #32]
	uint16_t PTAT_data = mlx->ptat;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000da0:	83fb      	strh	r3, [r7, #30]

	//Ta
	double numer =  -kt1 + sqrt(pow(kt1, 2) - (4 * kt2 * (v - PTAT_data)));
 8000da2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000da6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8000daa:	f007 fcfd 	bl	80087a8 <pow>
 8000dae:	eeb0 4b40 	vmov.f64	d4, d0
 8000db2:	ed97 7b08 	vldr	d7, [r7, #32]
 8000db6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000dba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dc8:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 8000dcc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000dd0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dd4:	ee34 7b47 	vsub.f64	d7, d4, d7
 8000dd8:	eeb0 0b47 	vmov.f64	d0, d7
 8000ddc:	f007 fe14 	bl	8008a08 <sqrt>
 8000de0:	eeb0 6b40 	vmov.f64	d6, d0
 8000de4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000de8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000dec:	ed87 7b04 	vstr	d7, [r7, #16]
	double Ta = (numer / (2*(kt2))) + 25;
 8000df0:	ed97 7b08 	vldr	d7, [r7, #32]
 8000df4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000df8:	ed97 5b04 	vldr	d5, [r7, #16]
 8000dfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e00:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000e04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e08:	ed87 7b02 	vstr	d7, [r7, #8]
	return Ta;
 8000e0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000e10:	ec44 3b17 	vmov	d7, r3, r4
}
 8000e14:	eeb0 0b47 	vmov.f64	d0, d7
 8000e18:	3754      	adds	r7, #84	; 0x54
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	ecbd 8b04 	vpop	{d8-d9}
 8000e20:	bd90      	pop	{r4, r7, pc}
 8000e22:	0000      	movs	r0, r0
 8000e24:	0000      	movs	r0, r0
	...

08000e28 <Calc_Vir_Compensated>:



double Calc_Vir_Compensated(MLX* mlx, int8_t i, int8_t j, double Ta) {
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	ed2d 8b04 	vpush	{d8-d9}
 8000e2e:	b09f      	sub	sp, #124	; 0x7c
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	460b      	mov	r3, r1
 8000e36:	ed87 0b00 	vstr	d0, [r7]
 8000e3a:	72fb      	strb	r3, [r7, #11]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	72bb      	strb	r3, [r7, #10]

	// Vir Offset Compensation
	double Ai, Bi;
	uint8_t address = (i + 4*j);
 8000e40:	7abb      	ldrb	r3, [r7, #10]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	7afb      	ldrb	r3, [r7, #11]
 8000e48:	4413      	add	r3, r2
 8000e4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	int8_t Ta0 = 25;
 8000e4e:	2319      	movs	r3, #25
 8000e50:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t config_reg = (uint8_t) ((mlx->config)>>4) & CONFIG_MASK;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	int16_t Vir = (mlx->rawIR)[address];
 8000e68:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e72:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a


	int16_t Acomm = 256*(uint8_t)(mlx->AcommH) + (uint8_t)(mlx->AcommL) - 65536;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f993 3145 	ldrsb.w	r3, [r3, #325]	; 0x145
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f993 3144 	ldrsb.w	r3, [r3, #324]	; 0x144
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	uint8_t delAij = (mlx->delA)[address];
 8000e96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000ea2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t delA_scale = (uint8_t) ((mlx->delAlphaScale)>>6) & EEPROM_MASK; //mudei, antes era >>4
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8000eac:	099b      	lsrs	r3, r3, #6
 8000eae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	Ai = (Acomm + delAij*pow(2, delA_scale))/pow(2, 3-config_reg);
 8000eb2:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000ebe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8000eca:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ed6:	eeb0 1b47 	vmov.f64	d1, d7
 8000eda:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000ede:	f007 fc63 	bl	80087a8 <pow>
 8000ee2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ee6:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000eea:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000eee:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000ef2:	f1c3 0303 	rsb	r3, r3, #3
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000efe:	eeb0 1b47 	vmov.f64	d1, d7
 8000f02:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000f06:	f007 fc4f 	bl	80087a8 <pow>
 8000f0a:	eeb0 6b40 	vmov.f64	d6, d0
 8000f0e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000f12:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58

	int8_t Bij = (mlx->TaDep)[address];
 8000f16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8000f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t Bi_scale = (uint8_t) (mlx->Bi_scale) & EEPROM_MASK;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	Bi = Bij/(pow(2, Bi_scale)*pow(2, 3-config_reg));
 8000f34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000f40:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f4c:	eeb0 1b47 	vmov.f64	d1, d7
 8000f50:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000f54:	f007 fc28 	bl	80087a8 <pow>
 8000f58:	eeb0 9b40 	vmov.f64	d9, d0
 8000f5c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000f60:	f1c3 0303 	rsb	r3, r3, #3
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f6c:	eeb0 1b47 	vmov.f64	d1, d7
 8000f70:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000f74:	f007 fc18 	bl	80087a8 <pow>
 8000f78:	eeb0 7b40 	vmov.f64	d7, d0
 8000f7c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8000f80:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000f84:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

	double Vir_Offcompensated = Vir - (Ai + Bi*(Ta-Ta0));
 8000f88:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f94:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fa0:	ed97 5b00 	vldr	d5, [r7]
 8000fa4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000fa8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8000fac:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000fb0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8000fb4:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000fb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fbc:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	// Vir Thermal Gradient Compensation
	int16_t Acp = 256*(mlx->AcpH) + (mlx->AcpL);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f993 3147 	ldrsb.w	r3, [r3, #327]	; 0x147
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f993 3146 	ldrsb.w	r3, [r3, #326]	; 0x146
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	if(Acp > 32768) Acp = Acp - 65536;

	double Bcp = mlx->Bcp;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fe8:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
	if(Bcp > 127) Bcp = Bcp - 256;
 8000fec:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000ff0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80010f8 <Calc_Vir_Compensated+0x2d0>
 8000ff4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	dd07      	ble.n	800100e <Calc_Vir_Compensated+0x1e6>
 8000ffe:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001002:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001100 <Calc_Vir_Compensated+0x2d8>
 8001006:	ee37 7b46 	vsub.f64	d7, d7, d6
 800100a:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
	Bcp = (Bcp) / (pow(2, Bi_scale));
 800100e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800101a:	eeb0 1b47 	vmov.f64	d1, d7
 800101e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001022:	f007 fbc1 	bl	80087a8 <pow>
 8001026:	eeb0 5b40 	vmov.f64	d5, d0
 800102a:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800102e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001032:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70

	//double VirCP_Offcompensated
	double VirCP_Offcompensated = (int16_t)mlx->CPIX - (Acp + Bcp*(Ta-25));
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800103c:	b21b      	sxth	r3, r3
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001046:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001052:	ed97 7b00 	vldr	d7, [r7]
 8001056:	eeb3 4b09 	vmov.f64	d4, #57	; 0x41c80000  25.0
 800105a:	ee37 4b44 	vsub.f64	d4, d7, d4
 800105e:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001062:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001066:	ee35 7b07 	vadd.f64	d7, d5, d7
 800106a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800106e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30

	double tgc = (mlx->tgc)/32; 	//tgc = 0 na eeprom? Deu certo
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f993 314b 	ldrsb.w	r3, [r3, #331]	; 0x14b
 8001078:	2b00      	cmp	r3, #0
 800107a:	da00      	bge.n	800107e <Calc_Vir_Compensated+0x256>
 800107c:	331f      	adds	r3, #31
 800107e:	115b      	asrs	r3, r3, #5
 8001080:	b25b      	sxtb	r3, r3
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800108a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

	double VirTGC_Compensated = Vir_Offcompensated - tgc*VirCP_Offcompensated;
 800108e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001092:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001096:	ee26 7b07 	vmul.f64	d7, d6, d7
 800109a:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 800109e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010a2:	ed87 7b08 	vstr	d7, [r7, #32]
	//double VirTGC_Compensated = Vir_Offcompensated - 0.75*VirCP_Offcompensated;

	// Emissivity compensation
	double epsil = (256*(mlx->epsilH)+(mlx->epsilL))/TWO_BYTE_MAX;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
 80010b4:	4413      	add	r3, r2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	da03      	bge.n	80010c2 <Calc_Vir_Compensated+0x29a>
 80010ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80010be:	441a      	add	r2, r3
 80010c0:	4613      	mov	r3, r2
 80010c2:	13db      	asrs	r3, r3, #15
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010cc:	ed87 7b06 	vstr	d7, [r7, #24]

	double Vir_Compensated = VirTGC_Compensated/epsil;
 80010d0:	ed97 5b08 	vldr	d5, [r7, #32]
 80010d4:	ed97 6b06 	vldr	d6, [r7, #24]
 80010d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010dc:	ed87 7b04 	vstr	d7, [r7, #16]

	return Vir_Compensated;
 80010e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80010e4:	ec44 3b17 	vmov	d7, r3, r4

}
 80010e8:	eeb0 0b47 	vmov.f64	d0, d7
 80010ec:	377c      	adds	r7, #124	; 0x7c
 80010ee:	46bd      	mov	sp, r7
 80010f0:	ecbd 8b04 	vpop	{d8-d9}
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	00000000 	.word	0x00000000
 80010fc:	405fc000 	.word	0x405fc000
 8001100:	00000000 	.word	0x00000000
 8001104:	40700000 	.word	0x40700000

08001108 <Calc_Alpha_Compensated>:

double Calc_Alpha_Compensated(MLX* mlx, int8_t i, int8_t j, double Ta) {
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	ed2d 8b04 	vpush	{d8-d9}
 800110e:	b097      	sub	sp, #92	; 0x5c
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	460b      	mov	r3, r1
 8001116:	ed87 0b00 	vstr	d0, [r7]
 800111a:	72fb      	strb	r3, [r7, #11]
 800111c:	4613      	mov	r3, r2
 800111e:	72bb      	strb	r3, [r7, #10]

	// alpha_comp = (1 + KsTa*(Ta-Ta0))*(alpha_ij-tgc*alpha_cp);

	uint8_t TA0 = 25;
 8001120:	2319      	movs	r3, #25
 8001122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	double KsTa = (256*(mlx->KsTaH)+(mlx->KsTaL))/pow(2,20);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	f992 215b 	ldrsb.w	r2, [r2, #347]	; 0x15b
 8001134:	4413      	add	r3, r2
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800113e:	ed9f 5b68 	vldr	d5, [pc, #416]	; 80012e0 <Calc_Alpha_Compensated+0x1d8>
 8001142:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001146:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

//	/KsTa = 524/pow(2,20);

	// Calculating alpha_ij
	uint8_t config_reg = (uint8_t) ((mlx -> config) >> 4) & CONFIG_MASK;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	b29b      	uxth	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	double alpha0 = (256*(mlx->alpha0H)+(mlx->alpha0L))/pow(2, (mlx->alpha0Scale));
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	f892 2155 	ldrb.w	r2, [r2, #341]	; 0x155
 800116c:	4413      	add	r3, r2
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001184:	eeb0 1b47 	vmov.f64	d1, d7
 8001188:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800118c:	f007 fb0c 	bl	80087a8 <pow>
 8001190:	eeb0 6b40 	vmov.f64	d6, d0
 8001194:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001198:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	uint8_t address = i + 4*j;
 800119c:	7abb      	ldrb	r3, [r7, #10]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	4413      	add	r3, r2
 80011a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	double delAlpha = ((mlx->delA)[address])/pow(2,(mlx->delAlphaScale));
 80011aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011cc:	eeb0 1b47 	vmov.f64	d1, d7
 80011d0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80011d4:	f007 fae8 	bl	80087a8 <pow>
 80011d8:	eeb0 6b40 	vmov.f64	d6, d0
 80011dc:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80011e0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double alpha_ij = (alpha0 + delAlpha)/pow(2, 3-config_reg);
 80011e4:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80011e8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80011ec:	ee36 8b07 	vadd.f64	d8, d6, d7
 80011f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011f4:	f1c3 0303 	rsb	r3, r3, #3
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001200:	eeb0 1b47 	vmov.f64	d1, d7
 8001204:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001208:	f007 face 	bl	80087a8 <pow>
 800120c:	eeb0 6b40 	vmov.f64	d6, d0
 8001210:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001214:	ed87 7b08 	vstr	d7, [r7, #32]

	// Calculating alpha_cp
	double alpha_cp = (256*(mlx->alphaCPH)+(mlx->alphaCPL))/(pow(2,(mlx->alpha0Scale))*
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	f892 2149 	ldrb.w	r2, [r2, #329]	; 0x149
 8001226:	4413      	add	r3, r2
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800123e:	eeb0 1b47 	vmov.f64	d1, d7
 8001242:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001246:	f007 faaf 	bl	80087a8 <pow>
 800124a:	eeb0 9b40 	vmov.f64	d9, d0
																pow(2, 3-config_reg));
 800124e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001252:	f1c3 0303 	rsb	r3, r3, #3
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800125e:	eeb0 1b47 	vmov.f64	d1, d7
 8001262:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8001266:	f007 fa9f 	bl	80087a8 <pow>
 800126a:	eeb0 7b40 	vmov.f64	d7, d0
	double alpha_cp = (256*(mlx->alphaCPH)+(mlx->alphaCPL))/(pow(2,(mlx->alpha0Scale))*
 800126e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001272:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001276:	ed87 7b06 	vstr	d7, [r7, #24]

	double alpha_comp = (1 + KsTa*(Ta-TA0))*(alpha_ij-(mlx->tgc)*alpha_cp);
 800127a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001286:	ed97 6b00 	vldr	d6, [r7]
 800128a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800128e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001292:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001296:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800129a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f993 314b 	ldrsb.w	r3, [r3, #331]	; 0x14b
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80012ac:	ed97 7b06 	vldr	d7, [r7, #24]
 80012b0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012b4:	ed97 5b08 	vldr	d5, [r7, #32]
 80012b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80012bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012c0:	ed87 7b04 	vstr	d7, [r7, #16]
	//double alpha_comp = (1 + KsTa*(Ta-TA0))*(alpha_ij-(0.75)*alpha_cp);

	return alpha_comp;
 80012c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80012c8:	ec44 3b17 	vmov	d7, r3, r4
}
 80012cc:	eeb0 0b47 	vmov.f64	d0, d7
 80012d0:	375c      	adds	r7, #92	; 0x5c
 80012d2:	46bd      	mov	sp, r7
 80012d4:	ecbd 8b04 	vpop	{d8-d9}
 80012d8:	bd90      	pop	{r4, r7, pc}
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	00000000 	.word	0x00000000
 80012e4:	41300000 	.word	0x41300000

080012e8 <Calc_Ks4>:

double Calc_Ks4(MLX* mlx) {
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	ed2d 8b02 	vpush	{d8}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

	double Ks4 = (mlx->Ks4_EE)/pow(2, (mlx->Ks_scale)+8);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f993 3143 	ldrsb.w	r3, [r3, #323]	; 0x143
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8001308:	3308      	adds	r3, #8
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001312:	eeb0 1b47 	vmov.f64	d1, d7
 8001316:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800131a:	f007 fa45 	bl	80087a8 <pow>
 800131e:	eeb0 6b40 	vmov.f64	d6, d0
 8001322:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001326:	ed87 7b02 	vstr	d7, [r7, #8]
	return Ks4; //Ks4 = 0 no BAB e BAD
 800132a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800132e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001332:	eeb0 0b47 	vmov.f64	d0, d7
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	ecbd 8b02 	vpop	{d8}
 800133e:	bd90      	pop	{r4, r7, pc}

08001340 <MLX_CalcTemp>:

double MLX_CalcTemp(MLX* mlx, int8_t i, int8_t j) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b097      	sub	sp, #92	; 0x5c
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
 800134c:	4613      	mov	r3, r2
 800134e:	70bb      	strb	r3, [r7, #2]

	// verifica se está no range
	//if(!(i<4 && j<16)) { exit(EXIT_FAILURE); }

	// Calculando parâmetros para usar no cálculo de To
	double Ta = Calc_Ta(mlx);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fc91 	bl	8000c78 <Calc_Ta>
 8001356:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
	double Vir_Compensated = Calc_Vir_Compensated(mlx, i, j, Ta);
 800135a:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800135e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001362:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fd5d 	bl	8000e28 <Calc_Vir_Compensated>
 800136e:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	double Alpha_Compensated = Calc_Alpha_Compensated(mlx, i, j, Ta);
 8001372:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800137a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800137e:	4619      	mov	r1, r3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fec1 	bl	8001108 <Calc_Alpha_Compensated>
 8001386:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	double Ks4 = Calc_Ks4(mlx);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffac 	bl	80012e8 <Calc_Ks4>
 8001390:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	double TaK4 = pow(Ta+ABSOLUTE_TEMP, 4);
 8001394:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001398:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8001480 <MLX_CalcTemp+0x140>
 800139c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013a0:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 80013a4:	eeb0 0b47 	vmov.f64	d0, d7
 80013a8:	f007 f9fe 	bl	80087a8 <pow>
 80013ac:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	// Cálculo de Sx, Sx = 0 em BAB e BAD
	double tmp1 = pow(Alpha_Compensated, 3)*Vir_Compensated;
 80013b0:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80013b4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80013b8:	f007 f9f6 	bl	80087a8 <pow>
 80013bc:	eeb0 6b40 	vmov.f64	d6, d0
 80013c0:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80013c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013c8:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double tmp2 = pow(Alpha_Compensated, 4)*TaK4;
 80013cc:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 80013d0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80013d4:	f007 f9e8 	bl	80087a8 <pow>
 80013d8:	eeb0 6b40 	vmov.f64	d6, d0
 80013dc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80013e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013e4:	ed87 7b08 	vstr	d7, [r7, #32]
	double Sx = Ks4*pow(tmp1+tmp2, 1.0/4.0);
 80013e8:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80013ec:	ed97 7b08 	vldr	d7, [r7, #32]
 80013f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013f4:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
 80013f8:	eeb0 0b47 	vmov.f64	d0, d7
 80013fc:	f007 f9d4 	bl	80087a8 <pow>
 8001400:	eeb0 6b40 	vmov.f64	d6, d0
 8001404:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001408:	ee27 7b06 	vmul.f64	d7, d7, d6
 800140c:	ed87 7b06 	vstr	d7, [r7, #24]

	// Cálculo To
	double tmp3 = Alpha_Compensated*(1-Ks4*ABSOLUTE_TEMP) + Sx;
 8001410:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001414:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001480 <MLX_CalcTemp+0x140>
 8001418:	ee27 7b06 	vmul.f64	d7, d7, d6
 800141c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001420:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001424:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001428:	ee26 7b07 	vmul.f64	d7, d6, d7
 800142c:	ed97 6b06 	vldr	d6, [r7, #24]
 8001430:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001434:	ed87 7b04 	vstr	d7, [r7, #16]
	double t0 = pow((Vir_Compensated/tmp3)+TaK4, 0.25) - ABSOLUTE_TEMP;
 8001438:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 800143c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001440:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001444:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001448:	ee36 7b07 	vadd.f64	d7, d6, d7
 800144c:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
 8001450:	eeb0 0b47 	vmov.f64	d0, d7
 8001454:	f007 f9a8 	bl	80087a8 <pow>
 8001458:	eeb0 6b40 	vmov.f64	d6, d0
 800145c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8001480 <MLX_CalcTemp+0x140>
 8001460:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001464:	ed87 7b02 	vstr	d7, [r7, #8]

	return t0;
 8001468:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800146c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001470:	eeb0 0b47 	vmov.f64	d0, d7
 8001474:	375c      	adds	r7, #92	; 0x5c
 8001476:	46bd      	mov	sp, r7
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	66666666 	.word	0x66666666
 8001484:	40711266 	.word	0x40711266

08001488 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <MX_ETH_Init+0x90>)
 800148e:	4a23      	ldr	r2, [pc, #140]	; (800151c <MX_ETH_Init+0x94>)
 8001490:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_ETH_Init+0x90>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_ETH_Init+0x90>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	3301      	adds	r3, #1
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_ETH_Init+0x90>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	3302      	adds	r3, #2
 80014aa:	22e1      	movs	r2, #225	; 0xe1
 80014ac:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_ETH_Init+0x90>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	3303      	adds	r3, #3
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_ETH_Init+0x90>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	3304      	adds	r3, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_ETH_Init+0x90>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	3305      	adds	r3, #5
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_ETH_Init+0x90>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_ETH_Init+0x90>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_ETH_Init+0x98>)
 80014d6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_ETH_Init+0x90>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_ETH_Init+0x9c>)
 80014dc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_ETH_Init+0x90>)
 80014e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014e4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <MX_ETH_Init+0x90>)
 80014e8:	f001 f886 	bl	80025f8 <HAL_ETH_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f000 fbd1 	bl	8001c98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80014f6:	2234      	movs	r2, #52	; 0x34
 80014f8:	2100      	movs	r1, #0
 80014fa:	480b      	ldr	r0, [pc, #44]	; (8001528 <MX_ETH_Init+0xa0>)
 80014fc:	f006 fd4d 	bl	8007f9a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_ETH_Init+0xa0>)
 8001502:	2221      	movs	r2, #33	; 0x21
 8001504:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_ETH_Init+0xa0>)
 8001508:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800150c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_ETH_Init+0xa0>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	24000168 	.word	0x24000168
 800151c:	40028000 	.word	0x40028000
 8001520:	240000dc 	.word	0x240000dc
 8001524:	2400007c 	.word	0x2400007c
 8001528:	240001d8 	.word	0x240001d8

0800152c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a59      	ldr	r2, [pc, #356]	; (80016b0 <HAL_ETH_MspInit+0x184>)
 800154a:	4293      	cmp	r3, r2
 800154c:	f040 80ab 	bne.w	80016a6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001550:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 8001552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001556:	4a57      	ldr	r2, [pc, #348]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 8001558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001560:	4b54      	ldr	r3, [pc, #336]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 8001562:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800156a:	623b      	str	r3, [r7, #32]
 800156c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800156e:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 8001570:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800157e:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 8001580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800158c:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 800158e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001592:	4a48      	ldr	r2, [pc, #288]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800159c:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 800159e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015aa:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	4a40      	ldr	r2, [pc, #256]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 80015ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ce:	4a39      	ldr	r2, [pc, #228]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ec:	4a31      	ldr	r2, [pc, #196]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f6:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160a:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 800160c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_ETH_MspInit+0x188>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001622:	2332      	movs	r3, #50	; 0x32
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001632:	230b      	movs	r3, #11
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	481e      	ldr	r0, [pc, #120]	; (80016b8 <HAL_ETH_MspInit+0x18c>)
 800163e:	f001 fbf1 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001642:	2386      	movs	r3, #134	; 0x86
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001652:	230b      	movs	r3, #11
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	4817      	ldr	r0, [pc, #92]	; (80016bc <HAL_ETH_MspInit+0x190>)
 800165e:	f001 fbe1 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001674:	230b      	movs	r3, #11
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4810      	ldr	r0, [pc, #64]	; (80016c0 <HAL_ETH_MspInit+0x194>)
 8001680:	f001 fbd0 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001684:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001696:	230b      	movs	r3, #11
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	4808      	ldr	r0, [pc, #32]	; (80016c4 <HAL_ETH_MspInit+0x198>)
 80016a2:	f001 fbbf 	bl	8002e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80016a6:	bf00      	nop
 80016a8:	3738      	adds	r7, #56	; 0x38
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40028000 	.word	0x40028000
 80016b4:	58024400 	.word	0x58024400
 80016b8:	58020800 	.word	0x58020800
 80016bc:	58020000 	.word	0x58020000
 80016c0:	58020400 	.word	0x58020400
 80016c4:	58021800 	.word	0x58021800

080016c8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	4b61      	ldr	r3, [pc, #388]	; (8001864 <MX_GPIO_Init+0x19c>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e4:	4a5f      	ldr	r2, [pc, #380]	; (8001864 <MX_GPIO_Init+0x19c>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <MX_GPIO_Init+0x19c>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <MX_GPIO_Init+0x19c>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	4a58      	ldr	r2, [pc, #352]	; (8001864 <MX_GPIO_Init+0x19c>)
 8001704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170c:	4b55      	ldr	r3, [pc, #340]	; (8001864 <MX_GPIO_Init+0x19c>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b52      	ldr	r3, [pc, #328]	; (8001864 <MX_GPIO_Init+0x19c>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	4a50      	ldr	r2, [pc, #320]	; (8001864 <MX_GPIO_Init+0x19c>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172a:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <MX_GPIO_Init+0x19c>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <MX_GPIO_Init+0x19c>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173e:	4a49      	ldr	r2, [pc, #292]	; (8001864 <MX_GPIO_Init+0x19c>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001748:	4b46      	ldr	r3, [pc, #280]	; (8001864 <MX_GPIO_Init+0x19c>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <MX_GPIO_Init+0x19c>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	4a41      	ldr	r2, [pc, #260]	; (8001864 <MX_GPIO_Init+0x19c>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <MX_GPIO_Init+0x19c>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001774:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <MX_GPIO_Init+0x19c>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177a:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <MX_GPIO_Init+0x19c>)
 800177c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001780:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001784:	4b37      	ldr	r3, [pc, #220]	; (8001864 <MX_GPIO_Init+0x19c>)
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <MX_GPIO_Init+0x19c>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	4a32      	ldr	r2, [pc, #200]	; (8001864 <MX_GPIO_Init+0x19c>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a2:	4b30      	ldr	r3, [pc, #192]	; (8001864 <MX_GPIO_Init+0x19c>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f244 0101 	movw	r1, #16385	; 0x4001
 80017b6:	482c      	ldr	r0, [pc, #176]	; (8001868 <MX_GPIO_Init+0x1a0>)
 80017b8:	f001 fce4 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c2:	482a      	ldr	r0, [pc, #168]	; (800186c <MX_GPIO_Init+0x1a4>)
 80017c4:	f001 fcde 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2102      	movs	r1, #2
 80017cc:	4828      	ldr	r0, [pc, #160]	; (8001870 <MX_GPIO_Init+0x1a8>)
 80017ce:	f001 fcd9 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4823      	ldr	r0, [pc, #140]	; (8001874 <MX_GPIO_Init+0x1ac>)
 80017e8:	f001 fb1c 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80017ec:	f244 0301 	movw	r3, #16385	; 0x4001
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4818      	ldr	r0, [pc, #96]	; (8001868 <MX_GPIO_Init+0x1a0>)
 8001806:	f001 fb0d 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800180a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	4812      	ldr	r0, [pc, #72]	; (800186c <MX_GPIO_Init+0x1a4>)
 8001824:	f001 fafe 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_GPIO_Init+0x1b0>)
 800182e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	4810      	ldr	r0, [pc, #64]	; (800187c <MX_GPIO_Init+0x1b4>)
 800183c:	f001 faf2 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001840:	2302      	movs	r3, #2
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <MX_GPIO_Init+0x1a8>)
 8001858:	f001 fae4 	bl	8002e24 <HAL_GPIO_Init>

}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	; 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	58024400 	.word	0x58024400
 8001868:	58020400 	.word	0x58020400
 800186c:	58020c00 	.word	0x58020c00
 8001870:	58021000 	.word	0x58021000
 8001874:	58020800 	.word	0x58020800
 8001878:	11110000 	.word	0x11110000
 800187c:	58021800 	.word	0x58021800

08001880 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <MX_I2C2_Init+0x74>)
 8001886:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <MX_I2C2_Init+0x78>)
 8001888:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_I2C2_Init+0x74>)
 800188c:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <MX_I2C2_Init+0x7c>)
 800188e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_I2C2_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_I2C2_Init+0x74>)
 8001898:	2201      	movs	r2, #1
 800189a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_I2C2_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_I2C2_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_I2C2_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_I2C2_Init+0x74>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_I2C2_Init+0x74>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018ba:	480e      	ldr	r0, [pc, #56]	; (80018f4 <MX_I2C2_Init+0x74>)
 80018bc:	f001 fc96 	bl	80031ec <HAL_I2C_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018c6:	f000 f9e7 	bl	8001c98 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <MX_I2C2_Init+0x74>)
 80018ce:	f002 fa99 	bl	8003e04 <HAL_I2CEx_ConfigAnalogFilter>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018d8:	f000 f9de 	bl	8001c98 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018dc:	2100      	movs	r1, #0
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_I2C2_Init+0x74>)
 80018e0:	f002 fadb 	bl	8003e9a <HAL_I2CEx_ConfigDigitalFilter>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018ea:	f000 f9d5 	bl	8001c98 <Error_Handler>
  }

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2400020c 	.word	0x2400020c
 80018f8:	40005800 	.word	0x40005800
 80018fc:	c0000e12 	.word	0xc0000e12

08001900 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <HAL_I2C_MspInit+0x88>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12e      	bne.n	8001980 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_I2C_MspInit+0x8c>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_I2C_MspInit+0x8c>)
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_I2C_MspInit+0x8c>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001940:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001946:	2312      	movs	r3, #18
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001952:	2304      	movs	r3, #4
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <HAL_I2C_MspInit+0x90>)
 800195e:	f001 fa61 	bl	8002e24 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_I2C_MspInit+0x8c>)
 8001964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001968:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_I2C_MspInit+0x8c>)
 800196a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800196e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_I2C_MspInit+0x8c>)
 8001974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40005800 	.word	0x40005800
 800198c:	58024400 	.word	0x58024400
 8001990:	58020400 	.word	0x58020400

08001994 <UART_print>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void UART_print(char* format, ...){
 8001994:	b40f      	push	{r0, r1, r2, r3}
 8001996:	b580      	push	{r7, lr}
 8001998:	b09c      	sub	sp, #112	; 0x70
 800199a:	af00      	add	r7, sp, #0

	char buffer[100];
	uint8_t size = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	buffer[0] = '\0';
 80019a2:	2300      	movs	r3, #0
 80019a4:	723b      	strb	r3, [r7, #8]

	va_list argList;

	va_start(argList, format);
 80019a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019aa:	607b      	str	r3, [r7, #4]
	size = vsprintf(buffer, format, argList);
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80019b4:	4618      	mov	r0, r3
 80019b6:	f006 fbc7 	bl	8008148 <vsiprintf>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	HAL_StatusTypeDef status =  HAL_UART_Transmit(&huart4, (uint8_t *)buffer, size, 10);
 80019c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	f107 0108 	add.w	r1, r7, #8
 80019ca:	230a      	movs	r3, #10
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <UART_print+0x54>)
 80019ce:	f004 ff27 	bl	8006820 <HAL_UART_Transmit>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	va_end(argList);

}
 80019d8:	bf00      	nop
 80019da:	3770      	adds	r7, #112	; 0x70
 80019dc:	46bd      	mov	sp, r7
 80019de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019e2:	b004      	add	sp, #16
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	240002e4 	.word	0x240002e4

080019ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0a4      	sub	sp, #144	; 0x90
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f2:	f000 fc49 	bl	8002288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f000 f88d 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f7ff fe65 	bl	80016c8 <MX_GPIO_Init>
  MX_ETH_Init();
 80019fe:	f7ff fd43 	bl	8001488 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001a02:	f000 fa9f 	bl	8001f44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a06:	f000 fb8b 	bl	8002120 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001a0a:	f000 fa4f 	bl	8001eac <MX_UART4_Init>
  MX_I2C2_Init();
 8001a0e:	f7ff ff37 	bl	8001880 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(5);
 8001a12:	2005      	movs	r0, #5
 8001a14:	f000 fcca 	bl	80023ac <HAL_Delay>
  //MLX_config();
  MLX * mlx = MLX_Init(&hi2c2); //Lê a EEPROM e configura / read eeprom, set configuration and trimming value
 8001a18:	4839      	ldr	r0, [pc, #228]	; (8001b00 <main+0x114>)
 8001a1a:	f7fe fefd 	bl	8000818 <MLX_Init>
 8001a1e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t k = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  int16_t IR[64] = {0};
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f006 fab3 	bl	8007f9a <memset>

	  HAL_Delay(50);
 8001a34:	2032      	movs	r0, #50	; 0x32
 8001a36:	f000 fcb9 	bl	80023ac <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4831      	ldr	r0, [pc, #196]	; (8001b04 <main+0x118>)
 8001a3e:	f001 fbba 	bl	80031b6 <HAL_GPIO_TogglePin>


	  if(MLX_Read_IT(mlx) == HAL_OK) {
 8001a42:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001a46:	f7ff f875 	bl	8000b34 <MLX_Read_IT>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d152      	bne.n	8001af6 <main+0x10a>
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001a50:	2101      	movs	r1, #1
 8001a52:	482d      	ldr	r0, [pc, #180]	; (8001b08 <main+0x11c>)
 8001a54:	f001 fbaf 	bl	80031b6 <HAL_GPIO_TogglePin>

		  for(uint8_t i = 0; i < 4; i++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001a5e:	e046      	b.n	8001aee <main+0x102>
			  for(uint8_t j = 0; j < 16; j++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8001a66:	e039      	b.n	8001adc <main+0xf0>
				  double t0 = MLX_CalcTemp(mlx, i, j);
 8001a68:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8001a6c:	f997 208d 	ldrsb.w	r2, [r7, #141]	; 0x8d
 8001a70:	4619      	mov	r1, r3
 8001a72:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001a76:	f7ff fc63 	bl	8001340 <MLX_CalcTemp>
 8001a7a:	ed87 0b20 	vstr	d0, [r7, #128]	; 0x80
				  IR[k] = t0;
 8001a7e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001a82:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001a86:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a8a:	ee17 2a90 	vmov	r2, s15
 8001a8e:	b212      	sxth	r2, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001a96:	440b      	add	r3, r1
 8001a98:	f823 2c90 	strh.w	r2, [r3, #-144]
				  UART_print("%d ", IR[k]);
 8001a9c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f933 3c90 	ldrsh.w	r3, [r3, #-144]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4817      	ldr	r0, [pc, #92]	; (8001b0c <main+0x120>)
 8001ab0:	f7ff ff70 	bl	8001994 <UART_print>
				  if((k+1)%16 == 0) UART_print("\n");
 8001ab4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <main+0xdc>
 8001ac2:	4813      	ldr	r0, [pc, #76]	; (8001b10 <main+0x124>)
 8001ac4:	f7ff ff66 	bl	8001994 <UART_print>
				  k++;
 8001ac8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001acc:	3301      	adds	r3, #1
 8001ace:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			  for(uint8_t j = 0; j < 16; j++) {
 8001ad2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8001adc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d9c1      	bls.n	8001a68 <main+0x7c>
		  for(uint8_t i = 0; i < 4; i++) {
 8001ae4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8001aee:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d9b4      	bls.n	8001a60 <main+0x74>
			  }
		  }
	  }
	  UART_print("\n");
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <main+0x124>)
 8001af8:	f7ff ff4c 	bl	8001994 <UART_print>
  {
 8001afc:	e791      	b.n	8001a22 <main+0x36>
 8001afe:	bf00      	nop
 8001b00:	2400020c 	.word	0x2400020c
 8001b04:	58021000 	.word	0x58021000
 8001b08:	58020400 	.word	0x58020400
 8001b0c:	08009470 	.word	0x08009470
 8001b10:	08009474 	.word	0x08009474

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b0cc      	sub	sp, #304	; 0x130
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b1e:	224c      	movs	r2, #76	; 0x4c
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f006 fa39 	bl	8007f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f006 fa32 	bl	8007f9a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	23bc      	movs	r3, #188	; 0xbc
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2100      	movs	r1, #0
 8001b42:	f006 fa2a 	bl	8007f9a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b46:	2002      	movs	r0, #2
 8001b48:	f002 fb3c 	bl	80041c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <SystemClock_Config+0x178>)
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	4a4d      	ldr	r2, [pc, #308]	; (8001c8c <SystemClock_Config+0x178>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <SystemClock_Config+0x178>)
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	f003 0201 	and.w	r2, r3, #1
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <SystemClock_Config+0x17c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b72:	4a47      	ldr	r2, [pc, #284]	; (8001c90 <SystemClock_Config+0x17c>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b78:	6193      	str	r3, [r2, #24]
 8001b7a:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <SystemClock_Config+0x17c>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b8a:	bf00      	nop
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <SystemClock_Config+0x17c>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b98:	d1f8      	bne.n	8001b8c <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ba0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001bba:	235a      	movs	r3, #90	; 0x5a
 8001bbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001bc6:	230f      	movs	r3, #15
 8001bc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fb35 	bl	8004258 <HAL_RCC_OscConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001bf4:	f000 f850 	bl	8001c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf8:	233f      	movs	r3, #63	; 0x3f
 8001bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c12:	2340      	movs	r3, #64	; 0x40
 8001c14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c18:	2340      	movs	r3, #64	; 0x40
 8001c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c26:	2340      	movs	r3, #64	; 0x40
 8001c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c30:	2101      	movs	r1, #1
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 ff20 	bl	8004a78 <HAL_RCC_ClockConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8001c3e:	f000 f82b 	bl	8001c98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <SystemClock_Config+0x180>)
 8001c48:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	2200      	movs	r2, #0
 8001c50:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	2200      	movs	r2, #0
 8001c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fa87 	bl	8005180 <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <SystemClock_Config+0x168>
  {
    Error_Handler();
 8001c78:	f000 f80e 	bl	8001c98 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8001c7c:	f002 fadc 	bl	8004238 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001c80:	bf00      	nop
 8001c82:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	58000400 	.word	0x58000400
 8001c90:	58024800 	.word	0x58024800
 8001c94:	0004000a 	.word	0x0004000a

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <Error_Handler+0x6>

08001ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_MspInit+0x30>)
 8001ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cac:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_MspInit+0x30>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_MspInit+0x30>)
 8001cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	58024400 	.word	0x58024400

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler+0x4>

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d20:	f000 fb24 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f006 f8da 	bl	8007f10 <__errno>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	230c      	movs	r3, #12
 8001d60:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	24080000 	.word	0x24080000
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	2400015c 	.word	0x2400015c
 8001d90:	24000780 	.word	0x24000780

08001d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <SystemInit+0xec>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	4a38      	ldr	r2, [pc, #224]	; (8001e80 <SystemInit+0xec>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <SystemInit+0xf0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	2b06      	cmp	r3, #6
 8001db2:	d807      	bhi.n	8001dc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <SystemInit+0xf0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 030f 	bic.w	r3, r3, #15
 8001dbc:	4a31      	ldr	r2, [pc, #196]	; (8001e84 <SystemInit+0xf0>)
 8001dbe:	f043 0307 	orr.w	r3, r3, #7
 8001dc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001dc4:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <SystemInit+0xf4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a2f      	ldr	r2, [pc, #188]	; (8001e88 <SystemInit+0xf4>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <SystemInit+0xf4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <SystemInit+0xf4>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	492b      	ldr	r1, [pc, #172]	; (8001e88 <SystemInit+0xf4>)
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <SystemInit+0xf8>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001de2:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <SystemInit+0xf0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	2b07      	cmp	r3, #7
 8001dec:	d907      	bls.n	8001dfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <SystemInit+0xf0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 030f 	bic.w	r3, r3, #15
 8001df6:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <SystemInit+0xf0>)
 8001df8:	f043 0307 	orr.w	r3, r3, #7
 8001dfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <SystemInit+0xf4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <SystemInit+0xf4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <SystemInit+0xf4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <SystemInit+0xf4>)
 8001e12:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <SystemInit+0xfc>)
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <SystemInit+0xf4>)
 8001e18:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <SystemInit+0x100>)
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <SystemInit+0xf4>)
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <SystemInit+0x104>)
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <SystemInit+0xf4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <SystemInit+0xf4>)
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <SystemInit+0x104>)
 8001e2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <SystemInit+0xf4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <SystemInit+0xf4>)
 8001e36:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <SystemInit+0x104>)
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <SystemInit+0xf4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <SystemInit+0xf4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <SystemInit+0xf4>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <SystemInit+0xf4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <SystemInit+0x108>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <SystemInit+0x10c>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e5e:	d202      	bcs.n	8001e66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <SystemInit+0x110>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <SystemInit+0x114>)
 8001e68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e6c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SystemInit+0xec>)
 8001e70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e74:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00
 8001e84:	52002000 	.word	0x52002000
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e90:	02020200 	.word	0x02020200
 8001e94:	01ff0000 	.word	0x01ff0000
 8001e98:	01010280 	.word	0x01010280
 8001e9c:	5c001000 	.word	0x5c001000
 8001ea0:	ffff0000 	.word	0xffff0000
 8001ea4:	51008108 	.word	0x51008108
 8001ea8:	52004000 	.word	0x52004000

08001eac <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <MX_UART4_Init+0x90>)
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <MX_UART4_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <MX_UART4_Init+0x90>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_UART4_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <MX_UART4_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_UART4_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_UART4_Init+0x90>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <MX_UART4_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_UART4_Init+0x90>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <MX_UART4_Init+0x90>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_UART4_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <MX_UART4_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ef4:	4811      	ldr	r0, [pc, #68]	; (8001f3c <MX_UART4_Init+0x90>)
 8001ef6:	f004 fc43 	bl	8006780 <HAL_UART_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f00:	f7ff feca 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	480d      	ldr	r0, [pc, #52]	; (8001f3c <MX_UART4_Init+0x90>)
 8001f08:	f005 fc73 	bl	80077f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f12:	f7ff fec1 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <MX_UART4_Init+0x90>)
 8001f1a:	f005 fca8 	bl	800786e <HAL_UARTEx_SetRxFifoThreshold>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f24:	f7ff feb8 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_UART4_Init+0x90>)
 8001f2a:	f005 fc29 	bl	8007780 <HAL_UARTEx_DisableFifoMode>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f7ff feb0 	bl	8001c98 <Error_Handler>
  }

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	240002e4 	.word	0x240002e4
 8001f40:	40004c00 	.word	0x40004c00

08001f44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <MX_USART3_UART_Init+0x94>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f8c:	4811      	ldr	r0, [pc, #68]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001f8e:	f004 fbf7 	bl	8006780 <HAL_UART_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f98:	f7ff fe7e 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001fa0:	f005 fc27 	bl	80077f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001faa:	f7ff fe75 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4808      	ldr	r0, [pc, #32]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001fb2:	f005 fc5c 	bl	800786e <HAL_UARTEx_SetRxFifoThreshold>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001fbc:	f7ff fe6c 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <MX_USART3_UART_Init+0x90>)
 8001fc2:	f005 fbdd 	bl	8007780 <HAL_UARTEx_DisableFifoMode>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001fcc:	f7ff fe64 	bl	8001c98 <Error_Handler>
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	24000258 	.word	0x24000258
 8001fd8:	40004800 	.word	0x40004800

08001fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a44      	ldr	r2, [pc, #272]	; (800210c <HAL_UART_MspInit+0x130>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d14e      	bne.n	800209c <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ffe:	4b44      	ldr	r3, [pc, #272]	; (8002110 <HAL_UART_MspInit+0x134>)
 8002000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002004:	4a42      	ldr	r2, [pc, #264]	; (8002110 <HAL_UART_MspInit+0x134>)
 8002006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800200a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800200e:	4b40      	ldr	r3, [pc, #256]	; (8002110 <HAL_UART_MspInit+0x134>)
 8002010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201c:	4b3c      	ldr	r3, [pc, #240]	; (8002110 <HAL_UART_MspInit+0x134>)
 800201e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002022:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <HAL_UART_MspInit+0x134>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_UART_MspInit+0x134>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800203a:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_UART_MspInit+0x134>)
 800203c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002040:	4a33      	ldr	r2, [pc, #204]	; (8002110 <HAL_UART_MspInit+0x134>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_UART_MspInit+0x134>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800206a:	2308      	movs	r3, #8
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4827      	ldr	r0, [pc, #156]	; (8002114 <HAL_UART_MspInit+0x138>)
 8002076:	f000 fed5 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800207a:	2302      	movs	r3, #2
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800208a:	2308      	movs	r3, #8
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	4820      	ldr	r0, [pc, #128]	; (8002118 <HAL_UART_MspInit+0x13c>)
 8002096:	f000 fec5 	bl	8002e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800209a:	e033      	b.n	8002104 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_UART_MspInit+0x140>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d12e      	bne.n	8002104 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_UART_MspInit+0x134>)
 80020a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ac:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_UART_MspInit+0x134>)
 80020ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_UART_MspInit+0x134>)
 80020b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_UART_MspInit+0x134>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ca:	4a11      	ldr	r2, [pc, #68]	; (8002110 <HAL_UART_MspInit+0x134>)
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_UART_MspInit+0x134>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80020e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020f4:	2307      	movs	r3, #7
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <HAL_UART_MspInit+0x13c>)
 8002100:	f000 fe90 	bl	8002e24 <HAL_GPIO_Init>
}
 8002104:	bf00      	nop
 8002106:	3730      	adds	r7, #48	; 0x30
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40004c00 	.word	0x40004c00
 8002110:	58024400 	.word	0x58024400
 8002114:	58020800 	.word	0x58020800
 8002118:	58020c00 	.word	0x58020c00
 800211c:	40004800 	.word	0x40004800

08002120 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002126:	4a16      	ldr	r2, [pc, #88]	; (8002180 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002128:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800212c:	2209      	movs	r2, #9
 800212e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002132:	2202      	movs	r2, #2
 8002134:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800213e:	2202      	movs	r2, #2
 8002140:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002144:	2201      	movs	r2, #1
 8002146:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800214a:	2200      	movs	r2, #0
 800214c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002150:	2200      	movs	r2, #0
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002156:	2201      	movs	r2, #1
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800215c:	2201      	movs	r2, #1
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002162:	2200      	movs	r2, #0
 8002164:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002168:	f001 fee3 	bl	8003f32 <HAL_PCD_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002172:	f7ff fd91 	bl	8001c98 <Error_Handler>
  }

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	24000370 	.word	0x24000370
 8002180:	40080000 	.word	0x40080000

08002184 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a21      	ldr	r2, [pc, #132]	; (8002228 <HAL_PCD_MspInit+0xa4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d13b      	bne.n	800221e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_PCD_MspInit+0xa8>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <HAL_PCD_MspInit+0xa8>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_PCD_MspInit+0xa8>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80021c4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80021d6:	230a      	movs	r3, #10
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4813      	ldr	r0, [pc, #76]	; (8002230 <HAL_PCD_MspInit+0xac>)
 80021e2:	f000 fe1f 	bl	8002e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <HAL_PCD_MspInit+0xac>)
 80021fc:	f000 fe12 	bl	8002e24 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_PCD_MspInit+0xa8>)
 8002202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_PCD_MspInit+0xa8>)
 8002208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800220c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_PCD_MspInit+0xa8>)
 8002212:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40080000 	.word	0x40080000
 800222c:	58024400 	.word	0x58024400
 8002230:	58020000 	.word	0x58020000

08002234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800226c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002238:	f7ff fdac 	bl	8001d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800223c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800223e:	e003      	b.n	8002248 <LoopCopyDataInit>

08002240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002246:	3104      	adds	r1, #4

08002248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002248:	480a      	ldr	r0, [pc, #40]	; (8002274 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800224c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800224e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002250:	d3f6      	bcc.n	8002240 <CopyDataInit>
  ldr  r2, =_sbss
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002254:	e002      	b.n	800225c <LoopFillZerobss>

08002256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002258:	f842 3b04 	str.w	r3, [r2], #4

0800225c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800225e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002260:	d3f9      	bcc.n	8002256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002262:	f005 fe5b 	bl	8007f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7ff fbc1 	bl	80019ec <main>
  bx  lr    
 800226a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800226c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002270:	08009540 	.word	0x08009540
  ldr  r0, =_sdata
 8002274:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002278:	2400007c 	.word	0x2400007c
  ldr  r2, =_sbss
 800227c:	2400013c 	.word	0x2400013c
  ldr  r3, = _ebss
 8002280:	24000780 	.word	0x24000780

08002284 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC3_IRQHandler>
	...

08002288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228e:	2003      	movs	r0, #3
 8002290:	f000 f980 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002294:	f002 fda6 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8002298:	4601      	mov	r1, r0
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_Init+0x68>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <HAL_Init+0x6c>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	fa21 f303 	lsr.w	r3, r1, r3
 80022b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_Init+0x68>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_Init+0x6c>)
 80022bc:	5cd3      	ldrb	r3, [r2, r3]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <HAL_Init+0x70>)
 80022ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022cc:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <HAL_Init+0x74>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f814 	bl	8002300 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e002      	b.n	80022e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022e2:	f7ff fcdd 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	58024400 	.word	0x58024400
 80022f4:	08009488 	.word	0x08009488
 80022f8:	24000008 	.word	0x24000008
 80022fc:	24000004 	.word	0x24000004

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_InitTick+0x60>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e021      	b.n	8002358 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_InitTick+0x64>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_InitTick+0x60>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f957 	bl	80025de <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00e      	b.n	8002358 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d80a      	bhi.n	8002356 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002340:	2200      	movs	r2, #0
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f000 f92f 	bl	80025aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <HAL_InitTick+0x68>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	24000010 	.word	0x24000010
 8002364:	24000004 	.word	0x24000004
 8002368:	2400000c 	.word	0x2400000c

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	24000010 	.word	0x24000010
 8002390:	24000778 	.word	0x24000778

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	24000778 	.word	0x24000778

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_Delay+0x40>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	24000010 	.word	0x24000010

080023f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_GetREVID+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0c1b      	lsrs	r3, r3, #16
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	5c001000 	.word	0x5c001000

08002408 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002418:	4904      	ldr	r1, [pc, #16]	; (800242c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	58000400 	.word	0x58000400

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <__NVIC_SetPriorityGrouping+0x40>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 800245a:	4313      	orrs	r3, r2
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x40>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00
 8002474:	05fa0000 	.word	0x05fa0000

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f7ff ff8e 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff47 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025b8:	f7ff ff5e 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff ff90 	bl	80024e8 <NVIC_EncodePriority>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5f 	bl	8002494 <__NVIC_SetPriority>
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffb2 	bl	8002550 <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0c6      	b.n	8002798 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe ff8a 	bl	800152c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2223      	movs	r2, #35	; 0x23
 800261c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261e:	4b60      	ldr	r3, [pc, #384]	; (80027a0 <HAL_ETH_Init+0x1a8>)
 8002620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002624:	4a5e      	ldr	r2, [pc, #376]	; (80027a0 <HAL_ETH_Init+0x1a8>)
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800262e:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <HAL_ETH_Init+0x1a8>)
 8002630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7a1b      	ldrb	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d103      	bne.n	800264c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002644:	2000      	movs	r0, #0
 8002646:	f7ff fedf 	bl	8002408 <HAL_SYSCFG_ETHInterfaceSelect>
 800264a:	e003      	b.n	8002654 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800264c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002650:	f7ff feda 	bl	8002408 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800266c:	f7ff fe92 	bl	8002394 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002672:	e00f      	b.n	8002694 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002674:	f7ff fe8e 	bl	8002394 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002682:	d907      	bls.n	8002694 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2204      	movs	r2, #4
 8002688:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	22e0      	movs	r2, #224	; 0xe0
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e081      	b.n	8002798 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1e6      	bne.n	8002674 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fac0 	bl	8002c2c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80026ac:	f002 fd0c 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <HAL_ETH_Init+0x1ac>)
 80026b4:	fba3 2302 	umull	r2, r3, r3, r2
 80026b8:	0c9a      	lsrs	r2, r3, #18
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3a01      	subs	r2, #1
 80026c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fa13 	bl	8002af0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80026e0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80026e4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	22e0      	movs	r2, #224	; 0xe0
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e04a      	b.n	8002798 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f241 1308 	movw	r3, #4360	; 0x1108
 800270a:	4413      	add	r3, r2
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <HAL_ETH_Init+0x1b0>)
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6952      	ldr	r2, [r2, #20]
 8002716:	0052      	lsls	r2, r2, #1
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	431a      	orrs	r2, r3
 800271e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002722:	440b      	add	r3, r1
 8002724:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fad8 	bl	8002cdc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fb1c 	bl	8002d6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	3305      	adds	r3, #5
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	021a      	lsls	r2, r3, #8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	3303      	adds	r3, #3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	061a      	lsls	r2, r3, #24
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	3302      	adds	r3, #2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	3301      	adds	r3, #1
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002770:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800277e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002780:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2210      	movs	r2, #16
 800278e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2210      	movs	r2, #16
 8002794:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	58024400 	.word	0x58024400
 80027a4:	431bde83 	.word	0x431bde83
 80027a8:	ffff8001 	.word	0xffff8001

080027ac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80027be:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	791b      	ldrb	r3, [r3, #4]
 80027c4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80027c6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	7b1b      	ldrb	r3, [r3, #12]
 80027cc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80027ce:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	7b5b      	ldrb	r3, [r3, #13]
 80027d4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80027d6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	7b9b      	ldrb	r3, [r3, #14]
 80027dc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80027de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	7bdb      	ldrb	r3, [r3, #15]
 80027e4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80027e6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	7c12      	ldrb	r2, [r2, #16]
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d102      	bne.n	80027f6 <ETH_SetMACConfig+0x4a>
 80027f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027f4:	e000      	b.n	80027f8 <ETH_SetMACConfig+0x4c>
 80027f6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80027f8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	7c52      	ldrb	r2, [r2, #17]
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d102      	bne.n	8002808 <ETH_SetMACConfig+0x5c>
 8002802:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002806:	e000      	b.n	800280a <ETH_SetMACConfig+0x5e>
 8002808:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800280a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	7c9b      	ldrb	r3, [r3, #18]
 8002810:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002812:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002818:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800281e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	7f1b      	ldrb	r3, [r3, #28]
 8002824:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002826:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	7f5b      	ldrb	r3, [r3, #29]
 800282c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800282e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	7f92      	ldrb	r2, [r2, #30]
 8002834:	2a00      	cmp	r2, #0
 8002836:	d102      	bne.n	800283e <ETH_SetMACConfig+0x92>
 8002838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800283c:	e000      	b.n	8002840 <ETH_SetMACConfig+0x94>
 800283e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002840:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	7fdb      	ldrb	r3, [r3, #31]
 8002846:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002848:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002850:	2a00      	cmp	r2, #0
 8002852:	d102      	bne.n	800285a <ETH_SetMACConfig+0xae>
 8002854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002858:	e000      	b.n	800285c <ETH_SetMACConfig+0xb0>
 800285a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800285c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002862:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800286a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800286c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <ETH_SetMACConfig+0x22c>)
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	430b      	orrs	r3, r1
 8002888:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002896:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002898:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80028a2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028aa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80028ac:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d102      	bne.n	80028be <ETH_SetMACConfig+0x112>
 80028b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028bc:	e000      	b.n	80028c0 <ETH_SetMACConfig+0x114>
 80028be:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80028c0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4b42      	ldr	r3, [pc, #264]	; (80029dc <ETH_SetMACConfig+0x230>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	430b      	orrs	r3, r1
 80028dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <ETH_SetMACConfig+0x234>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	68f9      	ldr	r1, [r7, #12]
 80028fe:	430b      	orrs	r3, r1
 8002900:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002908:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800290e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002916:	2a00      	cmp	r2, #0
 8002918:	d101      	bne.n	800291e <ETH_SetMACConfig+0x172>
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	e000      	b.n	8002920 <ETH_SetMACConfig+0x174>
 800291e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002920:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002932:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002936:	4013      	ands	r3, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	68f9      	ldr	r1, [r7, #12]
 800293e:	430b      	orrs	r3, r1
 8002940:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002948:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002950:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	f023 0103 	bic.w	r1, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	430a      	orrs	r2, r1
 800296a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002976:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002992:	2a00      	cmp	r2, #0
 8002994:	d101      	bne.n	800299a <ETH_SetMACConfig+0x1ee>
 8002996:	2240      	movs	r2, #64	; 0x40
 8002998:	e000      	b.n	800299c <ETH_SetMACConfig+0x1f0>
 800299a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800299c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80029a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029a6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80029ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80029bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	00048083 	.word	0x00048083
 80029dc:	c0f88000 	.word	0xc0f88000
 80029e0:	fffffef0 	.word	0xfffffef0

080029e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b38      	ldr	r3, [pc, #224]	; (8002adc <ETH_SetDMAConfig+0xf8>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	6809      	ldr	r1, [r1, #0]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002a0a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	791b      	ldrb	r3, [r3, #4]
 8002a10:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a16:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	7b1b      	ldrb	r3, [r3, #12]
 8002a1c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a2a:	4413      	add	r3, r2
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <ETH_SetDMAConfig+0xfc>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a3e:	440b      	add	r3, r1
 8002a40:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	7b5b      	ldrb	r3, [r3, #13]
 8002a46:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <ETH_SetDMAConfig+0x100>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6811      	ldr	r1, [r2, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002a6a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7d1b      	ldrb	r3, [r3, #20]
 8002a74:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a76:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	7f5b      	ldrb	r3, [r3, #29]
 8002a7c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f241 1304 	movw	r3, #4356	; 0x1104
 8002a8a:	4413      	add	r3, r2
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <ETH_SetDMAConfig+0x104>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6811      	ldr	r1, [r2, #0]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002a9e:	440b      	add	r3, r1
 8002aa0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	7f1b      	ldrb	r3, [r3, #28]
 8002aa6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	f241 1308 	movw	r3, #4360	; 0x1108
 8002ab8:	4413      	add	r3, r2
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <ETH_SetDMAConfig+0x108>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6811      	ldr	r1, [r2, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002acc:	440b      	add	r3, r1
 8002ace:	601a      	str	r2, [r3, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	ffff87fd 	.word	0xffff87fd
 8002ae0:	ffff2ffe 	.word	0xffff2ffe
 8002ae4:	fffec000 	.word	0xfffec000
 8002ae8:	ffc0efef 	.word	0xffc0efef
 8002aec:	7fc0ffff 	.word	0x7fc0ffff

08002af0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0a4      	sub	sp, #144	; 0x90
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002afe:	2300      	movs	r3, #0
 8002b00:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b30:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b48:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002b4c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002b54:	2300      	movs	r3, #0
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002b72:	2300      	movs	r3, #0
 8002b74:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b9a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002bac:	2302      	movs	r3, #2
 8002bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fde6 	bl	80027ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002be0:	2301      	movs	r3, #1
 8002be2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002be4:	2301      	movs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bfe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002c10:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c16:	f107 0308 	add.w	r3, r7, #8
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fee1 	bl	80029e4 <ETH_SetDMAConfig>
}
 8002c22:	bf00      	nop
 8002c24:	3790      	adds	r7, #144	; 0x90
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c46:	f002 fa3f 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8002c4a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d908      	bls.n	8002c66 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d804      	bhi.n	8002c66 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e027      	b.n	8002cb6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d908      	bls.n	8002c80 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d804      	bhi.n	8002c80 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e01a      	b.n	8002cb6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d903      	bls.n	8002c90 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d911      	bls.n	8002cb4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d908      	bls.n	8002caa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d804      	bhi.n	8002caa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e005      	b.n	8002cb6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e000      	b.n	8002cb6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002cb4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	01312cff 	.word	0x01312cff
 8002ccc:	02160ebf 	.word	0x02160ebf
 8002cd0:	039386ff 	.word	0x039386ff
 8002cd4:	05f5e0ff 	.word	0x05f5e0ff
 8002cd8:	08f0d17f 	.word	0x08f0d17f

08002cdc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e01d      	b.n	8002d26 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68d9      	ldr	r1, [r3, #12]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2200      	movs	r2, #0
 8002d06:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	3206      	adds	r2, #6
 8002d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3301      	adds	r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d9de      	bls.n	8002cea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	f241 132c 	movw	r3, #4396	; 0x112c
 8002d3a:	4413      	add	r3, r2
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	f241 1314 	movw	r3, #4372	; 0x1114
 8002d4c:	4413      	add	r3, r2
 8002d4e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e024      	b.n	8002dc2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6919      	ldr	r1, [r3, #16]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2200      	movs	r2, #0
 8002dac:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	330a      	adds	r3, #10
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d9d7      	bls.n	8002d78 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	f241 1330 	movw	r3, #4400	; 0x1130
 8002dee:	4413      	add	r3, r2
 8002df0:	2203      	movs	r2, #3
 8002df2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6919      	ldr	r1, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	f241 131c 	movw	r3, #4380	; 0x111c
 8002e00:	4413      	add	r3, r2
 8002e02:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f241 1328 	movw	r3, #4392	; 0x1128
 8002e14:	4413      	add	r3, r2
 8002e16:	6019      	str	r1, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e32:	4b89      	ldr	r3, [pc, #548]	; (8003058 <HAL_GPIO_Init+0x234>)
 8002e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e36:	e194      	b.n	8003162 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8186 	beq.w	800315c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d00b      	beq.n	8002e70 <HAL_GPIO_Init+0x4c>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d007      	beq.n	8002e70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e64:	2b11      	cmp	r3, #17
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b12      	cmp	r3, #18
 8002e6e:	d130      	bne.n	8002ed2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0201 	and.w	r2, r3, #1
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2203      	movs	r2, #3
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0xee>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b12      	cmp	r3, #18
 8002f10:	d123      	bne.n	8002f5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	08da      	lsrs	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3208      	adds	r2, #8
 8002f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	69b9      	ldr	r1, [r7, #24]
 8002f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	2203      	movs	r2, #3
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0203 	and.w	r2, r3, #3
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80e0 	beq.w	800315c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9c:	4b2f      	ldr	r3, [pc, #188]	; (800305c <HAL_GPIO_Init+0x238>)
 8002f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fa2:	4a2e      	ldr	r2, [pc, #184]	; (800305c <HAL_GPIO_Init+0x238>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_GPIO_Init+0x238>)
 8002fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fba:	4a29      	ldr	r2, [pc, #164]	; (8003060 <HAL_GPIO_Init+0x23c>)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a20      	ldr	r2, [pc, #128]	; (8003064 <HAL_GPIO_Init+0x240>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d052      	beq.n	800308c <HAL_GPIO_Init+0x268>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <HAL_GPIO_Init+0x244>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d031      	beq.n	8003052 <HAL_GPIO_Init+0x22e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1e      	ldr	r2, [pc, #120]	; (800306c <HAL_GPIO_Init+0x248>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d02b      	beq.n	800304e <HAL_GPIO_Init+0x22a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <HAL_GPIO_Init+0x24c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d025      	beq.n	800304a <HAL_GPIO_Init+0x226>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_GPIO_Init+0x250>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01f      	beq.n	8003046 <HAL_GPIO_Init+0x222>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_GPIO_Init+0x254>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d019      	beq.n	8003042 <HAL_GPIO_Init+0x21e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1a      	ldr	r2, [pc, #104]	; (800307c <HAL_GPIO_Init+0x258>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_GPIO_Init+0x21a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_GPIO_Init+0x25c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00d      	beq.n	800303a <HAL_GPIO_Init+0x216>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a18      	ldr	r2, [pc, #96]	; (8003084 <HAL_GPIO_Init+0x260>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d007      	beq.n	8003036 <HAL_GPIO_Init+0x212>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a17      	ldr	r2, [pc, #92]	; (8003088 <HAL_GPIO_Init+0x264>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_GPIO_Init+0x20e>
 800302e:	2309      	movs	r3, #9
 8003030:	e02d      	b.n	800308e <HAL_GPIO_Init+0x26a>
 8003032:	230a      	movs	r3, #10
 8003034:	e02b      	b.n	800308e <HAL_GPIO_Init+0x26a>
 8003036:	2308      	movs	r3, #8
 8003038:	e029      	b.n	800308e <HAL_GPIO_Init+0x26a>
 800303a:	2307      	movs	r3, #7
 800303c:	e027      	b.n	800308e <HAL_GPIO_Init+0x26a>
 800303e:	2306      	movs	r3, #6
 8003040:	e025      	b.n	800308e <HAL_GPIO_Init+0x26a>
 8003042:	2305      	movs	r3, #5
 8003044:	e023      	b.n	800308e <HAL_GPIO_Init+0x26a>
 8003046:	2304      	movs	r3, #4
 8003048:	e021      	b.n	800308e <HAL_GPIO_Init+0x26a>
 800304a:	2303      	movs	r3, #3
 800304c:	e01f      	b.n	800308e <HAL_GPIO_Init+0x26a>
 800304e:	2302      	movs	r3, #2
 8003050:	e01d      	b.n	800308e <HAL_GPIO_Init+0x26a>
 8003052:	2301      	movs	r3, #1
 8003054:	e01b      	b.n	800308e <HAL_GPIO_Init+0x26a>
 8003056:	bf00      	nop
 8003058:	58000080 	.word	0x58000080
 800305c:	58024400 	.word	0x58024400
 8003060:	58000400 	.word	0x58000400
 8003064:	58020000 	.word	0x58020000
 8003068:	58020400 	.word	0x58020400
 800306c:	58020800 	.word	0x58020800
 8003070:	58020c00 	.word	0x58020c00
 8003074:	58021000 	.word	0x58021000
 8003078:	58021400 	.word	0x58021400
 800307c:	58021800 	.word	0x58021800
 8003080:	58021c00 	.word	0x58021c00
 8003084:	58022000 	.word	0x58022000
 8003088:	58022400 	.word	0x58022400
 800308c:	2300      	movs	r3, #0
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	f002 0203 	and.w	r2, r2, #3
 8003094:	0092      	lsls	r2, r2, #2
 8003096:	4093      	lsls	r3, r2
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800309e:	4938      	ldr	r1, [pc, #224]	; (8003180 <HAL_GPIO_Init+0x35c>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800312e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	3301      	adds	r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f ae63 	bne.w	8002e38 <HAL_GPIO_Init+0x14>
  }
}
 8003172:	bf00      	nop
 8003174:	3724      	adds	r7, #36	; 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	58000400 	.word	0x58000400

08003184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80031a0:	e003      	b.n	80031aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031a2:	887b      	ldrh	r3, [r7, #2]
 80031a4:	041a      	lsls	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	619a      	str	r2, [r3, #24]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	401a      	ands	r2, r3
 80031ca:	887b      	ldrh	r3, [r7, #2]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d104      	bne.n	80031da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	041a      	lsls	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e07f      	b.n	80032fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe fb74 	bl	8001900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2224      	movs	r2, #36	; 0x24
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800323c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800324c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d107      	bne.n	8003266 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	e006      	b.n	8003274 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003272:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d104      	bne.n	8003286 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003284:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_I2C_Init+0x11c>)
 8003292:	430b      	orrs	r3, r1
 8003294:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	ea42 0103 	orr.w	r1, r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	021a      	lsls	r2, r3, #8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69d9      	ldr	r1, [r3, #28]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1a      	ldr	r2, [r3, #32]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	02008000 	.word	0x02008000

0800330c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	460b      	mov	r3, r1
 800331a:	817b      	strh	r3, [r7, #10]
 800331c:	4613      	mov	r3, r2
 800331e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b20      	cmp	r3, #32
 800332a:	f040 80da 	bne.w	80034e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_I2C_Master_Transmit+0x30>
 8003338:	2302      	movs	r3, #2
 800333a:	e0d3      	b.n	80034e4 <HAL_I2C_Master_Transmit+0x1d8>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003344:	f7ff f826 	bl	8002394 <HAL_GetTick>
 8003348:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	2319      	movs	r3, #25
 8003350:	2201      	movs	r2, #1
 8003352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fc04 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0be      	b.n	80034e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2221      	movs	r2, #33	; 0x21
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2210      	movs	r2, #16
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	893a      	ldrh	r2, [r7, #8]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	2bff      	cmp	r3, #255	; 0xff
 8003396:	d90e      	bls.n	80033b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	22ff      	movs	r2, #255	; 0xff
 800339c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	8979      	ldrh	r1, [r7, #10]
 80033a6:	4b51      	ldr	r3, [pc, #324]	; (80034ec <HAL_I2C_Master_Transmit+0x1e0>)
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fcfa 	bl	8003da8 <I2C_TransferConfig>
 80033b4:	e06c      	b.n	8003490 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	8979      	ldrh	r1, [r7, #10]
 80033c8:	4b48      	ldr	r3, [pc, #288]	; (80034ec <HAL_I2C_Master_Transmit+0x1e0>)
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fce9 	bl	8003da8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80033d6:	e05b      	b.n	8003490 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	6a39      	ldr	r1, [r7, #32]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fc01 	bl	8003be4 <I2C_WaitOnTXISFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e07b      	b.n	80034e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d034      	beq.n	8003490 <HAL_I2C_Master_Transmit+0x184>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	d130      	bne.n	8003490 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	2200      	movs	r2, #0
 8003436:	2180      	movs	r1, #128	; 0x80
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fb93 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e04d      	b.n	80034e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	2bff      	cmp	r3, #255	; 0xff
 8003450:	d90e      	bls.n	8003470 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	22ff      	movs	r2, #255	; 0xff
 8003456:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	b2da      	uxtb	r2, r3
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	2300      	movs	r3, #0
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fc9d 	bl	8003da8 <I2C_TransferConfig>
 800346e:	e00f      	b.n	8003490 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	b2da      	uxtb	r2, r3
 8003480:	8979      	ldrh	r1, [r7, #10]
 8003482:	2300      	movs	r3, #0
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fc8c 	bl	8003da8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d19e      	bne.n	80033d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	6a39      	ldr	r1, [r7, #32]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fbe0 	bl	8003c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e01a      	b.n	80034e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2220      	movs	r2, #32
 80034b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80034c2:	400b      	ands	r3, r1
 80034c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	80002000 	.word	0x80002000
 80034f0:	fe00e800 	.word	0xfe00e800

080034f4 <I2C_RequestMemoryRead2>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead2(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	461a      	mov	r2, r3
 8003500:	460b      	mov	r3, r1
 8003502:	817b      	strh	r3, [r7, #10]
 8003504:	4613      	mov	r3, r2
 8003506:	813b      	strh	r3, [r7, #8]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003508:	893b      	ldrh	r3, [r7, #8]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	8979      	ldrh	r1, [r7, #10]
 800350e:	4b3f      	ldr	r3, [pc, #252]	; (800360c <I2C_RequestMemoryRead2+0x118>)
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2300      	movs	r3, #0
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fc47 	bl	8003da8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	69b9      	ldr	r1, [r7, #24]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fb60 	bl	8003be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_RequestMemoryRead2+0x3a>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e069      	b.n	8003602 <I2C_RequestMemoryRead2+0x10e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800352e:	893b      	ldrh	r3, [r7, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <I2C_RequestMemoryRead2+0x4c>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	629a      	str	r2, [r3, #40]	; 0x28
 800353e:	e052      	b.n	80035e6 <I2C_RequestMemoryRead2+0xf2>
  }
  /* If Memory address size is 16Bit */

  else if (MemAddSize == I2C_MEMADD_SIZE_16BIT)
 8003540:	893b      	ldrh	r3, [r7, #8]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d117      	bne.n	8003576 <I2C_RequestMemoryRead2+0x82>
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	b29b      	uxth	r3, r3
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	b29b      	uxth	r3, r3
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	629a      	str	r2, [r3, #40]	; 0x28
    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fb42 	bl	8003be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_RequestMemoryRead2+0x76>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e04b      	b.n	8003602 <I2C_RequestMemoryRead2+0x10e>
    }
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
 8003574:	e037      	b.n	80035e6 <I2C_RequestMemoryRead2+0xf2>
  }

  else if(MemAddSize == I2C_MEMADD_SIZE_32BIT)
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	2b04      	cmp	r3, #4
 800357a:	d134      	bne.n	80035e6 <I2C_RequestMemoryRead2+0xf2>
  {
	  /* Send MSB of Memory Address */
	hi2c->Instance->TXDR = ((uint8_t)((uint32_t)(((uint32_t)((MemAddress) & (uint32_t)(0xFF000000U))) >> 24U)));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	0e1b      	lsrs	r3, r3, #24
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28

    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	69b9      	ldr	r1, [r7, #24]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fb29 	bl	8003be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <I2C_RequestMemoryRead2+0xa8>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e032      	b.n	8003602 <I2C_RequestMemoryRead2+0x10e>
    }

    hi2c->Instance->TXDR = ((uint8_t)((uint32_t)(((uint32_t)((MemAddress) & (uint32_t)(0x00FF0000U))) >> 16U)));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28

    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fb19 	bl	8003be4 <I2C_WaitOnTXISFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <I2C_RequestMemoryRead2+0xc8>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e022      	b.n	8003602 <I2C_RequestMemoryRead2+0x10e>
    }

    hi2c->Instance->TXDR = ((uint8_t)((uint32_t)(((uint32_t)((MemAddress) & (uint32_t)(0x0000FF00U))) >> 8U)));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	69b9      	ldr	r1, [r7, #24]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fb09 	bl	8003be4 <I2C_WaitOnTXISFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <I2C_RequestMemoryRead2+0xe8>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e012      	b.n	8003602 <I2C_RequestMemoryRead2+0x10e>
    }

    hi2c->Instance->TXDR = ((uint8_t)((uint32_t)(((uint32_t)((MemAddress) & (uint32_t)(0x000000FFU))))));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28

  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2140      	movs	r1, #64	; 0x40
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fab7 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <I2C_RequestMemoryRead2+0x10c>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <I2C_RequestMemoryRead2+0x10e>
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	80002000 	.word	0x80002000

08003610 <HAL_I2C_Mem_Read2>:


HAL_StatusTypeDef HAL_I2C_Mem_Read2(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	461a      	mov	r2, r3
 800361c:	460b      	mov	r3, r1
 800361e:	817b      	strh	r3, [r7, #10]
 8003620:	4613      	mov	r3, r2
 8003622:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b20      	cmp	r3, #32
 800362e:	f040 80fd 	bne.w	800382c <HAL_I2C_Mem_Read2+0x21c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_I2C_Mem_Read2+0x2e>
 8003638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_I2C_Mem_Read2+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0f1      	b.n	800382e <HAL_I2C_Mem_Read2+0x21e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_I2C_Mem_Read2+0x48>
 8003654:	2302      	movs	r3, #2
 8003656:	e0ea      	b.n	800382e <HAL_I2C_Mem_Read2+0x21e>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003660:	f7fe fe98 	bl	8002394 <HAL_GetTick>
 8003664:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2319      	movs	r3, #25
 800366c:	2201      	movs	r2, #1
 800366e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa76 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Mem_Read2+0x72>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0d5      	b.n	800382e <HAL_I2C_Mem_Read2+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2222      	movs	r2, #34	; 0x22
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2240      	movs	r2, #64	; 0x40
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a3a      	ldr	r2, [r7, #32]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead2(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036aa:	893a      	ldrh	r2, [r7, #8]
 80036ac:	8979      	ldrh	r1, [r7, #10]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff ff1a 	bl	80034f4 <I2C_RequestMemoryRead2>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_I2C_Mem_Read2+0xc2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0ad      	b.n	800382e <HAL_I2C_Mem_Read2+0x21e>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2bff      	cmp	r3, #255	; 0xff
 80036da:	d90e      	bls.n	80036fa <HAL_I2C_Mem_Read2+0xea>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	8979      	ldrh	r1, [r7, #10]
 80036ea:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_I2C_Mem_Read2+0x228>)
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fb58 	bl	8003da8 <I2C_TransferConfig>
 80036f8:	e00f      	b.n	800371a <HAL_I2C_Mem_Read2+0x10a>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	b2da      	uxtb	r2, r3
 800370a:	8979      	ldrh	r1, [r7, #10]
 800370c:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <HAL_I2C_Mem_Read2+0x228>)
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fb47 	bl	8003da8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	2200      	movs	r2, #0
 8003722:	2104      	movs	r1, #4
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fa1d 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read2+0x124>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e07c      	b.n	800382e <HAL_I2C_Mem_Read2+0x21e>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d034      	beq.n	80037da <HAL_I2C_Mem_Read2+0x1ca>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	d130      	bne.n	80037da <HAL_I2C_Mem_Read2+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	2200      	movs	r2, #0
 8003780:	2180      	movs	r1, #128	; 0x80
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f9ee 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Mem_Read2+0x182>
        {
          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e04d      	b.n	800382e <HAL_I2C_Mem_Read2+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	2bff      	cmp	r3, #255	; 0xff
 800379a:	d90e      	bls.n	80037ba <HAL_I2C_Mem_Read2+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	8979      	ldrh	r1, [r7, #10]
 80037aa:	2300      	movs	r3, #0
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 faf8 	bl	8003da8 <I2C_TransferConfig>
 80037b8:	e00f      	b.n	80037da <HAL_I2C_Mem_Read2+0x1ca>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	8979      	ldrh	r1, [r7, #10]
 80037cc:	2300      	movs	r3, #0
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fae7 	bl	8003da8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d19a      	bne.n	800371a <HAL_I2C_Mem_Read2+0x10a>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fa3b 	bl	8003c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Read2+0x1e8>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e01a      	b.n	800382e <HAL_I2C_Mem_Read2+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2220      	movs	r2, #32
 80037fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_I2C_Mem_Read2+0x22c>)
 800380c:	400b      	ands	r3, r1
 800380e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_I2C_Mem_Read2+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	80002400 	.word	0x80002400
 800383c:	fe00e800 	.word	0xfe00e800

08003840 <HAL_I2C_Mem_Read>:




HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	4608      	mov	r0, r1
 800384a:	4611      	mov	r1, r2
 800384c:	461a      	mov	r2, r3
 800384e:	4603      	mov	r3, r0
 8003850:	817b      	strh	r3, [r7, #10]
 8003852:	460b      	mov	r3, r1
 8003854:	813b      	strh	r3, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	f040 80fd 	bne.w	8003a62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_I2C_Mem_Read+0x34>
 800386e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0f1      	b.n	8003a64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_I2C_Mem_Read+0x4e>
 800388a:	2302      	movs	r3, #2
 800388c:	e0ea      	b.n	8003a64 <HAL_I2C_Mem_Read+0x224>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003896:	f7fe fd7d 	bl	8002394 <HAL_GetTick>
 800389a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2319      	movs	r3, #25
 80038a2:	2201      	movs	r2, #1
 80038a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f95b 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0d5      	b.n	8003a64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2222      	movs	r2, #34	; 0x22
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038e0:	88f8      	ldrh	r0, [r7, #6]
 80038e2:	893a      	ldrh	r2, [r7, #8]
 80038e4:	8979      	ldrh	r1, [r7, #10]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	4603      	mov	r3, r0
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f8bf 	bl	8003a74 <I2C_RequestMemoryRead>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0ad      	b.n	8003a64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2bff      	cmp	r3, #255	; 0xff
 8003910:	d90e      	bls.n	8003930 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	22ff      	movs	r2, #255	; 0xff
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	b2da      	uxtb	r2, r3
 800391e:	8979      	ldrh	r1, [r7, #10]
 8003920:	4b52      	ldr	r3, [pc, #328]	; (8003a6c <HAL_I2C_Mem_Read+0x22c>)
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fa3d 	bl	8003da8 <I2C_TransferConfig>
 800392e:	e00f      	b.n	8003950 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	b2da      	uxtb	r2, r3
 8003940:	8979      	ldrh	r1, [r7, #10]
 8003942:	4b4a      	ldr	r3, [pc, #296]	; (8003a6c <HAL_I2C_Mem_Read+0x22c>)
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa2c 	bl	8003da8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	2200      	movs	r2, #0
 8003958:	2104      	movs	r1, #4
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f902 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07c      	b.n	8003a64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d034      	beq.n	8003a10 <HAL_I2C_Mem_Read+0x1d0>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d130      	bne.n	8003a10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	2200      	movs	r2, #0
 80039b6:	2180      	movs	r1, #128	; 0x80
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f8d3 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e04d      	b.n	8003a64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2bff      	cmp	r3, #255	; 0xff
 80039d0:	d90e      	bls.n	80039f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	22ff      	movs	r2, #255	; 0xff
 80039d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	8979      	ldrh	r1, [r7, #10]
 80039e0:	2300      	movs	r3, #0
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f9dd 	bl	8003da8 <I2C_TransferConfig>
 80039ee:	e00f      	b.n	8003a10 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	8979      	ldrh	r1, [r7, #10]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f9cc 	bl	8003da8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d19a      	bne.n	8003950 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f920 	bl	8003c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e01a      	b.n	8003a64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2220      	movs	r2, #32
 8003a34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_I2C_Mem_Read+0x230>)
 8003a42:	400b      	ands	r3, r1
 8003a44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	80002400 	.word	0x80002400
 8003a70:	fe00e800 	.word	0xfe00e800

08003a74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	4611      	mov	r1, r2
 8003a80:	461a      	mov	r2, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	817b      	strh	r3, [r7, #10]
 8003a86:	460b      	mov	r3, r1
 8003a88:	813b      	strh	r3, [r7, #8]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	8979      	ldrh	r1, [r7, #10]
 8003a94:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <I2C_RequestMemoryRead+0xa4>)
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f984 	bl	8003da8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	69b9      	ldr	r1, [r7, #24]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f89d 	bl	8003be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e02c      	b.n	8003b0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aba:	893b      	ldrh	r3, [r7, #8]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac4:	e015      	b.n	8003af2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ac6:	893b      	ldrh	r3, [r7, #8]
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f883 	bl	8003be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e012      	b.n	8003b0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae8:	893b      	ldrh	r3, [r7, #8]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2140      	movs	r1, #64	; 0x40
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f831 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	80002000 	.word	0x80002000

08003b1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d103      	bne.n	8003b3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2200      	movs	r2, #0
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d007      	beq.n	8003b58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	619a      	str	r2, [r3, #24]
  }
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b74:	e022      	b.n	8003bbc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d01e      	beq.n	8003bbc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7fe fc09 	bl	8002394 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d113      	bne.n	8003bbc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e00f      	b.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d0cd      	beq.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bf0:	e02c      	b.n	8003c4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f870 	bl	8003cdc <I2C_IsAcknowledgeFailed>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e02a      	b.n	8003c5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d01e      	beq.n	8003c4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7fe fbc1 	bl	8002394 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d113      	bne.n	8003c4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e007      	b.n	8003c5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d1cb      	bne.n	8003bf2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c70:	e028      	b.n	8003cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f830 	bl	8003cdc <I2C_IsAcknowledgeFailed>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e026      	b.n	8003cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fe fb85 	bl	8002394 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d113      	bne.n	8003cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e007      	b.n	8003cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d1cf      	bne.n	8003c72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d151      	bne.n	8003d9a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf6:	e022      	b.n	8003d3e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d01e      	beq.n	8003d3e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d00:	f7fe fb48 	bl	8002394 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <I2C_IsAcknowledgeFailed+0x3a>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d113      	bne.n	8003d3e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e02e      	b.n	8003d9c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d1d5      	bne.n	8003cf8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2210      	movs	r2, #16
 8003d52:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff fedd 	bl	8003b1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003d6e:	400b      	ands	r3, r1
 8003d70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 0204 	orr.w	r2, r3, #4
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	fe00e800 	.word	0xfe00e800

08003da8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	817b      	strh	r3, [r7, #10]
 8003db6:	4613      	mov	r3, r2
 8003db8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	0d5b      	lsrs	r3, r3, #21
 8003dc4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <I2C_TransferConfig+0x58>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	ea02 0103 	and.w	r1, r2, r3
 8003dd2:	897b      	ldrh	r3, [r7, #10]
 8003dd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dd8:	7a7b      	ldrb	r3, [r7, #9]
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	03ff63ff 	.word	0x03ff63ff

08003e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d138      	bne.n	8003e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e032      	b.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	; 0x24
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d139      	bne.n	8003f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e033      	b.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2224      	movs	r2, #36	; 0x24
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f34:	b08f      	sub	sp, #60	; 0x3c
 8003f36:	af0a      	add	r7, sp, #40	; 0x28
 8003f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e116      	b.n	8004172 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fe f910 	bl	8002184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2203      	movs	r2, #3
 8003f68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 fd7c 	bl	8007a80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	603b      	str	r3, [r7, #0]
 8003f8e:	687e      	ldr	r6, [r7, #4]
 8003f90:	466d      	mov	r5, sp
 8003f92:	f106 0410 	add.w	r4, r6, #16
 8003f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fa6:	1d33      	adds	r3, r6, #4
 8003fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003faa:	6838      	ldr	r0, [r7, #0]
 8003fac:	f003 fd06 	bl	80079bc <USB_CoreInit>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e0d7      	b.n	8004172 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f003 fd6a 	bl	8007aa2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
 8003fd2:	e04a      	b.n	800406a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	333d      	adds	r3, #61	; 0x3d
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	333c      	adds	r3, #60	; 0x3c
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	b298      	uxth	r0, r3
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3342      	adds	r3, #66	; 0x42
 8004010:	4602      	mov	r2, r0
 8004012:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	333f      	adds	r3, #63	; 0x3f
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3344      	adds	r3, #68	; 0x44
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	3348      	adds	r3, #72	; 0x48
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3350      	adds	r3, #80	; 0x50
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	3301      	adds	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d3af      	bcc.n	8003fd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]
 8004078:	e044      	b.n	8004104 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	3301      	adds	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d3b5      	bcc.n	800407a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	687e      	ldr	r6, [r7, #4]
 8004116:	466d      	mov	r5, sp
 8004118:	f106 0410 	add.w	r4, r6, #16
 800411c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800411e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004124:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004128:	e885 0003 	stmia.w	r5, {r0, r1}
 800412c:	1d33      	adds	r3, r6, #4
 800412e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004130:	6838      	ldr	r0, [r7, #0]
 8004132:	f003 fce1 	bl	8007af8 <USB_DevInit>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e014      	b.n	8004172 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b01      	cmp	r3, #1
 800415e:	d102      	bne.n	8004166 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f80b 	bl	800417c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f003 fe83 	bl	8007e76 <USB_DevDisconnect>

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800417c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	10000003 	.word	0x10000003

080041c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <HAL_PWREx_ConfigSupply+0x70>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d00a      	beq.n	80041ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041d8:	4b16      	ldr	r3, [pc, #88]	; (8004234 <HAL_PWREx_ConfigSupply+0x70>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e01f      	b.n	800422a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e01d      	b.n	800422a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041ee:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_PWREx_ConfigSupply+0x70>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f023 0207 	bic.w	r2, r3, #7
 80041f6:	490f      	ldr	r1, [pc, #60]	; (8004234 <HAL_PWREx_ConfigSupply+0x70>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80041fe:	f7fe f8c9 	bl	8002394 <HAL_GetTick>
 8004202:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004204:	e009      	b.n	800421a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004206:	f7fe f8c5 	bl	8002394 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004214:	d901      	bls.n	800421a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e007      	b.n	800422a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_PWREx_ConfigSupply+0x70>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004226:	d1ee      	bne.n	8004206 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	58024800 	.word	0x58024800

08004238 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004246:	60d3      	str	r3, [r2, #12]
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	58024800 	.word	0x58024800

08004258 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08c      	sub	sp, #48	; 0x30
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e3ff      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8087 	beq.w	8004386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004278:	4b99      	ldr	r3, [pc, #612]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004282:	4b97      	ldr	r3, [pc, #604]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	2b10      	cmp	r3, #16
 800428c:	d007      	beq.n	800429e <HAL_RCC_OscConfig+0x46>
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	2b18      	cmp	r3, #24
 8004292:	d110      	bne.n	80042b6 <HAL_RCC_OscConfig+0x5e>
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d10b      	bne.n	80042b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429e:	4b90      	ldr	r3, [pc, #576]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d06c      	beq.n	8004384 <HAL_RCC_OscConfig+0x12c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d168      	bne.n	8004384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e3d9      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d106      	bne.n	80042ce <HAL_RCC_OscConfig+0x76>
 80042c0:	4b87      	ldr	r3, [pc, #540]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a86      	ldr	r2, [pc, #536]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e02e      	b.n	800432c <HAL_RCC_OscConfig+0xd4>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x98>
 80042d6:	4b82      	ldr	r3, [pc, #520]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a81      	ldr	r2, [pc, #516]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b7f      	ldr	r3, [pc, #508]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a7e      	ldr	r2, [pc, #504]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xd4>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0xbc>
 80042fa:	4b79      	ldr	r3, [pc, #484]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a78      	ldr	r2, [pc, #480]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b76      	ldr	r3, [pc, #472]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a75      	ldr	r2, [pc, #468]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xd4>
 8004314:	4b72      	ldr	r3, [pc, #456]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a71      	ldr	r2, [pc, #452]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b6f      	ldr	r3, [pc, #444]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6e      	ldr	r2, [pc, #440]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fe f82e 	bl	8002394 <HAL_GetTick>
 8004338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe f82a 	bl	8002394 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e38d      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800434e:	4b64      	ldr	r3, [pc, #400]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xe4>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fe f81a 	bl	8002394 <HAL_GetTick>
 8004360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004364:	f7fe f816 	bl	8002394 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e379      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004376:	4b5a      	ldr	r3, [pc, #360]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x10c>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80ae 	beq.w	80044f0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004394:	4b52      	ldr	r3, [pc, #328]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800439c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800439e:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <HAL_RCC_OscConfig+0x162>
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	2b18      	cmp	r3, #24
 80043ae:	d13a      	bne.n	8004426 <HAL_RCC_OscConfig+0x1ce>
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d135      	bne.n	8004426 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ba:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_RCC_OscConfig+0x17a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e34b      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d2:	f7fe f80d 	bl	80023f0 <HAL_GetREVID>
 80043d6:	4602      	mov	r2, r0
 80043d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80043dc:	429a      	cmp	r2, r3
 80043de:	d817      	bhi.n	8004410 <HAL_RCC_OscConfig+0x1b8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d108      	bne.n	80043fa <HAL_RCC_OscConfig+0x1a2>
 80043e8:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043f0:	4a3b      	ldr	r2, [pc, #236]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80043f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f8:	e07a      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	031b      	lsls	r3, r3, #12
 8004408:	4935      	ldr	r1, [pc, #212]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800440e:	e06f      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004410:	4b33      	ldr	r3, [pc, #204]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	4930      	ldr	r1, [pc, #192]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004424:	e064      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d045      	beq.n	80044ba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800442e:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 0219 	bic.w	r2, r3, #25
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	4929      	ldr	r1, [pc, #164]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd ffa8 	bl	8002394 <HAL_GetTick>
 8004444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004448:	f7fd ffa4 	bl	8002394 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e307      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800445a:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	f7fd ffc3 	bl	80023f0 <HAL_GetREVID>
 800446a:	4602      	mov	r2, r0
 800446c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004470:	429a      	cmp	r2, r3
 8004472:	d817      	bhi.n	80044a4 <HAL_RCC_OscConfig+0x24c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d108      	bne.n	800448e <HAL_RCC_OscConfig+0x236>
 800447c:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004484:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448a:	6053      	str	r3, [r2, #4]
 800448c:	e030      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	031b      	lsls	r3, r3, #12
 800449c:	4910      	ldr	r1, [pc, #64]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
 80044a2:	e025      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	490b      	ldr	r1, [pc, #44]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
 80044b8:	e01a      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <HAL_RCC_OscConfig+0x288>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fd ff65 	bl	8002394 <HAL_GetTick>
 80044ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ce:	f7fd ff61 	bl	8002394 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d903      	bls.n	80044e4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e2c4      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
 80044e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044e4:	4ba4      	ldr	r3, [pc, #656]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ee      	bne.n	80044ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80a9 	beq.w	8004650 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fe:	4b9e      	ldr	r3, [pc, #632]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004506:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004508:	4b9b      	ldr	r3, [pc, #620]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d007      	beq.n	8004524 <HAL_RCC_OscConfig+0x2cc>
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b18      	cmp	r3, #24
 8004518:	d13a      	bne.n	8004590 <HAL_RCC_OscConfig+0x338>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d135      	bne.n	8004590 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004524:	4b94      	ldr	r3, [pc, #592]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_OscConfig+0x2e4>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d001      	beq.n	800453c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e296      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800453c:	f7fd ff58 	bl	80023f0 <HAL_GetREVID>
 8004540:	4602      	mov	r2, r0
 8004542:	f241 0303 	movw	r3, #4099	; 0x1003
 8004546:	429a      	cmp	r2, r3
 8004548:	d817      	bhi.n	800457a <HAL_RCC_OscConfig+0x322>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	2b20      	cmp	r3, #32
 8004550:	d108      	bne.n	8004564 <HAL_RCC_OscConfig+0x30c>
 8004552:	4b89      	ldr	r3, [pc, #548]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800455a:	4a87      	ldr	r2, [pc, #540]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800455c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004560:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004562:	e075      	b.n	8004650 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004564:	4b84      	ldr	r3, [pc, #528]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	069b      	lsls	r3, r3, #26
 8004572:	4981      	ldr	r1, [pc, #516]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004578:	e06a      	b.n	8004650 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800457a:	4b7f      	ldr	r3, [pc, #508]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	061b      	lsls	r3, r3, #24
 8004588:	497b      	ldr	r1, [pc, #492]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800458a:	4313      	orrs	r3, r2
 800458c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800458e:	e05f      	b.n	8004650 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d042      	beq.n	800461e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004598:	4b77      	ldr	r3, [pc, #476]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a76      	ldr	r2, [pc, #472]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd fef6 	bl	8002394 <HAL_GetTick>
 80045a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80045ac:	f7fd fef2 	bl	8002394 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e255      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045be:	4b6e      	ldr	r3, [pc, #440]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ca:	f7fd ff11 	bl	80023f0 <HAL_GetREVID>
 80045ce:	4602      	mov	r2, r0
 80045d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d817      	bhi.n	8004608 <HAL_RCC_OscConfig+0x3b0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d108      	bne.n	80045f2 <HAL_RCC_OscConfig+0x39a>
 80045e0:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80045e8:	4a63      	ldr	r2, [pc, #396]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 80045ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ee:	6053      	str	r3, [r2, #4]
 80045f0:	e02e      	b.n	8004650 <HAL_RCC_OscConfig+0x3f8>
 80045f2:	4b61      	ldr	r3, [pc, #388]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	069b      	lsls	r3, r3, #26
 8004600:	495d      	ldr	r1, [pc, #372]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004602:	4313      	orrs	r3, r2
 8004604:	604b      	str	r3, [r1, #4]
 8004606:	e023      	b.n	8004650 <HAL_RCC_OscConfig+0x3f8>
 8004608:	4b5b      	ldr	r3, [pc, #364]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	4958      	ldr	r1, [pc, #352]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004618:	4313      	orrs	r3, r2
 800461a:	60cb      	str	r3, [r1, #12]
 800461c:	e018      	b.n	8004650 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800461e:	4b56      	ldr	r3, [pc, #344]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a55      	ldr	r2, [pc, #340]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fd feb3 	bl	8002394 <HAL_GetTick>
 800462e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004632:	f7fd feaf 	bl	8002394 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e212      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004644:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f0      	bne.n	8004632 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d036      	beq.n	80046ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d019      	beq.n	8004698 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004664:	4b44      	ldr	r3, [pc, #272]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004668:	4a43      	ldr	r2, [pc, #268]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fd fe90 	bl	8002394 <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004678:	f7fd fe8c 	bl	8002394 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1ef      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800468c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x420>
 8004696:	e018      	b.n	80046ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004698:	4b37      	ldr	r3, [pc, #220]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800469a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469c:	4a36      	ldr	r2, [pc, #216]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fd fe76 	bl	8002394 <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ac:	f7fd fe72 	bl	8002394 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1d5      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046be:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 80046c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d036      	beq.n	8004744 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d019      	beq.n	8004712 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046de:	4b26      	ldr	r3, [pc, #152]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a25      	ldr	r2, [pc, #148]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 80046e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046ea:	f7fd fe53 	bl	8002394 <HAL_GetTick>
 80046ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80046f2:	f7fd fe4f 	bl	8002394 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1b2      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004704:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x49a>
 8004710:	e018      	b.n	8004744 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004712:	4b19      	ldr	r3, [pc, #100]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 8004718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800471c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800471e:	f7fd fe39 	bl	8002394 <HAL_GetTick>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004726:	f7fd fe35 	bl	8002394 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e198      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCC_OscConfig+0x520>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8085 	beq.w	800485c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_RCC_OscConfig+0x524>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_RCC_OscConfig+0x524>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800475e:	f7fd fe19 	bl	8002394 <HAL_GetTick>
 8004762:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004764:	e00c      	b.n	8004780 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fd fe15 	bl	8002394 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b64      	cmp	r3, #100	; 0x64
 8004772:	d905      	bls.n	8004780 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e178      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
 8004778:	58024400 	.word	0x58024400
 800477c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004780:	4b96      	ldr	r3, [pc, #600]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ec      	beq.n	8004766 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x54a>
 8004794:	4b92      	ldr	r3, [pc, #584]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	4a91      	ldr	r2, [pc, #580]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6713      	str	r3, [r2, #112]	; 0x70
 80047a0:	e02d      	b.n	80047fe <HAL_RCC_OscConfig+0x5a6>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x56c>
 80047aa:	4b8d      	ldr	r3, [pc, #564]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	4a8c      	ldr	r2, [pc, #560]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6713      	str	r3, [r2, #112]	; 0x70
 80047b6:	4b8a      	ldr	r3, [pc, #552]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a89      	ldr	r2, [pc, #548]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
 80047c2:	e01c      	b.n	80047fe <HAL_RCC_OscConfig+0x5a6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d10c      	bne.n	80047e6 <HAL_RCC_OscConfig+0x58e>
 80047cc:	4b84      	ldr	r3, [pc, #528]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	4a83      	ldr	r2, [pc, #524]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	6713      	str	r3, [r2, #112]	; 0x70
 80047d8:	4b81      	ldr	r3, [pc, #516]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a80      	ldr	r2, [pc, #512]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
 80047e4:	e00b      	b.n	80047fe <HAL_RCC_OscConfig+0x5a6>
 80047e6:	4b7e      	ldr	r3, [pc, #504]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	4a7d      	ldr	r2, [pc, #500]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	6713      	str	r3, [r2, #112]	; 0x70
 80047f2:	4b7b      	ldr	r3, [pc, #492]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	4a7a      	ldr	r2, [pc, #488]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80047f8:	f023 0304 	bic.w	r3, r3, #4
 80047fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d015      	beq.n	8004832 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004806:	f7fd fdc5 	bl	8002394 <HAL_GetTick>
 800480a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800480c:	e00a      	b.n	8004824 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fd fdc1 	bl	8002394 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	; 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e122      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004824:	4b6e      	ldr	r3, [pc, #440]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ee      	beq.n	800480e <HAL_RCC_OscConfig+0x5b6>
 8004830:	e014      	b.n	800485c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fd fdaf 	bl	8002394 <HAL_GetTick>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fd fdab 	bl	8002394 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e10c      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004850:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ee      	bne.n	800483a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8101 	beq.w	8004a68 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004866:	4b5e      	ldr	r3, [pc, #376]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800486e:	2b18      	cmp	r3, #24
 8004870:	f000 80bc 	beq.w	80049ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	2b02      	cmp	r3, #2
 800487a:	f040 8095 	bne.w	80049a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487e:	4b58      	ldr	r3, [pc, #352]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a57      	ldr	r2, [pc, #348]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fd fd83 	bl	8002394 <HAL_GetTick>
 800488e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004892:	f7fd fd7f 	bl	8002394 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e0e2      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048a4:	4b4e      	ldr	r3, [pc, #312]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b0:	4b4b      	ldr	r3, [pc, #300]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80048b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b4:	4b4b      	ldr	r3, [pc, #300]	; (80049e4 <HAL_RCC_OscConfig+0x78c>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048c0:	0112      	lsls	r2, r2, #4
 80048c2:	430a      	orrs	r2, r1
 80048c4:	4946      	ldr	r1, [pc, #280]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	628b      	str	r3, [r1, #40]	; 0x28
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	3b01      	subs	r3, #1
 80048d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d8:	3b01      	subs	r3, #1
 80048da:	025b      	lsls	r3, r3, #9
 80048dc:	b29b      	uxth	r3, r3
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	3b01      	subs	r3, #1
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	3b01      	subs	r3, #1
 80048f4:	061b      	lsls	r3, r3, #24
 80048f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048fa:	4939      	ldr	r1, [pc, #228]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004900:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a36      	ldr	r2, [pc, #216]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800490c:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800490e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004910:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <HAL_RCC_OscConfig+0x790>)
 8004912:	4013      	ands	r3, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004918:	00d2      	lsls	r2, r2, #3
 800491a:	4931      	ldr	r1, [pc, #196]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800491c:	4313      	orrs	r3, r2
 800491e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004920:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f023 020c 	bic.w	r2, r3, #12
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	492c      	ldr	r1, [pc, #176]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800492e:	4313      	orrs	r3, r2
 8004930:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004932:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	f023 0202 	bic.w	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	4928      	ldr	r1, [pc, #160]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004940:	4313      	orrs	r3, r2
 8004942:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004944:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800494a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800494e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800495c:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004962:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	4a1c      	ldr	r2, [pc, #112]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004974:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a19      	ldr	r2, [pc, #100]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800497a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd fd08 	bl	8002394 <HAL_GetTick>
 8004984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004988:	f7fd fd04 	bl	8002394 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e067      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800499a:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x730>
 80049a6:	e05f      	b.n	8004a68 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0c      	ldr	r2, [pc, #48]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80049ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd fcee 	bl	8002394 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd fcea 	bl	8002394 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e04d      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x764>
 80049da:	e045      	b.n	8004a68 <HAL_RCC_OscConfig+0x810>
 80049dc:	58024800 	.word	0x58024800
 80049e0:	58024400 	.word	0x58024400
 80049e4:	fffffc0c 	.word	0xfffffc0c
 80049e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <HAL_RCC_OscConfig+0x81c>)
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_RCC_OscConfig+0x81c>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d031      	beq.n	8004a64 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f003 0203 	and.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d12a      	bne.n	8004a64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d122      	bne.n	8004a64 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d11a      	bne.n	8004a64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	0a5b      	lsrs	r3, r3, #9
 8004a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d111      	bne.n	8004a64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	0c1b      	lsrs	r3, r3, #16
 8004a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d108      	bne.n	8004a64 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3730      	adds	r7, #48	; 0x30
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	58024400 	.word	0x58024400

08004a78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e19c      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b8a      	ldr	r3, [pc, #552]	; (8004cb8 <HAL_RCC_ClockConfig+0x240>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d910      	bls.n	8004abc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b87      	ldr	r3, [pc, #540]	; (8004cb8 <HAL_RCC_ClockConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 020f 	bic.w	r2, r3, #15
 8004aa2:	4985      	ldr	r1, [pc, #532]	; (8004cb8 <HAL_RCC_ClockConfig+0x240>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b83      	ldr	r3, [pc, #524]	; (8004cb8 <HAL_RCC_ClockConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e184      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d010      	beq.n	8004aea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	4b7b      	ldr	r3, [pc, #492]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d908      	bls.n	8004aea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ad8:	4b78      	ldr	r3, [pc, #480]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	4975      	ldr	r1, [pc, #468]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d010      	beq.n	8004b18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	4b70      	ldr	r3, [pc, #448]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d908      	bls.n	8004b18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b06:	4b6d      	ldr	r3, [pc, #436]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	496a      	ldr	r1, [pc, #424]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d010      	beq.n	8004b46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	4b64      	ldr	r3, [pc, #400]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d908      	bls.n	8004b46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b34:	4b61      	ldr	r3, [pc, #388]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	495e      	ldr	r1, [pc, #376]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d010      	beq.n	8004b74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69da      	ldr	r2, [r3, #28]
 8004b56:	4b59      	ldr	r3, [pc, #356]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d908      	bls.n	8004b74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b62:	4b56      	ldr	r3, [pc, #344]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	4953      	ldr	r1, [pc, #332]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d010      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	4b4d      	ldr	r3, [pc, #308]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d908      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b90:	4b4a      	ldr	r3, [pc, #296]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f023 020f 	bic.w	r2, r3, #15
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4947      	ldr	r1, [pc, #284]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d055      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004bae:	4b43      	ldr	r3, [pc, #268]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	4940      	ldr	r1, [pc, #256]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bc8:	4b3c      	ldr	r3, [pc, #240]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d121      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0f6      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d107      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004be0:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d115      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0ea      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bf8:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0de      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c08:	4b2c      	ldr	r3, [pc, #176]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0d6      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c18:	4b28      	ldr	r3, [pc, #160]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f023 0207 	bic.w	r2, r3, #7
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4925      	ldr	r1, [pc, #148]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2a:	f7fd fbb3 	bl	8002394 <HAL_GetTick>
 8004c2e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c32:	f7fd fbaf 	bl	8002394 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e0be      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c48:	4b1c      	ldr	r3, [pc, #112]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d1eb      	bne.n	8004c32 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d010      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d208      	bcs.n	8004c88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f023 020f 	bic.w	r2, r3, #15
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	490e      	ldr	r1, [pc, #56]	; (8004cbc <HAL_RCC_ClockConfig+0x244>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_ClockConfig+0x240>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d214      	bcs.n	8004cc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <HAL_RCC_ClockConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 020f 	bic.w	r2, r3, #15
 8004c9e:	4906      	ldr	r1, [pc, #24]	; (8004cb8 <HAL_RCC_ClockConfig+0x240>)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <HAL_RCC_ClockConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e086      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x34e>
 8004cb8:	52002000 	.word	0x52002000
 8004cbc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	4b3f      	ldr	r3, [pc, #252]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d208      	bcs.n	8004cee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cdc:	4b3c      	ldr	r3, [pc, #240]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	4939      	ldr	r1, [pc, #228]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d010      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	4b34      	ldr	r3, [pc, #208]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d208      	bcs.n	8004d1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d0a:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	492e      	ldr	r1, [pc, #184]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d010      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d208      	bcs.n	8004d4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d38:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	4922      	ldr	r1, [pc, #136]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d010      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69da      	ldr	r2, [r3, #28]
 8004d5a:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d208      	bcs.n	8004d78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	4917      	ldr	r1, [pc, #92]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d78:	f000 f834 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8004d7c:	4601      	mov	r1, r0
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <HAL_RCC_ClockConfig+0x35c>)
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	fa21 f303 	lsr.w	r3, r1, r3
 8004d94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <HAL_RCC_ClockConfig+0x358>)
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	4a0d      	ldr	r2, [pc, #52]	; (8004dd4 <HAL_RCC_ClockConfig+0x35c>)
 8004da0:	5cd3      	ldrb	r3, [r2, r3]
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dac:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <HAL_RCC_ClockConfig+0x360>)
 8004dae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <HAL_RCC_ClockConfig+0x364>)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004db6:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <HAL_RCC_ClockConfig+0x368>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fd faa0 	bl	8002300 <HAL_InitTick>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	08009488 	.word	0x08009488
 8004dd8:	24000008 	.word	0x24000008
 8004ddc:	24000004 	.word	0x24000004
 8004de0:	2400000c 	.word	0x2400000c

08004de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b089      	sub	sp, #36	; 0x24
 8004de8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dea:	4baf      	ldr	r3, [pc, #700]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df2:	2b18      	cmp	r3, #24
 8004df4:	f200 814e 	bhi.w	8005094 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e65 	.word	0x08004e65
 8004e04:	08005095 	.word	0x08005095
 8004e08:	08005095 	.word	0x08005095
 8004e0c:	08005095 	.word	0x08005095
 8004e10:	08005095 	.word	0x08005095
 8004e14:	08005095 	.word	0x08005095
 8004e18:	08005095 	.word	0x08005095
 8004e1c:	08005095 	.word	0x08005095
 8004e20:	08004e8b 	.word	0x08004e8b
 8004e24:	08005095 	.word	0x08005095
 8004e28:	08005095 	.word	0x08005095
 8004e2c:	08005095 	.word	0x08005095
 8004e30:	08005095 	.word	0x08005095
 8004e34:	08005095 	.word	0x08005095
 8004e38:	08005095 	.word	0x08005095
 8004e3c:	08005095 	.word	0x08005095
 8004e40:	08004e91 	.word	0x08004e91
 8004e44:	08005095 	.word	0x08005095
 8004e48:	08005095 	.word	0x08005095
 8004e4c:	08005095 	.word	0x08005095
 8004e50:	08005095 	.word	0x08005095
 8004e54:	08005095 	.word	0x08005095
 8004e58:	08005095 	.word	0x08005095
 8004e5c:	08005095 	.word	0x08005095
 8004e60:	08004e97 	.word	0x08004e97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e64:	4b90      	ldr	r3, [pc, #576]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e70:	4b8d      	ldr	r3, [pc, #564]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	4a8c      	ldr	r2, [pc, #560]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004e82:	e10a      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e84:	4b89      	ldr	r3, [pc, #548]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004e86:	61bb      	str	r3, [r7, #24]
    break;
 8004e88:	e107      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004e8a:	4b89      	ldr	r3, [pc, #548]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004e8c:	61bb      	str	r3, [r7, #24]
    break;
 8004e8e:	e104      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004e90:	4b88      	ldr	r3, [pc, #544]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004e92:	61bb      	str	r3, [r7, #24]
    break;
 8004e94:	e101      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e96:	4b84      	ldr	r3, [pc, #528]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004ea0:	4b81      	ldr	r3, [pc, #516]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eaa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004eac:	4b7e      	ldr	r3, [pc, #504]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004eb6:	4b7c      	ldr	r3, [pc, #496]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	08db      	lsrs	r3, r3, #3
 8004ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80da 	beq.w	800508e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d05a      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d302      	bcc.n	8004eea <HAL_RCC_GetSysClockFreq+0x106>
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d078      	beq.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f6>
 8004ee8:	e099      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eea:	4b6f      	ldr	r3, [pc, #444]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d02d      	beq.n	8004f52 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ef6:	4b6c      	ldr	r3, [pc, #432]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	08db      	lsrs	r3, r3, #3
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	4a6a      	ldr	r2, [pc, #424]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004f02:	fa22 f303 	lsr.w	r3, r2, r3
 8004f06:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f20:	4b61      	ldr	r3, [pc, #388]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f30:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f34:	eddf 5a60 	vldr	s11, [pc, #384]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004f50:	e087      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80050bc <HAL_RCC_GetSysClockFreq+0x2d8>
 8004f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f64:	4b50      	ldr	r3, [pc, #320]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6c:	ee07 3a90 	vmov	s15, r3
 8004f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f74:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f78:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f94:	e065      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80050c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004fa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa8:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fbc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004fc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fd8:	e043      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	ee07 3a90 	vmov	s15, r3
 8004fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80050c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fec:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005000:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005018:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800501c:	e021      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	ee07 3a90 	vmov	s15, r3
 8005024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005028:	eddf 6a25 	vldr	s13, [pc, #148]	; 80050c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800502c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005030:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005040:	ed97 6a02 	vldr	s12, [r7, #8]
 8005044:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005060:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005062:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	0a5b      	lsrs	r3, r3, #9
 8005068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506c:	3301      	adds	r3, #1
 800506e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800507a:	edd7 6a07 	vldr	s13, [r7, #28]
 800507e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005086:	ee17 3a90 	vmov	r3, s15
 800508a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800508c:	e005      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
    break;
 8005092:	e002      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005096:	61bb      	str	r3, [r7, #24]
    break;
 8005098:	bf00      	nop
  }

  return sysclockfreq;
 800509a:	69bb      	ldr	r3, [r7, #24]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3724      	adds	r7, #36	; 0x24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	58024400 	.word	0x58024400
 80050ac:	03d09000 	.word	0x03d09000
 80050b0:	003d0900 	.word	0x003d0900
 80050b4:	007a1200 	.word	0x007a1200
 80050b8:	46000000 	.word	0x46000000
 80050bc:	4c742400 	.word	0x4c742400
 80050c0:	4a742400 	.word	0x4a742400
 80050c4:	4af42400 	.word	0x4af42400

080050c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050ce:	f7ff fe89 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 80050d2:	4601      	mov	r1, r0
 80050d4:	4b10      	ldr	r3, [pc, #64]	; (8005118 <HAL_RCC_GetHCLKFreq+0x50>)
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	0a1b      	lsrs	r3, r3, #8
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	4a0f      	ldr	r2, [pc, #60]	; (800511c <HAL_RCC_GetHCLKFreq+0x54>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	fa21 f303 	lsr.w	r3, r1, r3
 80050ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <HAL_RCC_GetHCLKFreq+0x50>)
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	4a09      	ldr	r2, [pc, #36]	; (800511c <HAL_RCC_GetHCLKFreq+0x54>)
 80050f6:	5cd3      	ldrb	r3, [r2, r3]
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	4a07      	ldr	r2, [pc, #28]	; (8005120 <HAL_RCC_GetHCLKFreq+0x58>)
 8005104:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005106:	4a07      	ldr	r2, [pc, #28]	; (8005124 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <HAL_RCC_GetHCLKFreq+0x58>)
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	58024400 	.word	0x58024400
 800511c:	08009488 	.word	0x08009488
 8005120:	24000008 	.word	0x24000008
 8005124:	24000004 	.word	0x24000004

08005128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800512c:	f7ff ffcc 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8005130:	4601      	mov	r1, r0
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4a04      	ldr	r2, [pc, #16]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800513e:	5cd3      	ldrb	r3, [r2, r3]
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	58024400 	.word	0x58024400
 8005150:	08009488 	.word	0x08009488

08005154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005158:	f7ff ffb6 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 800515c:	4601      	mov	r1, r0
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <HAL_RCC_GetPCLK2Freq+0x28>)
 800516a:	5cd3      	ldrb	r3, [r2, r3]
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}
 8005178:	58024400 	.word	0x58024400
 800517c:	08009488 	.word	0x08009488

08005180 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005188:	2300      	movs	r3, #0
 800518a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800518c:	2300      	movs	r3, #0
 800518e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d03d      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a4:	d013      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051aa:	d802      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80051b0:	e01f      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80051b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051b6:	d013      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80051b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051bc:	d01c      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80051be:	e018      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c0:	4baf      	ldr	r3, [pc, #700]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	4aae      	ldr	r2, [pc, #696]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051cc:	e015      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2102      	movs	r1, #2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 f96f 	bl	80064b8 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051de:	e00c      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3324      	adds	r3, #36	; 0x24
 80051e4:	2102      	movs	r1, #2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 fa18 	bl	800661c <RCCEx_PLL3_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051f0:	e003      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
      break;
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80051f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005200:	4b9f      	ldr	r3, [pc, #636]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800520c:	499c      	ldr	r1, [pc, #624]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800520e:	4313      	orrs	r3, r2
 8005210:	650b      	str	r3, [r1, #80]	; 0x50
 8005212:	e001      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d03d      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	2b04      	cmp	r3, #4
 800522a:	d826      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005249 	.word	0x08005249
 8005238:	08005257 	.word	0x08005257
 800523c:	08005269 	.word	0x08005269
 8005240:	08005281 	.word	0x08005281
 8005244:	08005281 	.word	0x08005281
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005248:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	4a8c      	ldr	r2, [pc, #560]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800524e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005254:	e015      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f001 f92b 	bl	80064b8 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005266:	e00c      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f001 f9d4 	bl	800661c <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
      break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005288:	4b7d      	ldr	r3, [pc, #500]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800528a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528c:	f023 0207 	bic.w	r2, r3, #7
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	497a      	ldr	r1, [pc, #488]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005296:	4313      	orrs	r3, r2
 8005298:	650b      	str	r3, [r1, #80]	; 0x50
 800529a:	e001      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d03e      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	2b80      	cmp	r3, #128	; 0x80
 80052b2:	d01c      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80052b4:	2b80      	cmp	r3, #128	; 0x80
 80052b6:	d804      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d00d      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80052c0:	e01e      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80052c2:	2bc0      	cmp	r3, #192	; 0xc0
 80052c4:	d01f      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ca:	d01e      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052cc:	e018      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ce:	4b6c      	ldr	r3, [pc, #432]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	4a6b      	ldr	r2, [pc, #428]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052da:	e017      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f001 f8e8 	bl	80064b8 <RCCEx_PLL2_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052ec:	e00e      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3324      	adds	r3, #36	; 0x24
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 f991 	bl	800661c <RCCEx_PLL3_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052fe:	e005      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	75fb      	strb	r3, [r7, #23]
      break;
 8005304:	e002      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005306:	bf00      	nop
 8005308:	e000      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800530a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005312:	4b5b      	ldr	r3, [pc, #364]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531e:	4958      	ldr	r1, [pc, #352]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005320:	4313      	orrs	r3, r2
 8005322:	650b      	str	r3, [r1, #80]	; 0x50
 8005324:	e001      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
 8005328:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005332:	2b00      	cmp	r3, #0
 8005334:	d044      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800533c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005340:	d01f      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005346:	d805      	bhi.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800534c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005350:	d00e      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005352:	e01f      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005354:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005358:	d01f      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800535a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800535e:	d01e      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005360:	e018      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	4a46      	ldr	r2, [pc, #280]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800536e:	e017      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f001 f89e 	bl	80064b8 <RCCEx_PLL2_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005380:	e00e      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3324      	adds	r3, #36	; 0x24
 8005386:	2100      	movs	r1, #0
 8005388:	4618      	mov	r0, r3
 800538a:	f001 f947 	bl	800661c <RCCEx_PLL3_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005392:	e005      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
      break;
 8005398:	e002      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800539a:	bf00      	nop
 800539c:	e000      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800539e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80053a6:	4b36      	ldr	r3, [pc, #216]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053b4:	4932      	ldr	r1, [pc, #200]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	658b      	str	r3, [r1, #88]	; 0x58
 80053ba:	e001      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d044      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053d6:	d01f      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80053d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053dc:	d805      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80053e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053e6:	d00e      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80053e8:	e01f      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80053ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053ee:	d01f      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80053f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053f4:	d01e      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80053f6:	e018      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f8:	4b21      	ldr	r3, [pc, #132]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	4a20      	ldr	r2, [pc, #128]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005404:	e017      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3304      	adds	r3, #4
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f001 f853 	bl	80064b8 <RCCEx_PLL2_Config>
 8005412:	4603      	mov	r3, r0
 8005414:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005416:	e00e      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3324      	adds	r3, #36	; 0x24
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f001 f8fc 	bl	800661c <RCCEx_PLL3_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005428:	e005      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	75fb      	strb	r3, [r7, #23]
      break;
 800542e:	e002      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005440:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800544a:	490d      	ldr	r1, [pc, #52]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800544c:	4313      	orrs	r3, r2
 800544e:	658b      	str	r3, [r1, #88]	; 0x58
 8005450:	e001      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d035      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005466:	2b10      	cmp	r3, #16
 8005468:	d00c      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800546a:	2b10      	cmp	r3, #16
 800546c:	d802      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01b      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005472:	e017      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005474:	2b20      	cmp	r3, #32
 8005476:	d00c      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005478:	2b30      	cmp	r3, #48	; 0x30
 800547a:	d018      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800547c:	e012      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800547e:	bf00      	nop
 8005480:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005484:	4baf      	ldr	r3, [pc, #700]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	4aae      	ldr	r2, [pc, #696]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800548a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005490:	e00e      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
 8005496:	2102      	movs	r1, #2
 8005498:	4618      	mov	r0, r3
 800549a:	f001 f80d 	bl	80064b8 <RCCEx_PLL2_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80054a2:	e005      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	75fb      	strb	r3, [r7, #23]
      break;
 80054a8:	e002      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80054aa:	bf00      	nop
 80054ac:	e000      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80054ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054b6:	4ba3      	ldr	r3, [pc, #652]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c2:	49a0      	ldr	r1, [pc, #640]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054c8:	e001      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
 80054cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d042      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d01f      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e8:	d805      	bhi.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d00e      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80054f4:	e01f      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80054f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054fa:	d01f      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80054fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005500:	d01e      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005502:	e018      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005504:	4b8f      	ldr	r3, [pc, #572]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	4a8e      	ldr	r2, [pc, #568]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800550a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005510:	e017      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2100      	movs	r1, #0
 8005518:	4618      	mov	r0, r3
 800551a:	f000 ffcd 	bl	80064b8 <RCCEx_PLL2_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005522:	e00e      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3324      	adds	r3, #36	; 0x24
 8005528:	2100      	movs	r1, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f001 f876 	bl	800661c <RCCEx_PLL3_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005534:	e005      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
      break;
 800553a:	e002      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005548:	4b7e      	ldr	r3, [pc, #504]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800554a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005554:	497b      	ldr	r1, [pc, #492]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	650b      	str	r3, [r1, #80]	; 0x50
 800555a:	e001      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d042      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005574:	d01b      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800557a:	d805      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d022      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005586:	e01b      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005588:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800558c:	d01d      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800558e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005592:	d01c      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005594:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005598:	d01b      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800559a:	e011      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	2101      	movs	r1, #1
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 ff88 	bl	80064b8 <RCCEx_PLL2_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055ac:	e012      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3324      	adds	r3, #36	; 0x24
 80055b2:	2101      	movs	r1, #1
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 f831 	bl	800661c <RCCEx_PLL3_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055be:	e009      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	75fb      	strb	r3, [r7, #23]
      break;
 80055c4:	e006      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80055c6:	bf00      	nop
 80055c8:	e004      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80055ca:	bf00      	nop
 80055cc:	e002      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80055d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80055da:	4b5a      	ldr	r3, [pc, #360]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e6:	4957      	ldr	r1, [pc, #348]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	650b      	str	r3, [r1, #80]	; 0x50
 80055ec:	e001      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d044      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005608:	d01b      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800560a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560e:	d805      	bhi.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d022      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005618:	d00a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800561a:	e01b      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005620:	d01d      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005626:	d01c      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005628:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800562c:	d01b      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800562e:	e011      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	2101      	movs	r1, #1
 8005636:	4618      	mov	r0, r3
 8005638:	f000 ff3e 	bl	80064b8 <RCCEx_PLL2_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005640:	e012      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3324      	adds	r3, #36	; 0x24
 8005646:	2101      	movs	r1, #1
 8005648:	4618      	mov	r0, r3
 800564a:	f000 ffe7 	bl	800661c <RCCEx_PLL3_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005652:	e009      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	75fb      	strb	r3, [r7, #23]
      break;
 8005658:	e006      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800565a:	bf00      	nop
 800565c:	e004      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800565e:	bf00      	nop
 8005660:	e002      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005662:	bf00      	nop
 8005664:	e000      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800566e:	4b35      	ldr	r3, [pc, #212]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005672:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800567c:	4931      	ldr	r1, [pc, #196]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800567e:	4313      	orrs	r3, r2
 8005680:	658b      	str	r3, [r1, #88]	; 0x58
 8005682:	e001      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02d      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800569c:	d005      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800569e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a2:	d009      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80056a8:	e00f      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056aa:	4b26      	ldr	r3, [pc, #152]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	4a25      	ldr	r2, [pc, #148]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80056b6:	e00c      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3304      	adds	r3, #4
 80056bc:	2101      	movs	r1, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fefa 	bl	80064b8 <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80056c8:	e003      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	75fb      	strb	r3, [r7, #23]
      break;
 80056ce:	e000      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80056d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e4:	4917      	ldr	r1, [pc, #92]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	650b      	str	r3, [r1, #80]	; 0x50
 80056ea:	e001      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d035      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	2b03      	cmp	r3, #3
 8005702:	d81b      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005704:	a201      	add	r2, pc, #4	; (adr r2, 800570c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005749 	.word	0x08005749
 8005710:	0800571d 	.word	0x0800571d
 8005714:	0800572b 	.word	0x0800572b
 8005718:	08005749 	.word	0x08005749
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005728:	e00f      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3304      	adds	r3, #4
 800572e:	2102      	movs	r1, #2
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fec1 	bl	80064b8 <RCCEx_PLL2_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800573a:	e006      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
      break;
 8005740:	e003      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005742:	bf00      	nop
 8005744:	58024400 	.word	0x58024400
      break;
 8005748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005750:	4bba      	ldr	r3, [pc, #744]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005754:	f023 0203 	bic.w	r2, r3, #3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575c:	49b7      	ldr	r1, [pc, #732]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800575e:	4313      	orrs	r3, r2
 8005760:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005762:	e001      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8086 	beq.w	8005882 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005776:	4bb2      	ldr	r3, [pc, #712]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4ab1      	ldr	r2, [pc, #708]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800577c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005780:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005782:	f7fc fe07 	bl	8002394 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005788:	e009      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800578a:	f7fc fe03 	bl	8002394 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b64      	cmp	r3, #100	; 0x64
 8005796:	d902      	bls.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	75fb      	strb	r3, [r7, #23]
        break;
 800579c:	e005      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800579e:	4ba8      	ldr	r3, [pc, #672]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0ef      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d166      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057b0:	4ba2      	ldr	r3, [pc, #648]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057ba:	4053      	eors	r3, r2
 80057bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057c4:	4b9d      	ldr	r3, [pc, #628]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057cc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ce:	4b9b      	ldr	r3, [pc, #620]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	4a9a      	ldr	r2, [pc, #616]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057da:	4b98      	ldr	r3, [pc, #608]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	4a97      	ldr	r2, [pc, #604]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80057e6:	4a95      	ldr	r2, [pc, #596]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f6:	d115      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f8:	f7fc fdcc 	bl	8002394 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057fe:	e00b      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005800:	f7fc fdc8 	bl	8002394 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	; 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d902      	bls.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	75fb      	strb	r3, [r7, #23]
            break;
 8005816:	e005      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005818:	4b88      	ldr	r3, [pc, #544]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ed      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d126      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005838:	d10d      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800583a:	4b80      	ldr	r3, [pc, #512]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005848:	0919      	lsrs	r1, r3, #4
 800584a:	4b7e      	ldr	r3, [pc, #504]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800584c:	400b      	ands	r3, r1
 800584e:	497b      	ldr	r1, [pc, #492]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005850:	4313      	orrs	r3, r2
 8005852:	610b      	str	r3, [r1, #16]
 8005854:	e005      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005856:	4b79      	ldr	r3, [pc, #484]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	4a78      	ldr	r2, [pc, #480]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800585c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005860:	6113      	str	r3, [r2, #16]
 8005862:	4b76      	ldr	r3, [pc, #472]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800586c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005870:	4972      	ldr	r1, [pc, #456]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005872:	4313      	orrs	r3, r2
 8005874:	670b      	str	r3, [r1, #112]	; 0x70
 8005876:	e004      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	75bb      	strb	r3, [r7, #22]
 800587c:	e001      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d07d      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005892:	2b28      	cmp	r3, #40	; 0x28
 8005894:	d866      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	0800596b 	.word	0x0800596b
 80058a0:	08005965 	.word	0x08005965
 80058a4:	08005965 	.word	0x08005965
 80058a8:	08005965 	.word	0x08005965
 80058ac:	08005965 	.word	0x08005965
 80058b0:	08005965 	.word	0x08005965
 80058b4:	08005965 	.word	0x08005965
 80058b8:	08005965 	.word	0x08005965
 80058bc:	08005941 	.word	0x08005941
 80058c0:	08005965 	.word	0x08005965
 80058c4:	08005965 	.word	0x08005965
 80058c8:	08005965 	.word	0x08005965
 80058cc:	08005965 	.word	0x08005965
 80058d0:	08005965 	.word	0x08005965
 80058d4:	08005965 	.word	0x08005965
 80058d8:	08005965 	.word	0x08005965
 80058dc:	08005953 	.word	0x08005953
 80058e0:	08005965 	.word	0x08005965
 80058e4:	08005965 	.word	0x08005965
 80058e8:	08005965 	.word	0x08005965
 80058ec:	08005965 	.word	0x08005965
 80058f0:	08005965 	.word	0x08005965
 80058f4:	08005965 	.word	0x08005965
 80058f8:	08005965 	.word	0x08005965
 80058fc:	0800596b 	.word	0x0800596b
 8005900:	08005965 	.word	0x08005965
 8005904:	08005965 	.word	0x08005965
 8005908:	08005965 	.word	0x08005965
 800590c:	08005965 	.word	0x08005965
 8005910:	08005965 	.word	0x08005965
 8005914:	08005965 	.word	0x08005965
 8005918:	08005965 	.word	0x08005965
 800591c:	0800596b 	.word	0x0800596b
 8005920:	08005965 	.word	0x08005965
 8005924:	08005965 	.word	0x08005965
 8005928:	08005965 	.word	0x08005965
 800592c:	08005965 	.word	0x08005965
 8005930:	08005965 	.word	0x08005965
 8005934:	08005965 	.word	0x08005965
 8005938:	08005965 	.word	0x08005965
 800593c:	0800596b 	.word	0x0800596b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	2101      	movs	r1, #1
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fdb6 	bl	80064b8 <RCCEx_PLL2_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005950:	e00c      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3324      	adds	r3, #36	; 0x24
 8005956:	2101      	movs	r1, #1
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fe5f 	bl	800661c <RCCEx_PLL3_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005962:	e003      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	75fb      	strb	r3, [r7, #23]
      break;
 8005968:	e000      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800596a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800596c:	7dfb      	ldrb	r3, [r7, #23]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005972:	4b32      	ldr	r3, [pc, #200]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800597e:	492f      	ldr	r1, [pc, #188]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005980:	4313      	orrs	r3, r2
 8005982:	654b      	str	r3, [r1, #84]	; 0x54
 8005984:	e001      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005986:	7dfb      	ldrb	r3, [r7, #23]
 8005988:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d037      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599a:	2b05      	cmp	r3, #5
 800599c:	d820      	bhi.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800599e:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80059a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a4:	080059e7 	.word	0x080059e7
 80059a8:	080059bd 	.word	0x080059bd
 80059ac:	080059cf 	.word	0x080059cf
 80059b0:	080059e7 	.word	0x080059e7
 80059b4:	080059e7 	.word	0x080059e7
 80059b8:	080059e7 	.word	0x080059e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fd78 	bl	80064b8 <RCCEx_PLL2_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80059cc:	e00c      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3324      	adds	r3, #36	; 0x24
 80059d2:	2101      	movs	r1, #1
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fe21 	bl	800661c <RCCEx_PLL3_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80059de:	e003      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	75fb      	strb	r3, [r7, #23]
      break;
 80059e4:	e000      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80059e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	f023 0207 	bic.w	r2, r3, #7
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	4910      	ldr	r1, [pc, #64]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	654b      	str	r3, [r1, #84]	; 0x54
 8005a00:	e001      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d040      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a18:	2b05      	cmp	r3, #5
 8005a1a:	d827      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005a1c:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a73 	.word	0x08005a73
 8005a28:	08005a49 	.word	0x08005a49
 8005a2c:	08005a5b 	.word	0x08005a5b
 8005a30:	08005a73 	.word	0x08005a73
 8005a34:	08005a73 	.word	0x08005a73
 8005a38:	08005a73 	.word	0x08005a73
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	58024800 	.word	0x58024800
 8005a44:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fd32 	bl	80064b8 <RCCEx_PLL2_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005a58:	e00c      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3324      	adds	r3, #36	; 0x24
 8005a5e:	2101      	movs	r1, #1
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fddb 	bl	800661c <RCCEx_PLL3_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005a6a:	e003      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a70:	e000      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a7a:	4bb2      	ldr	r3, [pc, #712]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7e:	f023 0207 	bic.w	r2, r3, #7
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a88:	49ae      	ldr	r1, [pc, #696]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a8e:	e001      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d044      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aaa:	d01b      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab0:	d805      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d022      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005abc:	e01b      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac2:	d01d      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ac8:	d01c      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005aca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ace:	d01b      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005ad0:	e011      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fced 	bl	80064b8 <RCCEx_PLL2_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ae2:	e012      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3324      	adds	r3, #36	; 0x24
 8005ae8:	2102      	movs	r1, #2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fd96 	bl	800661c <RCCEx_PLL3_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005af4:	e009      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
      break;
 8005afa:	e006      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005afc:	bf00      	nop
 8005afe:	e004      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005b00:	bf00      	nop
 8005b02:	e002      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005b04:	bf00      	nop
 8005b06:	e000      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b10:	4b8c      	ldr	r3, [pc, #560]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1e:	4989      	ldr	r1, [pc, #548]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	654b      	str	r3, [r1, #84]	; 0x54
 8005b24:	e001      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d044      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b40:	d01b      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b46:	d805      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d022      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005b52:	e01b      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b58:	d01d      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005b5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b5e:	d01c      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b64:	d01b      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005b66:	e011      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fca2 	bl	80064b8 <RCCEx_PLL2_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005b78:	e012      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3324      	adds	r3, #36	; 0x24
 8005b7e:	2102      	movs	r1, #2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fd4b 	bl	800661c <RCCEx_PLL3_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005b8a:	e009      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b90:	e006      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005b92:	bf00      	nop
 8005b94:	e004      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005b96:	bf00      	nop
 8005b98:	e002      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005b9a:	bf00      	nop
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ba6:	4b67      	ldr	r3, [pc, #412]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bb4:	4963      	ldr	r1, [pc, #396]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8005bba:	e001      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d044      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bd6:	d01b      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bdc:	d805      	bhi.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d022      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be6:	d00a      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005be8:	e01b      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bee:	d01d      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005bf0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005bf4:	d01c      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005bf6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005bfa:	d01b      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005bfc:	e011      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fc57 	bl	80064b8 <RCCEx_PLL2_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c0e:	e012      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3324      	adds	r3, #36	; 0x24
 8005c14:	2102      	movs	r1, #2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fd00 	bl	800661c <RCCEx_PLL3_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c20:	e009      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
      break;
 8005c26:	e006      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005c28:	bf00      	nop
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005c2c:	bf00      	nop
 8005c2e:	e002      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c3c:	4b41      	ldr	r3, [pc, #260]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c4a:	493e      	ldr	r1, [pc, #248]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	658b      	str	r3, [r1, #88]	; 0x58
 8005c50:	e001      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6c:	d10a      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	3324      	adds	r3, #36	; 0x24
 8005c72:	2102      	movs	r1, #2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fcd1 	bl	800661c <RCCEx_PLL3_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c84:	4b2f      	ldr	r3, [pc, #188]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c92:	492c      	ldr	r1, [pc, #176]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cae:	d10a      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3324      	adds	r3, #36	; 0x24
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fcb0 	bl	800661c <RCCEx_PLL3_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cc6:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd4:	491b      	ldr	r1, [pc, #108]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d032      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf0:	d00d      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cf6:	d016      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d111      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	2100      	movs	r1, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fbd8 	bl	80064b8 <RCCEx_PLL2_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d0c:	e00c      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3324      	adds	r3, #36	; 0x24
 8005d12:	2102      	movs	r1, #2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fc81 	bl	800661c <RCCEx_PLL3_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d1e:	e003      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
      break;
 8005d24:	e000      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d3c:	4901      	ldr	r1, [pc, #4]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	658b      	str	r3, [r1, #88]	; 0x58
 8005d42:	e003      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005d44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02f      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d62:	d00c      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005d64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d68:	d015      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6e:	d10f      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d70:	4b79      	ldr	r3, [pc, #484]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	4a78      	ldr	r2, [pc, #480]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005d7c:	e00c      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3324      	adds	r3, #36	; 0x24
 8005d82:	2101      	movs	r1, #1
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fc49 	bl	800661c <RCCEx_PLL3_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005d8e:	e003      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
      break;
 8005d94:	e000      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d9e:	4b6e      	ldr	r3, [pc, #440]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dac:	496a      	ldr	r1, [pc, #424]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	654b      	str	r3, [r1, #84]	; 0x54
 8005db2:	e001      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d029      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd0:	d007      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005dd2:	e00f      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd4:	4b60      	ldr	r3, [pc, #384]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	4a5f      	ldr	r2, [pc, #380]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005de0:	e00b      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3304      	adds	r3, #4
 8005de6:	2102      	movs	r1, #2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fb65 	bl	80064b8 <RCCEx_PLL2_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005df2:	e002      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	75fb      	strb	r3, [r7, #23]
      break;
 8005df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e00:	4b55      	ldr	r3, [pc, #340]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0c:	4952      	ldr	r1, [pc, #328]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e12:	e001      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3324      	adds	r3, #36	; 0x24
 8005e28:	2102      	movs	r1, #2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fbf6 	bl	800661c <RCCEx_PLL3_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d02f      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4e:	d00c      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e54:	d802      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d011      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005e5a:	e00d      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e60:	d00f      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e66:	d00e      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005e68:	e006      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6a:	4b3b      	ldr	r3, [pc, #236]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	4a3a      	ldr	r2, [pc, #232]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005e76:	e007      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7c:	e004      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005e7e:	bf00      	nop
 8005e80:	e002      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005e82:	bf00      	nop
 8005e84:	e000      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e8e:	4b32      	ldr	r3, [pc, #200]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e9a:	492f      	ldr	r1, [pc, #188]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	654b      	str	r3, [r1, #84]	; 0x54
 8005ea0:	e001      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
 8005ea4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005eb2:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	4926      	ldr	r1, [pc, #152]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005ed0:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ede:	491e      	ldr	r1, [pc, #120]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ef0:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efc:	4916      	ldr	r1, [pc, #88]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00d      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f18:	6113      	str	r3, [r2, #16]
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005f24:	490c      	ldr	r1, [pc, #48]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da08      	bge.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f3e:	4906      	ldr	r1, [pc, #24]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005f44:	7dbb      	ldrb	r3, [r7, #22]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e000      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	58024400 	.word	0x58024400

08005f5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f60:	f7ff f8b2 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8005f64:	4601      	mov	r1, r0
 8005f66:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	091b      	lsrs	r3, r3, #4
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	4a04      	ldr	r2, [pc, #16]	; (8005f84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f72:	5cd3      	ldrb	r3, [r2, r3]
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	58024400 	.word	0x58024400
 8005f84:	08009488 	.word	0x08009488

08005f88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f90:	4b9d      	ldr	r3, [pc, #628]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005f9a:	4b9b      	ldr	r3, [pc, #620]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	0b1b      	lsrs	r3, r3, #12
 8005fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fa6:	4b98      	ldr	r3, [pc, #608]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	091b      	lsrs	r3, r3, #4
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005fb2:	4b95      	ldr	r3, [pc, #596]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	08db      	lsrs	r3, r3, #3
 8005fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	fb02 f303 	mul.w	r3, r2, r3
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 810a 	beq.w	80061ea <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d05a      	beq.n	8006092 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d302      	bcc.n	8005fe6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d078      	beq.n	80060d6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005fe4:	e099      	b.n	800611a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fe6:	4b88      	ldr	r3, [pc, #544]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d02d      	beq.n	800604e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ff2:	4b85      	ldr	r3, [pc, #532]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	08db      	lsrs	r3, r3, #3
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	4a83      	ldr	r2, [pc, #524]	; (800620c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8006002:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601c:	4b7a      	ldr	r3, [pc, #488]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006030:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006048:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800604c:	e087      	b.n	800615e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	ee07 3a90 	vmov	s15, r3
 8006054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006058:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800605c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006060:	4b69      	ldr	r3, [pc, #420]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006070:	ed97 6a03 	vldr	s12, [r7, #12]
 8006074:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006090:	e065      	b.n	800615e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	ee07 3a90 	vmov	s15, r3
 8006098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80060a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a4:	4b58      	ldr	r3, [pc, #352]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80060bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060d4:	e043      	b.n	800615e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	ee07 3a90 	vmov	s15, r3
 80060dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800621c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80060e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e8:	4b47      	ldr	r3, [pc, #284]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f0:	ee07 3a90 	vmov	s15, r3
 80060f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80060fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006114:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006118:	e021      	b.n	800615e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006124:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612c:	4b36      	ldr	r3, [pc, #216]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006134:	ee07 3a90 	vmov	s15, r3
 8006138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006140:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006158:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800615c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800615e:	4b2a      	ldr	r3, [pc, #168]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	0a5b      	lsrs	r3, r3, #9
 8006164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006178:	edd7 6a07 	vldr	s13, [r7, #28]
 800617c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006184:	ee17 2a90 	vmov	r2, s15
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800618c:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	0c1b      	lsrs	r3, r3, #16
 8006192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b2:	ee17 2a90 	vmov	r2, s15
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80061ba:	4b13      	ldr	r3, [pc, #76]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	0e1b      	lsrs	r3, r3, #24
 80061c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80061d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e0:	ee17 2a90 	vmov	r2, s15
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061e8:	e008      	b.n	80061fc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	609a      	str	r2, [r3, #8]
}
 80061fc:	bf00      	nop
 80061fe:	3724      	adds	r7, #36	; 0x24
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	58024400 	.word	0x58024400
 800620c:	03d09000 	.word	0x03d09000
 8006210:	46000000 	.word	0x46000000
 8006214:	4c742400 	.word	0x4c742400
 8006218:	4a742400 	.word	0x4a742400
 800621c:	4af42400 	.word	0x4af42400

08006220 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006220:	b480      	push	{r7}
 8006222:	b089      	sub	sp, #36	; 0x24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006228:	4b9d      	ldr	r3, [pc, #628]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006232:	4b9b      	ldr	r3, [pc, #620]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	0d1b      	lsrs	r3, r3, #20
 8006238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800623e:	4b98      	ldr	r3, [pc, #608]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	0a1b      	lsrs	r3, r3, #8
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800624a:	4b95      	ldr	r3, [pc, #596]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006262:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 810a 	beq.w	8006482 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d05a      	beq.n	800632a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006274:	2b01      	cmp	r3, #1
 8006276:	d302      	bcc.n	800627e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006278:	2b02      	cmp	r3, #2
 800627a:	d078      	beq.n	800636e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800627c:	e099      	b.n	80063b2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800627e:	4b88      	ldr	r3, [pc, #544]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02d      	beq.n	80062e6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800628a:	4b85      	ldr	r3, [pc, #532]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	08db      	lsrs	r3, r3, #3
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	4a83      	ldr	r2, [pc, #524]	; (80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006296:	fa22 f303 	lsr.w	r3, r2, r3
 800629a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b4:	4b7a      	ldr	r3, [pc, #488]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80062c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062e4:	e087      	b.n	80063f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	ee07 3a90 	vmov	s15, r3
 80062ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80064ac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80062f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f8:	4b69      	ldr	r3, [pc, #420]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006308:	ed97 6a03 	vldr	s12, [r7, #12]
 800630c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800631c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006324:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006328:	e065      	b.n	80063f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006334:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633c:	4b58      	ldr	r3, [pc, #352]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006344:	ee07 3a90 	vmov	s15, r3
 8006348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006350:	eddf 5a55 	vldr	s11, [pc, #340]	; 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006354:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006358:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006368:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800636c:	e043      	b.n	80063f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006378:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80064b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800637c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006380:	4b47      	ldr	r3, [pc, #284]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006390:	ed97 6a03 	vldr	s12, [r7, #12]
 8006394:	eddf 5a44 	vldr	s11, [pc, #272]	; 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063b0:	e021      	b.n	80063f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	ee07 3a90 	vmov	s15, r3
 80063b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063bc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80063c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c4:	4b36      	ldr	r3, [pc, #216]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063cc:	ee07 3a90 	vmov	s15, r3
 80063d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80063dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063f4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80063f6:	4b2a      	ldr	r3, [pc, #168]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	0a5b      	lsrs	r3, r3, #9
 80063fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006400:	ee07 3a90 	vmov	s15, r3
 8006404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800640c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006410:	edd7 6a07 	vldr	s13, [r7, #28]
 8006414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641c:	ee17 2a90 	vmov	r2, s15
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006424:	4b1e      	ldr	r3, [pc, #120]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	0c1b      	lsrs	r3, r3, #16
 800642a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800643a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800643e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800644a:	ee17 2a90 	vmov	r2, s15
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006452:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	0e1b      	lsrs	r3, r3, #24
 8006458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645c:	ee07 3a90 	vmov	s15, r3
 8006460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006468:	ee37 7a87 	vadd.f32	s14, s15, s14
 800646c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006478:	ee17 2a90 	vmov	r2, s15
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006480:	e008      	b.n	8006494 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	609a      	str	r2, [r3, #8]
}
 8006494:	bf00      	nop
 8006496:	3724      	adds	r7, #36	; 0x24
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	58024400 	.word	0x58024400
 80064a4:	03d09000 	.word	0x03d09000
 80064a8:	46000000 	.word	0x46000000
 80064ac:	4c742400 	.word	0x4c742400
 80064b0:	4a742400 	.word	0x4a742400
 80064b4:	4af42400 	.word	0x4af42400

080064b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064c6:	4b53      	ldr	r3, [pc, #332]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d101      	bne.n	80064d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e099      	b.n	800660a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064d6:	4b4f      	ldr	r3, [pc, #316]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a4e      	ldr	r2, [pc, #312]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80064dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e2:	f7fb ff57 	bl	8002394 <HAL_GetTick>
 80064e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064e8:	e008      	b.n	80064fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064ea:	f7fb ff53 	bl	8002394 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e086      	b.n	800660a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064fc:	4b45      	ldr	r3, [pc, #276]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f0      	bne.n	80064ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006508:	4b42      	ldr	r3, [pc, #264]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	031b      	lsls	r3, r3, #12
 8006516:	493f      	ldr	r1, [pc, #252]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006518:	4313      	orrs	r3, r2
 800651a:	628b      	str	r3, [r1, #40]	; 0x28
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	3b01      	subs	r3, #1
 8006522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	3b01      	subs	r3, #1
 800652c:	025b      	lsls	r3, r3, #9
 800652e:	b29b      	uxth	r3, r3
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	3b01      	subs	r3, #1
 8006538:	041b      	lsls	r3, r3, #16
 800653a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	3b01      	subs	r3, #1
 8006546:	061b      	lsls	r3, r3, #24
 8006548:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800654c:	4931      	ldr	r1, [pc, #196]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 800654e:	4313      	orrs	r3, r2
 8006550:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006552:	4b30      	ldr	r3, [pc, #192]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	492d      	ldr	r1, [pc, #180]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006560:	4313      	orrs	r3, r2
 8006562:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006564:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	f023 0220 	bic.w	r2, r3, #32
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	4928      	ldr	r1, [pc, #160]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006572:	4313      	orrs	r3, r2
 8006574:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006576:	4b27      	ldr	r3, [pc, #156]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	4a26      	ldr	r2, [pc, #152]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 800657c:	f023 0310 	bic.w	r3, r3, #16
 8006580:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006582:	4b24      	ldr	r3, [pc, #144]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <RCCEx_PLL2_Config+0x160>)
 8006588:	4013      	ands	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	69d2      	ldr	r2, [r2, #28]
 800658e:	00d2      	lsls	r2, r2, #3
 8006590:	4920      	ldr	r1, [pc, #128]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006592:	4313      	orrs	r3, r2
 8006594:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006596:	4b1f      	ldr	r3, [pc, #124]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 800659c:	f043 0310 	orr.w	r3, r3, #16
 80065a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065a8:	4b1a      	ldr	r3, [pc, #104]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	4a19      	ldr	r2, [pc, #100]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065b4:	e00f      	b.n	80065d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d106      	bne.n	80065ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065bc:	4b15      	ldr	r3, [pc, #84]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	4a14      	ldr	r2, [pc, #80]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065c8:	e005      	b.n	80065d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065ca:	4b12      	ldr	r3, [pc, #72]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	4a11      	ldr	r2, [pc, #68]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065d6:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a0e      	ldr	r2, [pc, #56]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e2:	f7fb fed7 	bl	8002394 <HAL_GetTick>
 80065e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065e8:	e008      	b.n	80065fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065ea:	f7fb fed3 	bl	8002394 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e006      	b.n	800660a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065fc:	4b05      	ldr	r3, [pc, #20]	; (8006614 <RCCEx_PLL2_Config+0x15c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	58024400 	.word	0x58024400
 8006618:	ffff0007 	.word	0xffff0007

0800661c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800662a:	4b53      	ldr	r3, [pc, #332]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	2b03      	cmp	r3, #3
 8006634:	d101      	bne.n	800663a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e099      	b.n	800676e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800663a:	4b4f      	ldr	r3, [pc, #316]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a4e      	ldr	r2, [pc, #312]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006646:	f7fb fea5 	bl	8002394 <HAL_GetTick>
 800664a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800664c:	e008      	b.n	8006660 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800664e:	f7fb fea1 	bl	8002394 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e086      	b.n	800676e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006660:	4b45      	ldr	r3, [pc, #276]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f0      	bne.n	800664e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800666c:	4b42      	ldr	r3, [pc, #264]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	051b      	lsls	r3, r3, #20
 800667a:	493f      	ldr	r1, [pc, #252]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 800667c:	4313      	orrs	r3, r2
 800667e:	628b      	str	r3, [r1, #40]	; 0x28
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	3b01      	subs	r3, #1
 8006686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	3b01      	subs	r3, #1
 8006690:	025b      	lsls	r3, r3, #9
 8006692:	b29b      	uxth	r3, r3
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	3b01      	subs	r3, #1
 800669c:	041b      	lsls	r3, r3, #16
 800669e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	061b      	lsls	r3, r3, #24
 80066ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066b0:	4931      	ldr	r1, [pc, #196]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066b6:	4b30      	ldr	r3, [pc, #192]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	492d      	ldr	r1, [pc, #180]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066c8:	4b2b      	ldr	r3, [pc, #172]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	4928      	ldr	r1, [pc, #160]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066da:	4b27      	ldr	r3, [pc, #156]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	4a26      	ldr	r2, [pc, #152]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066e6:	4b24      	ldr	r3, [pc, #144]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ea:	4b24      	ldr	r3, [pc, #144]	; (800677c <RCCEx_PLL3_Config+0x160>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	69d2      	ldr	r2, [r2, #28]
 80066f2:	00d2      	lsls	r2, r2, #3
 80066f4:	4920      	ldr	r1, [pc, #128]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066fa:	4b1f      	ldr	r3, [pc, #124]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	4a1e      	ldr	r2, [pc, #120]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006704:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d106      	bne.n	800671a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800670c:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	4a19      	ldr	r2, [pc, #100]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006712:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006716:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006718:	e00f      	b.n	800673a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d106      	bne.n	800672e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006720:	4b15      	ldr	r3, [pc, #84]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	4a14      	ldr	r2, [pc, #80]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006726:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800672a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800672c:	e005      	b.n	800673a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800672e:	4b12      	ldr	r3, [pc, #72]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006732:	4a11      	ldr	r2, [pc, #68]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006738:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800673a:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a0e      	ldr	r2, [pc, #56]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006746:	f7fb fe25 	bl	8002394 <HAL_GetTick>
 800674a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800674c:	e008      	b.n	8006760 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800674e:	f7fb fe21 	bl	8002394 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d901      	bls.n	8006760 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e006      	b.n	800676e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <RCCEx_PLL3_Config+0x15c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0f0      	beq.n	800674e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	58024400 	.word	0x58024400
 800677c:	ffff0007 	.word	0xffff0007

08006780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e042      	b.n	8006818 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fb fc19 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2224      	movs	r2, #36	; 0x24
 80067ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0201 	bic.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8c2 	bl	800694c <UART_SetConfig>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e022      	b.n	8006818 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fe66 	bl	80074ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 feed 	bl	80075f0 <UART_CheckIdleState>
 8006816:	4603      	mov	r3, r0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	; 0x28
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	4613      	mov	r3, r2
 800682e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006836:	2b20      	cmp	r3, #32
 8006838:	f040 8083 	bne.w	8006942 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_UART_Transmit+0x28>
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e07b      	b.n	8006944 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_UART_Transmit+0x3a>
 8006856:	2302      	movs	r3, #2
 8006858:	e074      	b.n	8006944 <HAL_UART_Transmit+0x124>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2221      	movs	r2, #33	; 0x21
 800686e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006872:	f7fb fd8f 	bl	8002394 <HAL_GetTick>
 8006876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	88fa      	ldrh	r2, [r7, #6]
 800687c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006890:	d108      	bne.n	80068a4 <HAL_UART_Transmit+0x84>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	e003      	b.n	80068ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80068b4:	e02c      	b.n	8006910 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2200      	movs	r2, #0
 80068be:	2180      	movs	r1, #128	; 0x80
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fedd 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e039      	b.n	8006944 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10b      	bne.n	80068ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	461a      	mov	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	3302      	adds	r3, #2
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	e007      	b.n	80068fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	781a      	ldrb	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	3301      	adds	r3, #1
 80068fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1cc      	bne.n	80068b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2200      	movs	r2, #0
 8006924:	2140      	movs	r1, #64	; 0x40
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 feaa 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e006      	b.n	8006944 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e000      	b.n	8006944 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006942:	2302      	movs	r3, #2
  }
}
 8006944:	4618      	mov	r0, r3
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800694c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006950:	b08e      	sub	sp, #56	; 0x38
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	4313      	orrs	r3, r2
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800697a:	4313      	orrs	r3, r2
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	4bc1      	ldr	r3, [pc, #772]	; (8006c8c <UART_SetConfig+0x340>)
 8006986:	4013      	ands	r3, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800698e:	430b      	orrs	r3, r1
 8006990:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4ab7      	ldr	r2, [pc, #732]	; (8006c90 <UART_SetConfig+0x344>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069be:	4313      	orrs	r3, r2
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	4bb2      	ldr	r3, [pc, #712]	; (8006c94 <UART_SetConfig+0x348>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069d2:	430b      	orrs	r3, r1
 80069d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	f023 010f 	bic.w	r1, r3, #15
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4aa9      	ldr	r2, [pc, #676]	; (8006c98 <UART_SetConfig+0x34c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d177      	bne.n	8006ae6 <UART_SetConfig+0x19a>
 80069f6:	4ba9      	ldr	r3, [pc, #676]	; (8006c9c <UART_SetConfig+0x350>)
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069fe:	2b28      	cmp	r3, #40	; 0x28
 8006a00:	d86c      	bhi.n	8006adc <UART_SetConfig+0x190>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <UART_SetConfig+0xbc>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006aad 	.word	0x08006aad
 8006a0c:	08006add 	.word	0x08006add
 8006a10:	08006add 	.word	0x08006add
 8006a14:	08006add 	.word	0x08006add
 8006a18:	08006add 	.word	0x08006add
 8006a1c:	08006add 	.word	0x08006add
 8006a20:	08006add 	.word	0x08006add
 8006a24:	08006add 	.word	0x08006add
 8006a28:	08006ab5 	.word	0x08006ab5
 8006a2c:	08006add 	.word	0x08006add
 8006a30:	08006add 	.word	0x08006add
 8006a34:	08006add 	.word	0x08006add
 8006a38:	08006add 	.word	0x08006add
 8006a3c:	08006add 	.word	0x08006add
 8006a40:	08006add 	.word	0x08006add
 8006a44:	08006add 	.word	0x08006add
 8006a48:	08006abd 	.word	0x08006abd
 8006a4c:	08006add 	.word	0x08006add
 8006a50:	08006add 	.word	0x08006add
 8006a54:	08006add 	.word	0x08006add
 8006a58:	08006add 	.word	0x08006add
 8006a5c:	08006add 	.word	0x08006add
 8006a60:	08006add 	.word	0x08006add
 8006a64:	08006add 	.word	0x08006add
 8006a68:	08006ac5 	.word	0x08006ac5
 8006a6c:	08006add 	.word	0x08006add
 8006a70:	08006add 	.word	0x08006add
 8006a74:	08006add 	.word	0x08006add
 8006a78:	08006add 	.word	0x08006add
 8006a7c:	08006add 	.word	0x08006add
 8006a80:	08006add 	.word	0x08006add
 8006a84:	08006add 	.word	0x08006add
 8006a88:	08006acd 	.word	0x08006acd
 8006a8c:	08006add 	.word	0x08006add
 8006a90:	08006add 	.word	0x08006add
 8006a94:	08006add 	.word	0x08006add
 8006a98:	08006add 	.word	0x08006add
 8006a9c:	08006add 	.word	0x08006add
 8006aa0:	08006add 	.word	0x08006add
 8006aa4:	08006add 	.word	0x08006add
 8006aa8:	08006ad5 	.word	0x08006ad5
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab2:	e233      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aba:	e22f      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006abc:	2308      	movs	r3, #8
 8006abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac2:	e22b      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aca:	e227      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006acc:	2320      	movs	r3, #32
 8006ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad2:	e223      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006ad4:	2340      	movs	r3, #64	; 0x40
 8006ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ada:	e21f      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006adc:	2380      	movs	r3, #128	; 0x80
 8006ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae2:	bf00      	nop
 8006ae4:	e21a      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a6d      	ldr	r2, [pc, #436]	; (8006ca0 <UART_SetConfig+0x354>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d132      	bne.n	8006b56 <UART_SetConfig+0x20a>
 8006af0:	4b6a      	ldr	r3, [pc, #424]	; (8006c9c <UART_SetConfig+0x350>)
 8006af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	d827      	bhi.n	8006b4c <UART_SetConfig+0x200>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <UART_SetConfig+0x1b8>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b1d 	.word	0x08006b1d
 8006b08:	08006b25 	.word	0x08006b25
 8006b0c:	08006b2d 	.word	0x08006b2d
 8006b10:	08006b35 	.word	0x08006b35
 8006b14:	08006b3d 	.word	0x08006b3d
 8006b18:	08006b45 	.word	0x08006b45
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b22:	e1fb      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006b24:	2304      	movs	r3, #4
 8006b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2a:	e1f7      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b32:	e1f3      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006b34:	2310      	movs	r3, #16
 8006b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b3a:	e1ef      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006b3c:	2320      	movs	r3, #32
 8006b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b42:	e1eb      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b4a:	e1e7      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b52:	bf00      	nop
 8006b54:	e1e2      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a52      	ldr	r2, [pc, #328]	; (8006ca4 <UART_SetConfig+0x358>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d132      	bne.n	8006bc6 <UART_SetConfig+0x27a>
 8006b60:	4b4e      	ldr	r3, [pc, #312]	; (8006c9c <UART_SetConfig+0x350>)
 8006b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	d827      	bhi.n	8006bbc <UART_SetConfig+0x270>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0x228>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006b8d 	.word	0x08006b8d
 8006b78:	08006b95 	.word	0x08006b95
 8006b7c:	08006b9d 	.word	0x08006b9d
 8006b80:	08006ba5 	.word	0x08006ba5
 8006b84:	08006bad 	.word	0x08006bad
 8006b88:	08006bb5 	.word	0x08006bb5
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b92:	e1c3      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006b94:	2304      	movs	r3, #4
 8006b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b9a:	e1bf      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba2:	e1bb      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006baa:	e1b7      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006bac:	2320      	movs	r3, #32
 8006bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bb2:	e1b3      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006bb4:	2340      	movs	r3, #64	; 0x40
 8006bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bba:	e1af      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006bbc:	2380      	movs	r3, #128	; 0x80
 8006bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc2:	bf00      	nop
 8006bc4:	e1aa      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a37      	ldr	r2, [pc, #220]	; (8006ca8 <UART_SetConfig+0x35c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d132      	bne.n	8006c36 <UART_SetConfig+0x2ea>
 8006bd0:	4b32      	ldr	r3, [pc, #200]	; (8006c9c <UART_SetConfig+0x350>)
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	2b05      	cmp	r3, #5
 8006bda:	d827      	bhi.n	8006c2c <UART_SetConfig+0x2e0>
 8006bdc:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0x298>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006bfd 	.word	0x08006bfd
 8006be8:	08006c05 	.word	0x08006c05
 8006bec:	08006c0d 	.word	0x08006c0d
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006c1d 	.word	0x08006c1d
 8006bf8:	08006c25 	.word	0x08006c25
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c02:	e18b      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c0a:	e187      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c12:	e183      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c1a:	e17f      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c1c:	2320      	movs	r3, #32
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c22:	e17b      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c24:	2340      	movs	r3, #64	; 0x40
 8006c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c2a:	e177      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c2c:	2380      	movs	r3, #128	; 0x80
 8006c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c32:	bf00      	nop
 8006c34:	e172      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <UART_SetConfig+0x360>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d144      	bne.n	8006cca <UART_SetConfig+0x37e>
 8006c40:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <UART_SetConfig+0x350>)
 8006c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	2b05      	cmp	r3, #5
 8006c4a:	d839      	bhi.n	8006cc0 <UART_SetConfig+0x374>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <UART_SetConfig+0x308>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c6d 	.word	0x08006c6d
 8006c58:	08006c75 	.word	0x08006c75
 8006c5c:	08006c7d 	.word	0x08006c7d
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08006cb1 	.word	0x08006cb1
 8006c68:	08006cb9 	.word	0x08006cb9
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c72:	e153      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c74:	2304      	movs	r3, #4
 8006c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c7a:	e14f      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c82:	e14b      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c84:	2310      	movs	r3, #16
 8006c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c8a:	e147      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006c8c:	cfff69f3 	.word	0xcfff69f3
 8006c90:	58000c00 	.word	0x58000c00
 8006c94:	11fff4ff 	.word	0x11fff4ff
 8006c98:	40011000 	.word	0x40011000
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	40004400 	.word	0x40004400
 8006ca4:	40004800 	.word	0x40004800
 8006ca8:	40004c00 	.word	0x40004c00
 8006cac:	40005000 	.word	0x40005000
 8006cb0:	2320      	movs	r3, #32
 8006cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cb6:	e131      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006cb8:	2340      	movs	r3, #64	; 0x40
 8006cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cbe:	e12d      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006cc0:	2380      	movs	r3, #128	; 0x80
 8006cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cc6:	bf00      	nop
 8006cc8:	e128      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4ab6      	ldr	r2, [pc, #728]	; (8006fa8 <UART_SetConfig+0x65c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d178      	bne.n	8006dc6 <UART_SetConfig+0x47a>
 8006cd4:	4bb5      	ldr	r3, [pc, #724]	; (8006fac <UART_SetConfig+0x660>)
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cdc:	2b28      	cmp	r3, #40	; 0x28
 8006cde:	d86d      	bhi.n	8006dbc <UART_SetConfig+0x470>
 8006ce0:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <UART_SetConfig+0x39c>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006d8d 	.word	0x08006d8d
 8006cec:	08006dbd 	.word	0x08006dbd
 8006cf0:	08006dbd 	.word	0x08006dbd
 8006cf4:	08006dbd 	.word	0x08006dbd
 8006cf8:	08006dbd 	.word	0x08006dbd
 8006cfc:	08006dbd 	.word	0x08006dbd
 8006d00:	08006dbd 	.word	0x08006dbd
 8006d04:	08006dbd 	.word	0x08006dbd
 8006d08:	08006d95 	.word	0x08006d95
 8006d0c:	08006dbd 	.word	0x08006dbd
 8006d10:	08006dbd 	.word	0x08006dbd
 8006d14:	08006dbd 	.word	0x08006dbd
 8006d18:	08006dbd 	.word	0x08006dbd
 8006d1c:	08006dbd 	.word	0x08006dbd
 8006d20:	08006dbd 	.word	0x08006dbd
 8006d24:	08006dbd 	.word	0x08006dbd
 8006d28:	08006d9d 	.word	0x08006d9d
 8006d2c:	08006dbd 	.word	0x08006dbd
 8006d30:	08006dbd 	.word	0x08006dbd
 8006d34:	08006dbd 	.word	0x08006dbd
 8006d38:	08006dbd 	.word	0x08006dbd
 8006d3c:	08006dbd 	.word	0x08006dbd
 8006d40:	08006dbd 	.word	0x08006dbd
 8006d44:	08006dbd 	.word	0x08006dbd
 8006d48:	08006da5 	.word	0x08006da5
 8006d4c:	08006dbd 	.word	0x08006dbd
 8006d50:	08006dbd 	.word	0x08006dbd
 8006d54:	08006dbd 	.word	0x08006dbd
 8006d58:	08006dbd 	.word	0x08006dbd
 8006d5c:	08006dbd 	.word	0x08006dbd
 8006d60:	08006dbd 	.word	0x08006dbd
 8006d64:	08006dbd 	.word	0x08006dbd
 8006d68:	08006dad 	.word	0x08006dad
 8006d6c:	08006dbd 	.word	0x08006dbd
 8006d70:	08006dbd 	.word	0x08006dbd
 8006d74:	08006dbd 	.word	0x08006dbd
 8006d78:	08006dbd 	.word	0x08006dbd
 8006d7c:	08006dbd 	.word	0x08006dbd
 8006d80:	08006dbd 	.word	0x08006dbd
 8006d84:	08006dbd 	.word	0x08006dbd
 8006d88:	08006db5 	.word	0x08006db5
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d92:	e0c3      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006d94:	2304      	movs	r3, #4
 8006d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d9a:	e0bf      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006da2:	e0bb      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006da4:	2310      	movs	r3, #16
 8006da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006daa:	e0b7      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006dac:	2320      	movs	r3, #32
 8006dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db2:	e0b3      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dba:	e0af      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006dbc:	2380      	movs	r3, #128	; 0x80
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dc2:	bf00      	nop
 8006dc4:	e0aa      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a79      	ldr	r2, [pc, #484]	; (8006fb0 <UART_SetConfig+0x664>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d132      	bne.n	8006e36 <UART_SetConfig+0x4ea>
 8006dd0:	4b76      	ldr	r3, [pc, #472]	; (8006fac <UART_SetConfig+0x660>)
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	2b05      	cmp	r3, #5
 8006dda:	d827      	bhi.n	8006e2c <UART_SetConfig+0x4e0>
 8006ddc:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x498>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006dfd 	.word	0x08006dfd
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	08006e0d 	.word	0x08006e0d
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e25 	.word	0x08006e25
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e02:	e08b      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e04:	2304      	movs	r3, #4
 8006e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e0a:	e087      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e12:	e083      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e14:	2310      	movs	r3, #16
 8006e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e1a:	e07f      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e1c:	2320      	movs	r3, #32
 8006e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e22:	e07b      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e24:	2340      	movs	r3, #64	; 0x40
 8006e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e2a:	e077      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e2c:	2380      	movs	r3, #128	; 0x80
 8006e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e32:	bf00      	nop
 8006e34:	e072      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a5e      	ldr	r2, [pc, #376]	; (8006fb4 <UART_SetConfig+0x668>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d132      	bne.n	8006ea6 <UART_SetConfig+0x55a>
 8006e40:	4b5a      	ldr	r3, [pc, #360]	; (8006fac <UART_SetConfig+0x660>)
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	d827      	bhi.n	8006e9c <UART_SetConfig+0x550>
 8006e4c:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <UART_SetConfig+0x508>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006e6d 	.word	0x08006e6d
 8006e58:	08006e75 	.word	0x08006e75
 8006e5c:	08006e7d 	.word	0x08006e7d
 8006e60:	08006e85 	.word	0x08006e85
 8006e64:	08006e8d 	.word	0x08006e8d
 8006e68:	08006e95 	.word	0x08006e95
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e72:	e053      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e74:	2304      	movs	r3, #4
 8006e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e7a:	e04f      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e82:	e04b      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e84:	2310      	movs	r3, #16
 8006e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8a:	e047      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e92:	e043      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e94:	2340      	movs	r3, #64	; 0x40
 8006e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e9a:	e03f      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ea2:	bf00      	nop
 8006ea4:	e03a      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a43      	ldr	r2, [pc, #268]	; (8006fb8 <UART_SetConfig+0x66c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d132      	bne.n	8006f16 <UART_SetConfig+0x5ca>
 8006eb0:	4b3e      	ldr	r3, [pc, #248]	; (8006fac <UART_SetConfig+0x660>)
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	d827      	bhi.n	8006f0c <UART_SetConfig+0x5c0>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <UART_SetConfig+0x578>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006edd 	.word	0x08006edd
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006eed 	.word	0x08006eed
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	2302      	movs	r3, #2
 8006ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ee2:	e01b      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eea:	e017      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef2:	e013      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006efa:	e00f      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006efc:	2320      	movs	r3, #32
 8006efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f02:	e00b      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f0a:	e007      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f12:	bf00      	nop
 8006f14:	e002      	b.n	8006f1c <UART_SetConfig+0x5d0>
 8006f16:	2380      	movs	r3, #128	; 0x80
 8006f18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a25      	ldr	r2, [pc, #148]	; (8006fb8 <UART_SetConfig+0x66c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	f040 80b8 	bne.w	8007098 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	d019      	beq.n	8006f64 <UART_SetConfig+0x618>
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	dc04      	bgt.n	8006f3e <UART_SetConfig+0x5f2>
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d009      	beq.n	8006f4c <UART_SetConfig+0x600>
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d00b      	beq.n	8006f54 <UART_SetConfig+0x608>
 8006f3c:	e042      	b.n	8006fc4 <UART_SetConfig+0x678>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d02b      	beq.n	8006f9a <UART_SetConfig+0x64e>
 8006f42:	2b40      	cmp	r3, #64	; 0x40
 8006f44:	d02c      	beq.n	8006fa0 <UART_SetConfig+0x654>
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d014      	beq.n	8006f74 <UART_SetConfig+0x628>
 8006f4a:	e03b      	b.n	8006fc4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006f4c:	f7ff f806 	bl	8005f5c <HAL_RCCEx_GetD3PCLK1Freq>
 8006f50:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f52:	e03d      	b.n	8006fd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f54:	f107 0314 	add.w	r3, r7, #20
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff f815 	bl	8005f88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f62:	e035      	b.n	8006fd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f64:	f107 0308 	add.w	r3, r7, #8
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff f959 	bl	8006220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f72:	e02d      	b.n	8006fd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <UART_SetConfig+0x660>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <UART_SetConfig+0x660>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	08db      	lsrs	r3, r3, #3
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	4a0c      	ldr	r2, [pc, #48]	; (8006fbc <UART_SetConfig+0x670>)
 8006f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f92:	e01d      	b.n	8006fd0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006f94:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <UART_SetConfig+0x670>)
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f98:	e01a      	b.n	8006fd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f9a:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <UART_SetConfig+0x674>)
 8006f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f9e:	e017      	b.n	8006fd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fa6:	e013      	b.n	8006fd0 <UART_SetConfig+0x684>
 8006fa8:	40011400 	.word	0x40011400
 8006fac:	58024400 	.word	0x58024400
 8006fb0:	40007800 	.word	0x40007800
 8006fb4:	40007c00 	.word	0x40007c00
 8006fb8:	58000c00 	.word	0x58000c00
 8006fbc:	03d09000 	.word	0x03d09000
 8006fc0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006fce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 824d 	beq.w	8007472 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	4aad      	ldr	r2, [pc, #692]	; (8007294 <UART_SetConfig+0x948>)
 8006fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fea:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	4413      	add	r3, r2
 8006ff6:	6a3a      	ldr	r2, [r7, #32]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d305      	bcc.n	8007008 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007002:	6a3a      	ldr	r2, [r7, #32]
 8007004:	429a      	cmp	r2, r3
 8007006:	d903      	bls.n	8007010 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800700e:	e230      	b.n	8007472 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007012:	4618      	mov	r0, r3
 8007014:	f04f 0100 	mov.w	r1, #0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	4a9d      	ldr	r2, [pc, #628]	; (8007294 <UART_SetConfig+0x948>)
 800701e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007022:	b29b      	uxth	r3, r3
 8007024:	f04f 0400 	mov.w	r4, #0
 8007028:	461a      	mov	r2, r3
 800702a:	4623      	mov	r3, r4
 800702c:	f7f9 f9a8 	bl	8000380 <__aeabi_uldivmod>
 8007030:	4603      	mov	r3, r0
 8007032:	460c      	mov	r4, r1
 8007034:	4619      	mov	r1, r3
 8007036:	4622      	mov	r2, r4
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	f04f 0400 	mov.w	r4, #0
 8007040:	0214      	lsls	r4, r2, #8
 8007042:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007046:	020b      	lsls	r3, r1, #8
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6852      	ldr	r2, [r2, #4]
 800704c:	0852      	lsrs	r2, r2, #1
 800704e:	4611      	mov	r1, r2
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	eb13 0b01 	adds.w	fp, r3, r1
 8007058:	eb44 0c02 	adc.w	ip, r4, r2
 800705c:	4658      	mov	r0, fp
 800705e:	4661      	mov	r1, ip
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f04f 0400 	mov.w	r4, #0
 8007068:	461a      	mov	r2, r3
 800706a:	4623      	mov	r3, r4
 800706c:	f7f9 f988 	bl	8000380 <__aeabi_uldivmod>
 8007070:	4603      	mov	r3, r0
 8007072:	460c      	mov	r4, r1
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800707c:	d308      	bcc.n	8007090 <UART_SetConfig+0x744>
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007084:	d204      	bcs.n	8007090 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	e1f0      	b.n	8007472 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007096:	e1ec      	b.n	8007472 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a0:	f040 8100 	bne.w	80072a4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80070a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070a8:	2b40      	cmp	r3, #64	; 0x40
 80070aa:	f200 80b7 	bhi.w	800721c <UART_SetConfig+0x8d0>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <UART_SetConfig+0x768>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080071b9 	.word	0x080071b9
 80070b8:	080071c1 	.word	0x080071c1
 80070bc:	0800721d 	.word	0x0800721d
 80070c0:	0800721d 	.word	0x0800721d
 80070c4:	080071c9 	.word	0x080071c9
 80070c8:	0800721d 	.word	0x0800721d
 80070cc:	0800721d 	.word	0x0800721d
 80070d0:	0800721d 	.word	0x0800721d
 80070d4:	080071d9 	.word	0x080071d9
 80070d8:	0800721d 	.word	0x0800721d
 80070dc:	0800721d 	.word	0x0800721d
 80070e0:	0800721d 	.word	0x0800721d
 80070e4:	0800721d 	.word	0x0800721d
 80070e8:	0800721d 	.word	0x0800721d
 80070ec:	0800721d 	.word	0x0800721d
 80070f0:	0800721d 	.word	0x0800721d
 80070f4:	080071e9 	.word	0x080071e9
 80070f8:	0800721d 	.word	0x0800721d
 80070fc:	0800721d 	.word	0x0800721d
 8007100:	0800721d 	.word	0x0800721d
 8007104:	0800721d 	.word	0x0800721d
 8007108:	0800721d 	.word	0x0800721d
 800710c:	0800721d 	.word	0x0800721d
 8007110:	0800721d 	.word	0x0800721d
 8007114:	0800721d 	.word	0x0800721d
 8007118:	0800721d 	.word	0x0800721d
 800711c:	0800721d 	.word	0x0800721d
 8007120:	0800721d 	.word	0x0800721d
 8007124:	0800721d 	.word	0x0800721d
 8007128:	0800721d 	.word	0x0800721d
 800712c:	0800721d 	.word	0x0800721d
 8007130:	0800721d 	.word	0x0800721d
 8007134:	0800720f 	.word	0x0800720f
 8007138:	0800721d 	.word	0x0800721d
 800713c:	0800721d 	.word	0x0800721d
 8007140:	0800721d 	.word	0x0800721d
 8007144:	0800721d 	.word	0x0800721d
 8007148:	0800721d 	.word	0x0800721d
 800714c:	0800721d 	.word	0x0800721d
 8007150:	0800721d 	.word	0x0800721d
 8007154:	0800721d 	.word	0x0800721d
 8007158:	0800721d 	.word	0x0800721d
 800715c:	0800721d 	.word	0x0800721d
 8007160:	0800721d 	.word	0x0800721d
 8007164:	0800721d 	.word	0x0800721d
 8007168:	0800721d 	.word	0x0800721d
 800716c:	0800721d 	.word	0x0800721d
 8007170:	0800721d 	.word	0x0800721d
 8007174:	0800721d 	.word	0x0800721d
 8007178:	0800721d 	.word	0x0800721d
 800717c:	0800721d 	.word	0x0800721d
 8007180:	0800721d 	.word	0x0800721d
 8007184:	0800721d 	.word	0x0800721d
 8007188:	0800721d 	.word	0x0800721d
 800718c:	0800721d 	.word	0x0800721d
 8007190:	0800721d 	.word	0x0800721d
 8007194:	0800721d 	.word	0x0800721d
 8007198:	0800721d 	.word	0x0800721d
 800719c:	0800721d 	.word	0x0800721d
 80071a0:	0800721d 	.word	0x0800721d
 80071a4:	0800721d 	.word	0x0800721d
 80071a8:	0800721d 	.word	0x0800721d
 80071ac:	0800721d 	.word	0x0800721d
 80071b0:	0800721d 	.word	0x0800721d
 80071b4:	08007215 	.word	0x08007215
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b8:	f7fd ffb6 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 80071bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80071be:	e033      	b.n	8007228 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071c0:	f7fd ffc8 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 80071c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80071c6:	e02f      	b.n	8007228 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071c8:	f107 0314 	add.w	r3, r7, #20
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fedb 	bl	8005f88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071d6:	e027      	b.n	8007228 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071d8:	f107 0308 	add.w	r3, r7, #8
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff f81f 	bl	8006220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071e6:	e01f      	b.n	8007228 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071e8:	4b2b      	ldr	r3, [pc, #172]	; (8007298 <UART_SetConfig+0x94c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071f4:	4b28      	ldr	r3, [pc, #160]	; (8007298 <UART_SetConfig+0x94c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	08db      	lsrs	r3, r3, #3
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	4a27      	ldr	r2, [pc, #156]	; (800729c <UART_SetConfig+0x950>)
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007206:	e00f      	b.n	8007228 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8007208:	4b24      	ldr	r3, [pc, #144]	; (800729c <UART_SetConfig+0x950>)
 800720a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800720c:	e00c      	b.n	8007228 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800720e:	4b24      	ldr	r3, [pc, #144]	; (80072a0 <UART_SetConfig+0x954>)
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007212:	e009      	b.n	8007228 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800721a:	e005      	b.n	8007228 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007226:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 8121 	beq.w	8007472 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	4a17      	ldr	r2, [pc, #92]	; (8007294 <UART_SetConfig+0x948>)
 8007236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800723a:	461a      	mov	r2, r3
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007242:	005a      	lsls	r2, r3, #1
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	085b      	lsrs	r3, r3, #1
 800724a:	441a      	add	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	fbb2 f3f3 	udiv	r3, r2, r3
 8007254:	b29b      	uxth	r3, r3
 8007256:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d916      	bls.n	800728c <UART_SetConfig+0x940>
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007264:	d212      	bcs.n	800728c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	b29b      	uxth	r3, r3
 800726a:	f023 030f 	bic.w	r3, r3, #15
 800726e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	b29a      	uxth	r2, r3
 800727c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800727e:	4313      	orrs	r3, r2
 8007280:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	e0f2      	b.n	8007472 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007292:	e0ee      	b.n	8007472 <UART_SetConfig+0xb26>
 8007294:	08009498 	.word	0x08009498
 8007298:	58024400 	.word	0x58024400
 800729c:	03d09000 	.word	0x03d09000
 80072a0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80072a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	f200 80b7 	bhi.w	800741c <UART_SetConfig+0xad0>
 80072ae:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <UART_SetConfig+0x968>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	080073b9 	.word	0x080073b9
 80072b8:	080073c1 	.word	0x080073c1
 80072bc:	0800741d 	.word	0x0800741d
 80072c0:	0800741d 	.word	0x0800741d
 80072c4:	080073c9 	.word	0x080073c9
 80072c8:	0800741d 	.word	0x0800741d
 80072cc:	0800741d 	.word	0x0800741d
 80072d0:	0800741d 	.word	0x0800741d
 80072d4:	080073d9 	.word	0x080073d9
 80072d8:	0800741d 	.word	0x0800741d
 80072dc:	0800741d 	.word	0x0800741d
 80072e0:	0800741d 	.word	0x0800741d
 80072e4:	0800741d 	.word	0x0800741d
 80072e8:	0800741d 	.word	0x0800741d
 80072ec:	0800741d 	.word	0x0800741d
 80072f0:	0800741d 	.word	0x0800741d
 80072f4:	080073e9 	.word	0x080073e9
 80072f8:	0800741d 	.word	0x0800741d
 80072fc:	0800741d 	.word	0x0800741d
 8007300:	0800741d 	.word	0x0800741d
 8007304:	0800741d 	.word	0x0800741d
 8007308:	0800741d 	.word	0x0800741d
 800730c:	0800741d 	.word	0x0800741d
 8007310:	0800741d 	.word	0x0800741d
 8007314:	0800741d 	.word	0x0800741d
 8007318:	0800741d 	.word	0x0800741d
 800731c:	0800741d 	.word	0x0800741d
 8007320:	0800741d 	.word	0x0800741d
 8007324:	0800741d 	.word	0x0800741d
 8007328:	0800741d 	.word	0x0800741d
 800732c:	0800741d 	.word	0x0800741d
 8007330:	0800741d 	.word	0x0800741d
 8007334:	0800740f 	.word	0x0800740f
 8007338:	0800741d 	.word	0x0800741d
 800733c:	0800741d 	.word	0x0800741d
 8007340:	0800741d 	.word	0x0800741d
 8007344:	0800741d 	.word	0x0800741d
 8007348:	0800741d 	.word	0x0800741d
 800734c:	0800741d 	.word	0x0800741d
 8007350:	0800741d 	.word	0x0800741d
 8007354:	0800741d 	.word	0x0800741d
 8007358:	0800741d 	.word	0x0800741d
 800735c:	0800741d 	.word	0x0800741d
 8007360:	0800741d 	.word	0x0800741d
 8007364:	0800741d 	.word	0x0800741d
 8007368:	0800741d 	.word	0x0800741d
 800736c:	0800741d 	.word	0x0800741d
 8007370:	0800741d 	.word	0x0800741d
 8007374:	0800741d 	.word	0x0800741d
 8007378:	0800741d 	.word	0x0800741d
 800737c:	0800741d 	.word	0x0800741d
 8007380:	0800741d 	.word	0x0800741d
 8007384:	0800741d 	.word	0x0800741d
 8007388:	0800741d 	.word	0x0800741d
 800738c:	0800741d 	.word	0x0800741d
 8007390:	0800741d 	.word	0x0800741d
 8007394:	0800741d 	.word	0x0800741d
 8007398:	0800741d 	.word	0x0800741d
 800739c:	0800741d 	.word	0x0800741d
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	0800741d 	.word	0x0800741d
 80073a8:	0800741d 	.word	0x0800741d
 80073ac:	0800741d 	.word	0x0800741d
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	08007415 	.word	0x08007415
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b8:	f7fd feb6 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 80073bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80073be:	e033      	b.n	8007428 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073c0:	f7fd fec8 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 80073c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80073c6:	e02f      	b.n	8007428 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fddb 	bl	8005f88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073d6:	e027      	b.n	8007428 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d8:	f107 0308 	add.w	r3, r7, #8
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe ff1f 	bl	8006220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073e6:	e01f      	b.n	8007428 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073e8:	4b2c      	ldr	r3, [pc, #176]	; (800749c <UART_SetConfig+0xb50>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0320 	and.w	r3, r3, #32
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073f4:	4b29      	ldr	r3, [pc, #164]	; (800749c <UART_SetConfig+0xb50>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	08db      	lsrs	r3, r3, #3
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	4a28      	ldr	r2, [pc, #160]	; (80074a0 <UART_SetConfig+0xb54>)
 8007400:	fa22 f303 	lsr.w	r3, r2, r3
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007406:	e00f      	b.n	8007428 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007408:	4b25      	ldr	r3, [pc, #148]	; (80074a0 <UART_SetConfig+0xb54>)
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800740c:	e00c      	b.n	8007428 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800740e:	4b25      	ldr	r3, [pc, #148]	; (80074a4 <UART_SetConfig+0xb58>)
 8007410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007412:	e009      	b.n	8007428 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800741a:	e005      	b.n	8007428 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007426:	bf00      	nop
    }

    if (pclk != 0U)
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d021      	beq.n	8007472 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	4a1d      	ldr	r2, [pc, #116]	; (80074a8 <UART_SetConfig+0xb5c>)
 8007434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007438:	461a      	mov	r2, r3
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	441a      	add	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007450:	b29b      	uxth	r3, r3
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d908      	bls.n	800746c <UART_SetConfig+0xb20>
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007460:	d204      	bcs.n	800746c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007468:	60da      	str	r2, [r3, #12]
 800746a:	e002      	b.n	8007472 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800748e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007492:	4618      	mov	r0, r3
 8007494:	3738      	adds	r7, #56	; 0x38
 8007496:	46bd      	mov	sp, r7
 8007498:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800749c:	58024400 	.word	0x58024400
 80074a0:	03d09000 	.word	0x03d09000
 80074a4:	003d0900 	.word	0x003d0900
 80074a8:	08009498 	.word	0x08009498

080074ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d01a      	beq.n	80075c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075aa:	d10a      	bne.n	80075c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	605a      	str	r2, [r3, #4]
  }
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007600:	f7fa fec8 	bl	8002394 <HAL_GetTick>
 8007604:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0308 	and.w	r3, r3, #8
 8007610:	2b08      	cmp	r3, #8
 8007612:	d10e      	bne.n	8007632 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f82c 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e022      	b.n	8007678 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b04      	cmp	r3, #4
 800763e:	d10e      	bne.n	800765e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f816 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e00c      	b.n	8007678 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	4613      	mov	r3, r2
 800768e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007690:	e062      	b.n	8007758 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d05e      	beq.n	8007758 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800769a:	f7fa fe7b 	bl	8002394 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d302      	bcc.n	80076b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d11d      	bne.n	80076ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0201 	bic.w	r2, r2, #1
 80076ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2220      	movs	r2, #32
 80076dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e045      	b.n	8007778 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d02e      	beq.n	8007758 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007708:	d126      	bne.n	8007758 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007712:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007722:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0201 	bic.w	r2, r2, #1
 8007732:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2220      	movs	r2, #32
 8007740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2220      	movs	r2, #32
 8007748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e00f      	b.n	8007778 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69da      	ldr	r2, [r3, #28]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4013      	ands	r3, r2
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	429a      	cmp	r2, r3
 8007766:	bf0c      	ite	eq
 8007768:	2301      	moveq	r3, #1
 800776a:	2300      	movne	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	461a      	mov	r2, r3
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	429a      	cmp	r2, r3
 8007774:	d08d      	beq.n	8007692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_UARTEx_DisableFifoMode+0x16>
 8007792:	2302      	movs	r3, #2
 8007794:	e027      	b.n	80077e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2224      	movs	r2, #36	; 0x24
 80077a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0201 	bic.w	r2, r2, #1
 80077bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007802:	2b01      	cmp	r3, #1
 8007804:	d101      	bne.n	800780a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007806:	2302      	movs	r3, #2
 8007808:	e02d      	b.n	8007866 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2224      	movs	r2, #36	; 0x24
 8007816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0201 	bic.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f850 	bl	80078ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2220      	movs	r2, #32
 8007858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007882:	2302      	movs	r3, #2
 8007884:	e02d      	b.n	80078e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2224      	movs	r2, #36	; 0x24
 8007892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0201 	bic.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f812 	bl	80078ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b089      	sub	sp, #36	; 0x24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80078f4:	4a2f      	ldr	r2, [pc, #188]	; (80079b4 <UARTEx_SetNbDataToProcess+0xc8>)
 80078f6:	f107 0314 	add.w	r3, r7, #20
 80078fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007902:	4a2d      	ldr	r2, [pc, #180]	; (80079b8 <UARTEx_SetNbDataToProcess+0xcc>)
 8007904:	f107 030c 	add.w	r3, r7, #12
 8007908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800790c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007914:	2b00      	cmp	r3, #0
 8007916:	d108      	bne.n	800792a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007928:	e03d      	b.n	80079a6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800792a:	2310      	movs	r3, #16
 800792c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800792e:	2310      	movs	r3, #16
 8007930:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	0e5b      	lsrs	r3, r3, #25
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	0f5b      	lsrs	r3, r3, #29
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007952:	7fbb      	ldrb	r3, [r7, #30]
 8007954:	7f3a      	ldrb	r2, [r7, #28]
 8007956:	f107 0120 	add.w	r1, r7, #32
 800795a:	440a      	add	r2, r1
 800795c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007960:	fb02 f303 	mul.w	r3, r2, r3
 8007964:	7f3a      	ldrb	r2, [r7, #28]
 8007966:	f107 0120 	add.w	r1, r7, #32
 800796a:	440a      	add	r2, r1
 800796c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007970:	fb93 f3f2 	sdiv	r3, r3, r2
 8007974:	b29a      	uxth	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800797c:	7ffb      	ldrb	r3, [r7, #31]
 800797e:	7f7a      	ldrb	r2, [r7, #29]
 8007980:	f107 0120 	add.w	r1, r7, #32
 8007984:	440a      	add	r2, r1
 8007986:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800798a:	fb02 f303 	mul.w	r3, r2, r3
 800798e:	7f7a      	ldrb	r2, [r7, #29]
 8007990:	f107 0120 	add.w	r1, r7, #32
 8007994:	440a      	add	r2, r1
 8007996:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800799a:	fb93 f3f2 	sdiv	r3, r3, r2
 800799e:	b29a      	uxth	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80079a6:	bf00      	nop
 80079a8:	3724      	adds	r7, #36	; 0x24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	08009478 	.word	0x08009478
 80079b8:	08009480 	.word	0x08009480

080079bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079bc:	b084      	sub	sp, #16
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	f107 001c 	add.w	r0, r7, #28
 80079ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d120      	bne.n	8007a16 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	4b25      	ldr	r3, [pc, #148]	; (8007a7c <USB_CoreInit+0xc0>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80079f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d105      	bne.n	8007a0a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa4c 	bl	8007ea8 <USB_CoreReset>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]
 8007a14:	e01a      	b.n	8007a4c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa40 	bl	8007ea8 <USB_CoreReset>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a3e:	e005      	b.n	8007a4c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d10b      	bne.n	8007a6a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f043 0206 	orr.w	r2, r3, #6
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f043 0220 	orr.w	r2, r3, #32
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a76:	b004      	add	sp, #16
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	ffbdffbf 	.word	0xffbdffbf

08007a80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f023 0201 	bic.w	r2, r3, #1
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d106      	bne.n	8007ace <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60da      	str	r2, [r3, #12]
 8007acc:	e00b      	b.n	8007ae6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d106      	bne.n	8007ae2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60da      	str	r2, [r3, #12]
 8007ae0:	e001      	b.n	8007ae6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e003      	b.n	8007aee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007ae6:	2032      	movs	r0, #50	; 0x32
 8007ae8:	f7fa fc60 	bl	80023ac <HAL_Delay>

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007af8:	b084      	sub	sp, #16
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b12:	2300      	movs	r3, #0
 8007b14:	613b      	str	r3, [r7, #16]
 8007b16:	e009      	b.n	8007b2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	3340      	adds	r3, #64	; 0x40
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	2200      	movs	r2, #0
 8007b24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b0e      	cmp	r3, #14
 8007b30:	d9f2      	bls.n	8007b18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d11c      	bne.n	8007b72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b46:	f043 0302 	orr.w	r3, r3, #2
 8007b4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e005      	b.n	8007b7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b84:	461a      	mov	r2, r3
 8007b86:	2300      	movs	r3, #0
 8007b88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b90:	4619      	mov	r1, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b98:	461a      	mov	r2, r3
 8007b9a:	680b      	ldr	r3, [r1, #0]
 8007b9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d10c      	bne.n	8007bbe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f949 	bl	8007e44 <USB_SetDevSpeed>
 8007bb2:	e008      	b.n	8007bc6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f944 	bl	8007e44 <USB_SetDevSpeed>
 8007bbc:	e003      	b.n	8007bc6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bbe:	2103      	movs	r1, #3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f93f 	bl	8007e44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bc6:	2110      	movs	r1, #16
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8f3 	bl	8007db4 <USB_FlushTxFifo>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f911 	bl	8007e00 <USB_FlushRxFifo>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bee:	461a      	mov	r2, r3
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c06:	461a      	mov	r2, r3
 8007c08:	2300      	movs	r3, #0
 8007c0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	e043      	b.n	8007c9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c28:	d118      	bne.n	8007c5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	e013      	b.n	8007c6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c52:	461a      	mov	r2, r3
 8007c54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	e008      	b.n	8007c6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c68:	461a      	mov	r2, r3
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	3301      	adds	r3, #1
 8007c98:	613b      	str	r3, [r7, #16]
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d3b7      	bcc.n	8007c12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	e043      	b.n	8007d30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cbe:	d118      	bne.n	8007cf2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	e013      	b.n	8007d04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	e008      	b.n	8007d04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfe:	461a      	mov	r2, r3
 8007d00:	2300      	movs	r3, #0
 8007d02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d10:	461a      	mov	r2, r3
 8007d12:	2300      	movs	r3, #0
 8007d14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d22:	461a      	mov	r2, r3
 8007d24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d3b7      	bcc.n	8007ca8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d105      	bne.n	8007d6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	f043 0210 	orr.w	r2, r3, #16
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	699a      	ldr	r2, [r3, #24]
 8007d70:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <USB_DevInit+0x2b4>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	f043 0208 	orr.w	r2, r3, #8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d105      	bne.n	8007d9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	699a      	ldr	r2, [r3, #24]
 8007d94:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <USB_DevInit+0x2b8>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007da8:	b004      	add	sp, #16
 8007daa:	4770      	bx	lr
 8007dac:	803c3800 	.word	0x803c3800
 8007db0:	40000004 	.word	0x40000004

08007db4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	019b      	lsls	r3, r3, #6
 8007dc6:	f043 0220 	orr.w	r2, r3, #32
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <USB_FlushTxFifo+0x48>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d901      	bls.n	8007de0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e006      	b.n	8007dee <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	d0f0      	beq.n	8007dce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	00030d40 	.word	0x00030d40

08007e00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2210      	movs	r2, #16
 8007e10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <USB_FlushRxFifo+0x40>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d901      	bls.n	8007e24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e006      	b.n	8007e32 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f003 0310 	and.w	r3, r3, #16
 8007e2c:	2b10      	cmp	r3, #16
 8007e2e:	d0f0      	beq.n	8007e12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	00030d40 	.word	0x00030d40

08007e44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	68f9      	ldr	r1, [r7, #12]
 8007e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e64:	4313      	orrs	r3, r2
 8007e66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e90:	f043 0302 	orr.w	r3, r3, #2
 8007e94:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007e96:	2003      	movs	r0, #3
 8007e98:	f7fa fa88 	bl	80023ac <HAL_Delay>

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4a13      	ldr	r2, [pc, #76]	; (8007f0c <USB_CoreReset+0x64>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d901      	bls.n	8007ec6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e01b      	b.n	8007efe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	daf2      	bge.n	8007eb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f043 0201 	orr.w	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <USB_CoreReset+0x64>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d901      	bls.n	8007ef0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e006      	b.n	8007efe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d0f0      	beq.n	8007ede <USB_CoreReset+0x36>

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	00030d40 	.word	0x00030d40

08007f10 <__errno>:
 8007f10:	4b01      	ldr	r3, [pc, #4]	; (8007f18 <__errno+0x8>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	24000014 	.word	0x24000014

08007f1c <__libc_init_array>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4e0d      	ldr	r6, [pc, #52]	; (8007f54 <__libc_init_array+0x38>)
 8007f20:	4c0d      	ldr	r4, [pc, #52]	; (8007f58 <__libc_init_array+0x3c>)
 8007f22:	1ba4      	subs	r4, r4, r6
 8007f24:	10a4      	asrs	r4, r4, #2
 8007f26:	2500      	movs	r5, #0
 8007f28:	42a5      	cmp	r5, r4
 8007f2a:	d109      	bne.n	8007f40 <__libc_init_array+0x24>
 8007f2c:	4e0b      	ldr	r6, [pc, #44]	; (8007f5c <__libc_init_array+0x40>)
 8007f2e:	4c0c      	ldr	r4, [pc, #48]	; (8007f60 <__libc_init_array+0x44>)
 8007f30:	f001 fa74 	bl	800941c <_init>
 8007f34:	1ba4      	subs	r4, r4, r6
 8007f36:	10a4      	asrs	r4, r4, #2
 8007f38:	2500      	movs	r5, #0
 8007f3a:	42a5      	cmp	r5, r4
 8007f3c:	d105      	bne.n	8007f4a <__libc_init_array+0x2e>
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f44:	4798      	blx	r3
 8007f46:	3501      	adds	r5, #1
 8007f48:	e7ee      	b.n	8007f28 <__libc_init_array+0xc>
 8007f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f4e:	4798      	blx	r3
 8007f50:	3501      	adds	r5, #1
 8007f52:	e7f2      	b.n	8007f3a <__libc_init_array+0x1e>
 8007f54:	08009538 	.word	0x08009538
 8007f58:	08009538 	.word	0x08009538
 8007f5c:	08009538 	.word	0x08009538
 8007f60:	0800953c 	.word	0x0800953c

08007f64 <malloc>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	; (8007f70 <malloc+0xc>)
 8007f66:	4601      	mov	r1, r0
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f000 b86d 	b.w	8008048 <_malloc_r>
 8007f6e:	bf00      	nop
 8007f70:	24000014 	.word	0x24000014

08007f74 <free>:
 8007f74:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <free+0xc>)
 8007f76:	4601      	mov	r1, r0
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	f000 b817 	b.w	8007fac <_free_r>
 8007f7e:	bf00      	nop
 8007f80:	24000014 	.word	0x24000014

08007f84 <memcpy>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	1e43      	subs	r3, r0, #1
 8007f88:	440a      	add	r2, r1
 8007f8a:	4291      	cmp	r1, r2
 8007f8c:	d100      	bne.n	8007f90 <memcpy+0xc>
 8007f8e:	bd10      	pop	{r4, pc}
 8007f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f98:	e7f7      	b.n	8007f8a <memcpy+0x6>

08007f9a <memset>:
 8007f9a:	4402      	add	r2, r0
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d100      	bne.n	8007fa4 <memset+0xa>
 8007fa2:	4770      	bx	lr
 8007fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa8:	e7f9      	b.n	8007f9e <memset+0x4>
	...

08007fac <_free_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4605      	mov	r5, r0
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d045      	beq.n	8008040 <_free_r+0x94>
 8007fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb8:	1f0c      	subs	r4, r1, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bfb8      	it	lt
 8007fbe:	18e4      	addlt	r4, r4, r3
 8007fc0:	f000 f8cc 	bl	800815c <__malloc_lock>
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <_free_r+0x98>)
 8007fc6:	6813      	ldr	r3, [r2, #0]
 8007fc8:	4610      	mov	r0, r2
 8007fca:	b933      	cbnz	r3, 8007fda <_free_r+0x2e>
 8007fcc:	6063      	str	r3, [r4, #4]
 8007fce:	6014      	str	r4, [r2, #0]
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fd6:	f000 b8c2 	b.w	800815e <__malloc_unlock>
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	d90c      	bls.n	8007ff8 <_free_r+0x4c>
 8007fde:	6821      	ldr	r1, [r4, #0]
 8007fe0:	1862      	adds	r2, r4, r1
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	bf04      	itt	eq
 8007fe6:	681a      	ldreq	r2, [r3, #0]
 8007fe8:	685b      	ldreq	r3, [r3, #4]
 8007fea:	6063      	str	r3, [r4, #4]
 8007fec:	bf04      	itt	eq
 8007fee:	1852      	addeq	r2, r2, r1
 8007ff0:	6022      	streq	r2, [r4, #0]
 8007ff2:	6004      	str	r4, [r0, #0]
 8007ff4:	e7ec      	b.n	8007fd0 <_free_r+0x24>
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	b10a      	cbz	r2, 8008000 <_free_r+0x54>
 8007ffc:	42a2      	cmp	r2, r4
 8007ffe:	d9fa      	bls.n	8007ff6 <_free_r+0x4a>
 8008000:	6819      	ldr	r1, [r3, #0]
 8008002:	1858      	adds	r0, r3, r1
 8008004:	42a0      	cmp	r0, r4
 8008006:	d10b      	bne.n	8008020 <_free_r+0x74>
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	4401      	add	r1, r0
 800800c:	1858      	adds	r0, r3, r1
 800800e:	4282      	cmp	r2, r0
 8008010:	6019      	str	r1, [r3, #0]
 8008012:	d1dd      	bne.n	8007fd0 <_free_r+0x24>
 8008014:	6810      	ldr	r0, [r2, #0]
 8008016:	6852      	ldr	r2, [r2, #4]
 8008018:	605a      	str	r2, [r3, #4]
 800801a:	4401      	add	r1, r0
 800801c:	6019      	str	r1, [r3, #0]
 800801e:	e7d7      	b.n	8007fd0 <_free_r+0x24>
 8008020:	d902      	bls.n	8008028 <_free_r+0x7c>
 8008022:	230c      	movs	r3, #12
 8008024:	602b      	str	r3, [r5, #0]
 8008026:	e7d3      	b.n	8007fd0 <_free_r+0x24>
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	1821      	adds	r1, r4, r0
 800802c:	428a      	cmp	r2, r1
 800802e:	bf04      	itt	eq
 8008030:	6811      	ldreq	r1, [r2, #0]
 8008032:	6852      	ldreq	r2, [r2, #4]
 8008034:	6062      	str	r2, [r4, #4]
 8008036:	bf04      	itt	eq
 8008038:	1809      	addeq	r1, r1, r0
 800803a:	6021      	streq	r1, [r4, #0]
 800803c:	605c      	str	r4, [r3, #4]
 800803e:	e7c7      	b.n	8007fd0 <_free_r+0x24>
 8008040:	bd38      	pop	{r3, r4, r5, pc}
 8008042:	bf00      	nop
 8008044:	24000160 	.word	0x24000160

08008048 <_malloc_r>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	1ccd      	adds	r5, r1, #3
 800804c:	f025 0503 	bic.w	r5, r5, #3
 8008050:	3508      	adds	r5, #8
 8008052:	2d0c      	cmp	r5, #12
 8008054:	bf38      	it	cc
 8008056:	250c      	movcc	r5, #12
 8008058:	2d00      	cmp	r5, #0
 800805a:	4606      	mov	r6, r0
 800805c:	db01      	blt.n	8008062 <_malloc_r+0x1a>
 800805e:	42a9      	cmp	r1, r5
 8008060:	d903      	bls.n	800806a <_malloc_r+0x22>
 8008062:	230c      	movs	r3, #12
 8008064:	6033      	str	r3, [r6, #0]
 8008066:	2000      	movs	r0, #0
 8008068:	bd70      	pop	{r4, r5, r6, pc}
 800806a:	f000 f877 	bl	800815c <__malloc_lock>
 800806e:	4a21      	ldr	r2, [pc, #132]	; (80080f4 <_malloc_r+0xac>)
 8008070:	6814      	ldr	r4, [r2, #0]
 8008072:	4621      	mov	r1, r4
 8008074:	b991      	cbnz	r1, 800809c <_malloc_r+0x54>
 8008076:	4c20      	ldr	r4, [pc, #128]	; (80080f8 <_malloc_r+0xb0>)
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	b91b      	cbnz	r3, 8008084 <_malloc_r+0x3c>
 800807c:	4630      	mov	r0, r6
 800807e:	f000 f83d 	bl	80080fc <_sbrk_r>
 8008082:	6020      	str	r0, [r4, #0]
 8008084:	4629      	mov	r1, r5
 8008086:	4630      	mov	r0, r6
 8008088:	f000 f838 	bl	80080fc <_sbrk_r>
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	d124      	bne.n	80080da <_malloc_r+0x92>
 8008090:	230c      	movs	r3, #12
 8008092:	6033      	str	r3, [r6, #0]
 8008094:	4630      	mov	r0, r6
 8008096:	f000 f862 	bl	800815e <__malloc_unlock>
 800809a:	e7e4      	b.n	8008066 <_malloc_r+0x1e>
 800809c:	680b      	ldr	r3, [r1, #0]
 800809e:	1b5b      	subs	r3, r3, r5
 80080a0:	d418      	bmi.n	80080d4 <_malloc_r+0x8c>
 80080a2:	2b0b      	cmp	r3, #11
 80080a4:	d90f      	bls.n	80080c6 <_malloc_r+0x7e>
 80080a6:	600b      	str	r3, [r1, #0]
 80080a8:	50cd      	str	r5, [r1, r3]
 80080aa:	18cc      	adds	r4, r1, r3
 80080ac:	4630      	mov	r0, r6
 80080ae:	f000 f856 	bl	800815e <__malloc_unlock>
 80080b2:	f104 000b 	add.w	r0, r4, #11
 80080b6:	1d23      	adds	r3, r4, #4
 80080b8:	f020 0007 	bic.w	r0, r0, #7
 80080bc:	1ac3      	subs	r3, r0, r3
 80080be:	d0d3      	beq.n	8008068 <_malloc_r+0x20>
 80080c0:	425a      	negs	r2, r3
 80080c2:	50e2      	str	r2, [r4, r3]
 80080c4:	e7d0      	b.n	8008068 <_malloc_r+0x20>
 80080c6:	428c      	cmp	r4, r1
 80080c8:	684b      	ldr	r3, [r1, #4]
 80080ca:	bf16      	itet	ne
 80080cc:	6063      	strne	r3, [r4, #4]
 80080ce:	6013      	streq	r3, [r2, #0]
 80080d0:	460c      	movne	r4, r1
 80080d2:	e7eb      	b.n	80080ac <_malloc_r+0x64>
 80080d4:	460c      	mov	r4, r1
 80080d6:	6849      	ldr	r1, [r1, #4]
 80080d8:	e7cc      	b.n	8008074 <_malloc_r+0x2c>
 80080da:	1cc4      	adds	r4, r0, #3
 80080dc:	f024 0403 	bic.w	r4, r4, #3
 80080e0:	42a0      	cmp	r0, r4
 80080e2:	d005      	beq.n	80080f0 <_malloc_r+0xa8>
 80080e4:	1a21      	subs	r1, r4, r0
 80080e6:	4630      	mov	r0, r6
 80080e8:	f000 f808 	bl	80080fc <_sbrk_r>
 80080ec:	3001      	adds	r0, #1
 80080ee:	d0cf      	beq.n	8008090 <_malloc_r+0x48>
 80080f0:	6025      	str	r5, [r4, #0]
 80080f2:	e7db      	b.n	80080ac <_malloc_r+0x64>
 80080f4:	24000160 	.word	0x24000160
 80080f8:	24000164 	.word	0x24000164

080080fc <_sbrk_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4c06      	ldr	r4, [pc, #24]	; (8008118 <_sbrk_r+0x1c>)
 8008100:	2300      	movs	r3, #0
 8008102:	4605      	mov	r5, r0
 8008104:	4608      	mov	r0, r1
 8008106:	6023      	str	r3, [r4, #0]
 8008108:	f7f9 fe0e 	bl	8001d28 <_sbrk>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_sbrk_r+0x1a>
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	b103      	cbz	r3, 8008116 <_sbrk_r+0x1a>
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	2400077c 	.word	0x2400077c

0800811c <_vsiprintf_r>:
 800811c:	b500      	push	{lr}
 800811e:	b09b      	sub	sp, #108	; 0x6c
 8008120:	9100      	str	r1, [sp, #0]
 8008122:	9104      	str	r1, [sp, #16]
 8008124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008128:	9105      	str	r1, [sp, #20]
 800812a:	9102      	str	r1, [sp, #8]
 800812c:	4905      	ldr	r1, [pc, #20]	; (8008144 <_vsiprintf_r+0x28>)
 800812e:	9103      	str	r1, [sp, #12]
 8008130:	4669      	mov	r1, sp
 8008132:	f000 f86f 	bl	8008214 <_svfiprintf_r>
 8008136:	9b00      	ldr	r3, [sp, #0]
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
 800813c:	b01b      	add	sp, #108	; 0x6c
 800813e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008142:	bf00      	nop
 8008144:	ffff0208 	.word	0xffff0208

08008148 <vsiprintf>:
 8008148:	4613      	mov	r3, r2
 800814a:	460a      	mov	r2, r1
 800814c:	4601      	mov	r1, r0
 800814e:	4802      	ldr	r0, [pc, #8]	; (8008158 <vsiprintf+0x10>)
 8008150:	6800      	ldr	r0, [r0, #0]
 8008152:	f7ff bfe3 	b.w	800811c <_vsiprintf_r>
 8008156:	bf00      	nop
 8008158:	24000014 	.word	0x24000014

0800815c <__malloc_lock>:
 800815c:	4770      	bx	lr

0800815e <__malloc_unlock>:
 800815e:	4770      	bx	lr

08008160 <__ssputs_r>:
 8008160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008164:	688e      	ldr	r6, [r1, #8]
 8008166:	429e      	cmp	r6, r3
 8008168:	4682      	mov	sl, r0
 800816a:	460c      	mov	r4, r1
 800816c:	4690      	mov	r8, r2
 800816e:	4699      	mov	r9, r3
 8008170:	d837      	bhi.n	80081e2 <__ssputs_r+0x82>
 8008172:	898a      	ldrh	r2, [r1, #12]
 8008174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008178:	d031      	beq.n	80081de <__ssputs_r+0x7e>
 800817a:	6825      	ldr	r5, [r4, #0]
 800817c:	6909      	ldr	r1, [r1, #16]
 800817e:	1a6f      	subs	r7, r5, r1
 8008180:	6965      	ldr	r5, [r4, #20]
 8008182:	2302      	movs	r3, #2
 8008184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008188:	fb95 f5f3 	sdiv	r5, r5, r3
 800818c:	f109 0301 	add.w	r3, r9, #1
 8008190:	443b      	add	r3, r7
 8008192:	429d      	cmp	r5, r3
 8008194:	bf38      	it	cc
 8008196:	461d      	movcc	r5, r3
 8008198:	0553      	lsls	r3, r2, #21
 800819a:	d530      	bpl.n	80081fe <__ssputs_r+0x9e>
 800819c:	4629      	mov	r1, r5
 800819e:	f7ff ff53 	bl	8008048 <_malloc_r>
 80081a2:	4606      	mov	r6, r0
 80081a4:	b950      	cbnz	r0, 80081bc <__ssputs_r+0x5c>
 80081a6:	230c      	movs	r3, #12
 80081a8:	f8ca 3000 	str.w	r3, [sl]
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081bc:	463a      	mov	r2, r7
 80081be:	6921      	ldr	r1, [r4, #16]
 80081c0:	f7ff fee0 	bl	8007f84 <memcpy>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	6126      	str	r6, [r4, #16]
 80081d2:	6165      	str	r5, [r4, #20]
 80081d4:	443e      	add	r6, r7
 80081d6:	1bed      	subs	r5, r5, r7
 80081d8:	6026      	str	r6, [r4, #0]
 80081da:	60a5      	str	r5, [r4, #8]
 80081dc:	464e      	mov	r6, r9
 80081de:	454e      	cmp	r6, r9
 80081e0:	d900      	bls.n	80081e4 <__ssputs_r+0x84>
 80081e2:	464e      	mov	r6, r9
 80081e4:	4632      	mov	r2, r6
 80081e6:	4641      	mov	r1, r8
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	f000 fa93 	bl	8008714 <memmove>
 80081ee:	68a3      	ldr	r3, [r4, #8]
 80081f0:	1b9b      	subs	r3, r3, r6
 80081f2:	60a3      	str	r3, [r4, #8]
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	441e      	add	r6, r3
 80081f8:	6026      	str	r6, [r4, #0]
 80081fa:	2000      	movs	r0, #0
 80081fc:	e7dc      	b.n	80081b8 <__ssputs_r+0x58>
 80081fe:	462a      	mov	r2, r5
 8008200:	f000 faa1 	bl	8008746 <_realloc_r>
 8008204:	4606      	mov	r6, r0
 8008206:	2800      	cmp	r0, #0
 8008208:	d1e2      	bne.n	80081d0 <__ssputs_r+0x70>
 800820a:	6921      	ldr	r1, [r4, #16]
 800820c:	4650      	mov	r0, sl
 800820e:	f7ff fecd 	bl	8007fac <_free_r>
 8008212:	e7c8      	b.n	80081a6 <__ssputs_r+0x46>

08008214 <_svfiprintf_r>:
 8008214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008218:	461d      	mov	r5, r3
 800821a:	898b      	ldrh	r3, [r1, #12]
 800821c:	061f      	lsls	r7, r3, #24
 800821e:	b09d      	sub	sp, #116	; 0x74
 8008220:	4680      	mov	r8, r0
 8008222:	460c      	mov	r4, r1
 8008224:	4616      	mov	r6, r2
 8008226:	d50f      	bpl.n	8008248 <_svfiprintf_r+0x34>
 8008228:	690b      	ldr	r3, [r1, #16]
 800822a:	b96b      	cbnz	r3, 8008248 <_svfiprintf_r+0x34>
 800822c:	2140      	movs	r1, #64	; 0x40
 800822e:	f7ff ff0b 	bl	8008048 <_malloc_r>
 8008232:	6020      	str	r0, [r4, #0]
 8008234:	6120      	str	r0, [r4, #16]
 8008236:	b928      	cbnz	r0, 8008244 <_svfiprintf_r+0x30>
 8008238:	230c      	movs	r3, #12
 800823a:	f8c8 3000 	str.w	r3, [r8]
 800823e:	f04f 30ff 	mov.w	r0, #4294967295
 8008242:	e0c8      	b.n	80083d6 <_svfiprintf_r+0x1c2>
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	6163      	str	r3, [r4, #20]
 8008248:	2300      	movs	r3, #0
 800824a:	9309      	str	r3, [sp, #36]	; 0x24
 800824c:	2320      	movs	r3, #32
 800824e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008252:	2330      	movs	r3, #48	; 0x30
 8008254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008258:	9503      	str	r5, [sp, #12]
 800825a:	f04f 0b01 	mov.w	fp, #1
 800825e:	4637      	mov	r7, r6
 8008260:	463d      	mov	r5, r7
 8008262:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008266:	b10b      	cbz	r3, 800826c <_svfiprintf_r+0x58>
 8008268:	2b25      	cmp	r3, #37	; 0x25
 800826a:	d13e      	bne.n	80082ea <_svfiprintf_r+0xd6>
 800826c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008270:	d00b      	beq.n	800828a <_svfiprintf_r+0x76>
 8008272:	4653      	mov	r3, sl
 8008274:	4632      	mov	r2, r6
 8008276:	4621      	mov	r1, r4
 8008278:	4640      	mov	r0, r8
 800827a:	f7ff ff71 	bl	8008160 <__ssputs_r>
 800827e:	3001      	adds	r0, #1
 8008280:	f000 80a4 	beq.w	80083cc <_svfiprintf_r+0x1b8>
 8008284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008286:	4453      	add	r3, sl
 8008288:	9309      	str	r3, [sp, #36]	; 0x24
 800828a:	783b      	ldrb	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 809d 	beq.w	80083cc <_svfiprintf_r+0x1b8>
 8008292:	2300      	movs	r3, #0
 8008294:	f04f 32ff 	mov.w	r2, #4294967295
 8008298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	9307      	str	r3, [sp, #28]
 80082a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082a4:	931a      	str	r3, [sp, #104]	; 0x68
 80082a6:	462f      	mov	r7, r5
 80082a8:	2205      	movs	r2, #5
 80082aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80082ae:	4850      	ldr	r0, [pc, #320]	; (80083f0 <_svfiprintf_r+0x1dc>)
 80082b0:	f7f8 f816 	bl	80002e0 <memchr>
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	b9d0      	cbnz	r0, 80082ee <_svfiprintf_r+0xda>
 80082b8:	06d9      	lsls	r1, r3, #27
 80082ba:	bf44      	itt	mi
 80082bc:	2220      	movmi	r2, #32
 80082be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082c2:	071a      	lsls	r2, r3, #28
 80082c4:	bf44      	itt	mi
 80082c6:	222b      	movmi	r2, #43	; 0x2b
 80082c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082cc:	782a      	ldrb	r2, [r5, #0]
 80082ce:	2a2a      	cmp	r2, #42	; 0x2a
 80082d0:	d015      	beq.n	80082fe <_svfiprintf_r+0xea>
 80082d2:	9a07      	ldr	r2, [sp, #28]
 80082d4:	462f      	mov	r7, r5
 80082d6:	2000      	movs	r0, #0
 80082d8:	250a      	movs	r5, #10
 80082da:	4639      	mov	r1, r7
 80082dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082e0:	3b30      	subs	r3, #48	; 0x30
 80082e2:	2b09      	cmp	r3, #9
 80082e4:	d94d      	bls.n	8008382 <_svfiprintf_r+0x16e>
 80082e6:	b1b8      	cbz	r0, 8008318 <_svfiprintf_r+0x104>
 80082e8:	e00f      	b.n	800830a <_svfiprintf_r+0xf6>
 80082ea:	462f      	mov	r7, r5
 80082ec:	e7b8      	b.n	8008260 <_svfiprintf_r+0x4c>
 80082ee:	4a40      	ldr	r2, [pc, #256]	; (80083f0 <_svfiprintf_r+0x1dc>)
 80082f0:	1a80      	subs	r0, r0, r2
 80082f2:	fa0b f000 	lsl.w	r0, fp, r0
 80082f6:	4318      	orrs	r0, r3
 80082f8:	9004      	str	r0, [sp, #16]
 80082fa:	463d      	mov	r5, r7
 80082fc:	e7d3      	b.n	80082a6 <_svfiprintf_r+0x92>
 80082fe:	9a03      	ldr	r2, [sp, #12]
 8008300:	1d11      	adds	r1, r2, #4
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	9103      	str	r1, [sp, #12]
 8008306:	2a00      	cmp	r2, #0
 8008308:	db01      	blt.n	800830e <_svfiprintf_r+0xfa>
 800830a:	9207      	str	r2, [sp, #28]
 800830c:	e004      	b.n	8008318 <_svfiprintf_r+0x104>
 800830e:	4252      	negs	r2, r2
 8008310:	f043 0302 	orr.w	r3, r3, #2
 8008314:	9207      	str	r2, [sp, #28]
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	783b      	ldrb	r3, [r7, #0]
 800831a:	2b2e      	cmp	r3, #46	; 0x2e
 800831c:	d10c      	bne.n	8008338 <_svfiprintf_r+0x124>
 800831e:	787b      	ldrb	r3, [r7, #1]
 8008320:	2b2a      	cmp	r3, #42	; 0x2a
 8008322:	d133      	bne.n	800838c <_svfiprintf_r+0x178>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	1d1a      	adds	r2, r3, #4
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	9203      	str	r2, [sp, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	bfb8      	it	lt
 8008330:	f04f 33ff 	movlt.w	r3, #4294967295
 8008334:	3702      	adds	r7, #2
 8008336:	9305      	str	r3, [sp, #20]
 8008338:	4d2e      	ldr	r5, [pc, #184]	; (80083f4 <_svfiprintf_r+0x1e0>)
 800833a:	7839      	ldrb	r1, [r7, #0]
 800833c:	2203      	movs	r2, #3
 800833e:	4628      	mov	r0, r5
 8008340:	f7f7 ffce 	bl	80002e0 <memchr>
 8008344:	b138      	cbz	r0, 8008356 <_svfiprintf_r+0x142>
 8008346:	2340      	movs	r3, #64	; 0x40
 8008348:	1b40      	subs	r0, r0, r5
 800834a:	fa03 f000 	lsl.w	r0, r3, r0
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	4303      	orrs	r3, r0
 8008352:	3701      	adds	r7, #1
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	7839      	ldrb	r1, [r7, #0]
 8008358:	4827      	ldr	r0, [pc, #156]	; (80083f8 <_svfiprintf_r+0x1e4>)
 800835a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800835e:	2206      	movs	r2, #6
 8008360:	1c7e      	adds	r6, r7, #1
 8008362:	f7f7 ffbd 	bl	80002e0 <memchr>
 8008366:	2800      	cmp	r0, #0
 8008368:	d038      	beq.n	80083dc <_svfiprintf_r+0x1c8>
 800836a:	4b24      	ldr	r3, [pc, #144]	; (80083fc <_svfiprintf_r+0x1e8>)
 800836c:	bb13      	cbnz	r3, 80083b4 <_svfiprintf_r+0x1a0>
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	3307      	adds	r3, #7
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	3308      	adds	r3, #8
 8008378:	9303      	str	r3, [sp, #12]
 800837a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837c:	444b      	add	r3, r9
 800837e:	9309      	str	r3, [sp, #36]	; 0x24
 8008380:	e76d      	b.n	800825e <_svfiprintf_r+0x4a>
 8008382:	fb05 3202 	mla	r2, r5, r2, r3
 8008386:	2001      	movs	r0, #1
 8008388:	460f      	mov	r7, r1
 800838a:	e7a6      	b.n	80082da <_svfiprintf_r+0xc6>
 800838c:	2300      	movs	r3, #0
 800838e:	3701      	adds	r7, #1
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	4619      	mov	r1, r3
 8008394:	250a      	movs	r5, #10
 8008396:	4638      	mov	r0, r7
 8008398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800839c:	3a30      	subs	r2, #48	; 0x30
 800839e:	2a09      	cmp	r2, #9
 80083a0:	d903      	bls.n	80083aa <_svfiprintf_r+0x196>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0c8      	beq.n	8008338 <_svfiprintf_r+0x124>
 80083a6:	9105      	str	r1, [sp, #20]
 80083a8:	e7c6      	b.n	8008338 <_svfiprintf_r+0x124>
 80083aa:	fb05 2101 	mla	r1, r5, r1, r2
 80083ae:	2301      	movs	r3, #1
 80083b0:	4607      	mov	r7, r0
 80083b2:	e7f0      	b.n	8008396 <_svfiprintf_r+0x182>
 80083b4:	ab03      	add	r3, sp, #12
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	4622      	mov	r2, r4
 80083ba:	4b11      	ldr	r3, [pc, #68]	; (8008400 <_svfiprintf_r+0x1ec>)
 80083bc:	a904      	add	r1, sp, #16
 80083be:	4640      	mov	r0, r8
 80083c0:	f3af 8000 	nop.w
 80083c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80083c8:	4681      	mov	r9, r0
 80083ca:	d1d6      	bne.n	800837a <_svfiprintf_r+0x166>
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	065b      	lsls	r3, r3, #25
 80083d0:	f53f af35 	bmi.w	800823e <_svfiprintf_r+0x2a>
 80083d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083d6:	b01d      	add	sp, #116	; 0x74
 80083d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083dc:	ab03      	add	r3, sp, #12
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	4622      	mov	r2, r4
 80083e2:	4b07      	ldr	r3, [pc, #28]	; (8008400 <_svfiprintf_r+0x1ec>)
 80083e4:	a904      	add	r1, sp, #16
 80083e6:	4640      	mov	r0, r8
 80083e8:	f000 f882 	bl	80084f0 <_printf_i>
 80083ec:	e7ea      	b.n	80083c4 <_svfiprintf_r+0x1b0>
 80083ee:	bf00      	nop
 80083f0:	080094b0 	.word	0x080094b0
 80083f4:	080094b6 	.word	0x080094b6
 80083f8:	080094ba 	.word	0x080094ba
 80083fc:	00000000 	.word	0x00000000
 8008400:	08008161 	.word	0x08008161

08008404 <_printf_common>:
 8008404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008408:	4691      	mov	r9, r2
 800840a:	461f      	mov	r7, r3
 800840c:	688a      	ldr	r2, [r1, #8]
 800840e:	690b      	ldr	r3, [r1, #16]
 8008410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008414:	4293      	cmp	r3, r2
 8008416:	bfb8      	it	lt
 8008418:	4613      	movlt	r3, r2
 800841a:	f8c9 3000 	str.w	r3, [r9]
 800841e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008422:	4606      	mov	r6, r0
 8008424:	460c      	mov	r4, r1
 8008426:	b112      	cbz	r2, 800842e <_printf_common+0x2a>
 8008428:	3301      	adds	r3, #1
 800842a:	f8c9 3000 	str.w	r3, [r9]
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	0699      	lsls	r1, r3, #26
 8008432:	bf42      	ittt	mi
 8008434:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008438:	3302      	addmi	r3, #2
 800843a:	f8c9 3000 	strmi.w	r3, [r9]
 800843e:	6825      	ldr	r5, [r4, #0]
 8008440:	f015 0506 	ands.w	r5, r5, #6
 8008444:	d107      	bne.n	8008456 <_printf_common+0x52>
 8008446:	f104 0a19 	add.w	sl, r4, #25
 800844a:	68e3      	ldr	r3, [r4, #12]
 800844c:	f8d9 2000 	ldr.w	r2, [r9]
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	42ab      	cmp	r3, r5
 8008454:	dc28      	bgt.n	80084a8 <_printf_common+0xa4>
 8008456:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	3300      	adds	r3, #0
 800845e:	bf18      	it	ne
 8008460:	2301      	movne	r3, #1
 8008462:	0692      	lsls	r2, r2, #26
 8008464:	d42d      	bmi.n	80084c2 <_printf_common+0xbe>
 8008466:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800846a:	4639      	mov	r1, r7
 800846c:	4630      	mov	r0, r6
 800846e:	47c0      	blx	r8
 8008470:	3001      	adds	r0, #1
 8008472:	d020      	beq.n	80084b6 <_printf_common+0xb2>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	68e5      	ldr	r5, [r4, #12]
 8008478:	f8d9 2000 	ldr.w	r2, [r9]
 800847c:	f003 0306 	and.w	r3, r3, #6
 8008480:	2b04      	cmp	r3, #4
 8008482:	bf08      	it	eq
 8008484:	1aad      	subeq	r5, r5, r2
 8008486:	68a3      	ldr	r3, [r4, #8]
 8008488:	6922      	ldr	r2, [r4, #16]
 800848a:	bf0c      	ite	eq
 800848c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008490:	2500      	movne	r5, #0
 8008492:	4293      	cmp	r3, r2
 8008494:	bfc4      	itt	gt
 8008496:	1a9b      	subgt	r3, r3, r2
 8008498:	18ed      	addgt	r5, r5, r3
 800849a:	f04f 0900 	mov.w	r9, #0
 800849e:	341a      	adds	r4, #26
 80084a0:	454d      	cmp	r5, r9
 80084a2:	d11a      	bne.n	80084da <_printf_common+0xd6>
 80084a4:	2000      	movs	r0, #0
 80084a6:	e008      	b.n	80084ba <_printf_common+0xb6>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4652      	mov	r2, sl
 80084ac:	4639      	mov	r1, r7
 80084ae:	4630      	mov	r0, r6
 80084b0:	47c0      	blx	r8
 80084b2:	3001      	adds	r0, #1
 80084b4:	d103      	bne.n	80084be <_printf_common+0xba>
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084be:	3501      	adds	r5, #1
 80084c0:	e7c3      	b.n	800844a <_printf_common+0x46>
 80084c2:	18e1      	adds	r1, r4, r3
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	2030      	movs	r0, #48	; 0x30
 80084c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084cc:	4422      	add	r2, r4
 80084ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084d6:	3302      	adds	r3, #2
 80084d8:	e7c5      	b.n	8008466 <_printf_common+0x62>
 80084da:	2301      	movs	r3, #1
 80084dc:	4622      	mov	r2, r4
 80084de:	4639      	mov	r1, r7
 80084e0:	4630      	mov	r0, r6
 80084e2:	47c0      	blx	r8
 80084e4:	3001      	adds	r0, #1
 80084e6:	d0e6      	beq.n	80084b6 <_printf_common+0xb2>
 80084e8:	f109 0901 	add.w	r9, r9, #1
 80084ec:	e7d8      	b.n	80084a0 <_printf_common+0x9c>
	...

080084f0 <_printf_i>:
 80084f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084f8:	460c      	mov	r4, r1
 80084fa:	7e09      	ldrb	r1, [r1, #24]
 80084fc:	b085      	sub	sp, #20
 80084fe:	296e      	cmp	r1, #110	; 0x6e
 8008500:	4617      	mov	r7, r2
 8008502:	4606      	mov	r6, r0
 8008504:	4698      	mov	r8, r3
 8008506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008508:	f000 80b3 	beq.w	8008672 <_printf_i+0x182>
 800850c:	d822      	bhi.n	8008554 <_printf_i+0x64>
 800850e:	2963      	cmp	r1, #99	; 0x63
 8008510:	d036      	beq.n	8008580 <_printf_i+0x90>
 8008512:	d80a      	bhi.n	800852a <_printf_i+0x3a>
 8008514:	2900      	cmp	r1, #0
 8008516:	f000 80b9 	beq.w	800868c <_printf_i+0x19c>
 800851a:	2958      	cmp	r1, #88	; 0x58
 800851c:	f000 8083 	beq.w	8008626 <_printf_i+0x136>
 8008520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008524:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008528:	e032      	b.n	8008590 <_printf_i+0xa0>
 800852a:	2964      	cmp	r1, #100	; 0x64
 800852c:	d001      	beq.n	8008532 <_printf_i+0x42>
 800852e:	2969      	cmp	r1, #105	; 0x69
 8008530:	d1f6      	bne.n	8008520 <_printf_i+0x30>
 8008532:	6820      	ldr	r0, [r4, #0]
 8008534:	6813      	ldr	r3, [r2, #0]
 8008536:	0605      	lsls	r5, r0, #24
 8008538:	f103 0104 	add.w	r1, r3, #4
 800853c:	d52a      	bpl.n	8008594 <_printf_i+0xa4>
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	da03      	bge.n	800854e <_printf_i+0x5e>
 8008546:	222d      	movs	r2, #45	; 0x2d
 8008548:	425b      	negs	r3, r3
 800854a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800854e:	486f      	ldr	r0, [pc, #444]	; (800870c <_printf_i+0x21c>)
 8008550:	220a      	movs	r2, #10
 8008552:	e039      	b.n	80085c8 <_printf_i+0xd8>
 8008554:	2973      	cmp	r1, #115	; 0x73
 8008556:	f000 809d 	beq.w	8008694 <_printf_i+0x1a4>
 800855a:	d808      	bhi.n	800856e <_printf_i+0x7e>
 800855c:	296f      	cmp	r1, #111	; 0x6f
 800855e:	d020      	beq.n	80085a2 <_printf_i+0xb2>
 8008560:	2970      	cmp	r1, #112	; 0x70
 8008562:	d1dd      	bne.n	8008520 <_printf_i+0x30>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	f043 0320 	orr.w	r3, r3, #32
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	e003      	b.n	8008576 <_printf_i+0x86>
 800856e:	2975      	cmp	r1, #117	; 0x75
 8008570:	d017      	beq.n	80085a2 <_printf_i+0xb2>
 8008572:	2978      	cmp	r1, #120	; 0x78
 8008574:	d1d4      	bne.n	8008520 <_printf_i+0x30>
 8008576:	2378      	movs	r3, #120	; 0x78
 8008578:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800857c:	4864      	ldr	r0, [pc, #400]	; (8008710 <_printf_i+0x220>)
 800857e:	e055      	b.n	800862c <_printf_i+0x13c>
 8008580:	6813      	ldr	r3, [r2, #0]
 8008582:	1d19      	adds	r1, r3, #4
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6011      	str	r1, [r2, #0]
 8008588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800858c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008590:	2301      	movs	r3, #1
 8008592:	e08c      	b.n	80086ae <_printf_i+0x1be>
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6011      	str	r1, [r2, #0]
 8008598:	f010 0f40 	tst.w	r0, #64	; 0x40
 800859c:	bf18      	it	ne
 800859e:	b21b      	sxthne	r3, r3
 80085a0:	e7cf      	b.n	8008542 <_printf_i+0x52>
 80085a2:	6813      	ldr	r3, [r2, #0]
 80085a4:	6825      	ldr	r5, [r4, #0]
 80085a6:	1d18      	adds	r0, r3, #4
 80085a8:	6010      	str	r0, [r2, #0]
 80085aa:	0628      	lsls	r0, r5, #24
 80085ac:	d501      	bpl.n	80085b2 <_printf_i+0xc2>
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	e002      	b.n	80085b8 <_printf_i+0xc8>
 80085b2:	0668      	lsls	r0, r5, #25
 80085b4:	d5fb      	bpl.n	80085ae <_printf_i+0xbe>
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	4854      	ldr	r0, [pc, #336]	; (800870c <_printf_i+0x21c>)
 80085ba:	296f      	cmp	r1, #111	; 0x6f
 80085bc:	bf14      	ite	ne
 80085be:	220a      	movne	r2, #10
 80085c0:	2208      	moveq	r2, #8
 80085c2:	2100      	movs	r1, #0
 80085c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085c8:	6865      	ldr	r5, [r4, #4]
 80085ca:	60a5      	str	r5, [r4, #8]
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	f2c0 8095 	blt.w	80086fc <_printf_i+0x20c>
 80085d2:	6821      	ldr	r1, [r4, #0]
 80085d4:	f021 0104 	bic.w	r1, r1, #4
 80085d8:	6021      	str	r1, [r4, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d13d      	bne.n	800865a <_printf_i+0x16a>
 80085de:	2d00      	cmp	r5, #0
 80085e0:	f040 808e 	bne.w	8008700 <_printf_i+0x210>
 80085e4:	4665      	mov	r5, ip
 80085e6:	2a08      	cmp	r2, #8
 80085e8:	d10b      	bne.n	8008602 <_printf_i+0x112>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	07db      	lsls	r3, r3, #31
 80085ee:	d508      	bpl.n	8008602 <_printf_i+0x112>
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	6862      	ldr	r2, [r4, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	bfde      	ittt	le
 80085f8:	2330      	movle	r3, #48	; 0x30
 80085fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008602:	ebac 0305 	sub.w	r3, ip, r5
 8008606:	6123      	str	r3, [r4, #16]
 8008608:	f8cd 8000 	str.w	r8, [sp]
 800860c:	463b      	mov	r3, r7
 800860e:	aa03      	add	r2, sp, #12
 8008610:	4621      	mov	r1, r4
 8008612:	4630      	mov	r0, r6
 8008614:	f7ff fef6 	bl	8008404 <_printf_common>
 8008618:	3001      	adds	r0, #1
 800861a:	d14d      	bne.n	80086b8 <_printf_i+0x1c8>
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	b005      	add	sp, #20
 8008622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008626:	4839      	ldr	r0, [pc, #228]	; (800870c <_printf_i+0x21c>)
 8008628:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800862c:	6813      	ldr	r3, [r2, #0]
 800862e:	6821      	ldr	r1, [r4, #0]
 8008630:	1d1d      	adds	r5, r3, #4
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6015      	str	r5, [r2, #0]
 8008636:	060a      	lsls	r2, r1, #24
 8008638:	d50b      	bpl.n	8008652 <_printf_i+0x162>
 800863a:	07ca      	lsls	r2, r1, #31
 800863c:	bf44      	itt	mi
 800863e:	f041 0120 	orrmi.w	r1, r1, #32
 8008642:	6021      	strmi	r1, [r4, #0]
 8008644:	b91b      	cbnz	r3, 800864e <_printf_i+0x15e>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	f022 0220 	bic.w	r2, r2, #32
 800864c:	6022      	str	r2, [r4, #0]
 800864e:	2210      	movs	r2, #16
 8008650:	e7b7      	b.n	80085c2 <_printf_i+0xd2>
 8008652:	064d      	lsls	r5, r1, #25
 8008654:	bf48      	it	mi
 8008656:	b29b      	uxthmi	r3, r3
 8008658:	e7ef      	b.n	800863a <_printf_i+0x14a>
 800865a:	4665      	mov	r5, ip
 800865c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008660:	fb02 3311 	mls	r3, r2, r1, r3
 8008664:	5cc3      	ldrb	r3, [r0, r3]
 8008666:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800866a:	460b      	mov	r3, r1
 800866c:	2900      	cmp	r1, #0
 800866e:	d1f5      	bne.n	800865c <_printf_i+0x16c>
 8008670:	e7b9      	b.n	80085e6 <_printf_i+0xf6>
 8008672:	6813      	ldr	r3, [r2, #0]
 8008674:	6825      	ldr	r5, [r4, #0]
 8008676:	6961      	ldr	r1, [r4, #20]
 8008678:	1d18      	adds	r0, r3, #4
 800867a:	6010      	str	r0, [r2, #0]
 800867c:	0628      	lsls	r0, r5, #24
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	d501      	bpl.n	8008686 <_printf_i+0x196>
 8008682:	6019      	str	r1, [r3, #0]
 8008684:	e002      	b.n	800868c <_printf_i+0x19c>
 8008686:	066a      	lsls	r2, r5, #25
 8008688:	d5fb      	bpl.n	8008682 <_printf_i+0x192>
 800868a:	8019      	strh	r1, [r3, #0]
 800868c:	2300      	movs	r3, #0
 800868e:	6123      	str	r3, [r4, #16]
 8008690:	4665      	mov	r5, ip
 8008692:	e7b9      	b.n	8008608 <_printf_i+0x118>
 8008694:	6813      	ldr	r3, [r2, #0]
 8008696:	1d19      	adds	r1, r3, #4
 8008698:	6011      	str	r1, [r2, #0]
 800869a:	681d      	ldr	r5, [r3, #0]
 800869c:	6862      	ldr	r2, [r4, #4]
 800869e:	2100      	movs	r1, #0
 80086a0:	4628      	mov	r0, r5
 80086a2:	f7f7 fe1d 	bl	80002e0 <memchr>
 80086a6:	b108      	cbz	r0, 80086ac <_printf_i+0x1bc>
 80086a8:	1b40      	subs	r0, r0, r5
 80086aa:	6060      	str	r0, [r4, #4]
 80086ac:	6863      	ldr	r3, [r4, #4]
 80086ae:	6123      	str	r3, [r4, #16]
 80086b0:	2300      	movs	r3, #0
 80086b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b6:	e7a7      	b.n	8008608 <_printf_i+0x118>
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4639      	mov	r1, r7
 80086be:	4630      	mov	r0, r6
 80086c0:	47c0      	blx	r8
 80086c2:	3001      	adds	r0, #1
 80086c4:	d0aa      	beq.n	800861c <_printf_i+0x12c>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	079b      	lsls	r3, r3, #30
 80086ca:	d413      	bmi.n	80086f4 <_printf_i+0x204>
 80086cc:	68e0      	ldr	r0, [r4, #12]
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	4298      	cmp	r0, r3
 80086d2:	bfb8      	it	lt
 80086d4:	4618      	movlt	r0, r3
 80086d6:	e7a3      	b.n	8008620 <_printf_i+0x130>
 80086d8:	2301      	movs	r3, #1
 80086da:	464a      	mov	r2, r9
 80086dc:	4639      	mov	r1, r7
 80086de:	4630      	mov	r0, r6
 80086e0:	47c0      	blx	r8
 80086e2:	3001      	adds	r0, #1
 80086e4:	d09a      	beq.n	800861c <_printf_i+0x12c>
 80086e6:	3501      	adds	r5, #1
 80086e8:	68e3      	ldr	r3, [r4, #12]
 80086ea:	9a03      	ldr	r2, [sp, #12]
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	42ab      	cmp	r3, r5
 80086f0:	dcf2      	bgt.n	80086d8 <_printf_i+0x1e8>
 80086f2:	e7eb      	b.n	80086cc <_printf_i+0x1dc>
 80086f4:	2500      	movs	r5, #0
 80086f6:	f104 0919 	add.w	r9, r4, #25
 80086fa:	e7f5      	b.n	80086e8 <_printf_i+0x1f8>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1ac      	bne.n	800865a <_printf_i+0x16a>
 8008700:	7803      	ldrb	r3, [r0, #0]
 8008702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008706:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800870a:	e76c      	b.n	80085e6 <_printf_i+0xf6>
 800870c:	080094c1 	.word	0x080094c1
 8008710:	080094d2 	.word	0x080094d2

08008714 <memmove>:
 8008714:	4288      	cmp	r0, r1
 8008716:	b510      	push	{r4, lr}
 8008718:	eb01 0302 	add.w	r3, r1, r2
 800871c:	d807      	bhi.n	800872e <memmove+0x1a>
 800871e:	1e42      	subs	r2, r0, #1
 8008720:	4299      	cmp	r1, r3
 8008722:	d00a      	beq.n	800873a <memmove+0x26>
 8008724:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008728:	f802 4f01 	strb.w	r4, [r2, #1]!
 800872c:	e7f8      	b.n	8008720 <memmove+0xc>
 800872e:	4283      	cmp	r3, r0
 8008730:	d9f5      	bls.n	800871e <memmove+0xa>
 8008732:	1881      	adds	r1, r0, r2
 8008734:	1ad2      	subs	r2, r2, r3
 8008736:	42d3      	cmn	r3, r2
 8008738:	d100      	bne.n	800873c <memmove+0x28>
 800873a:	bd10      	pop	{r4, pc}
 800873c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008740:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008744:	e7f7      	b.n	8008736 <memmove+0x22>

08008746 <_realloc_r>:
 8008746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008748:	4607      	mov	r7, r0
 800874a:	4614      	mov	r4, r2
 800874c:	460e      	mov	r6, r1
 800874e:	b921      	cbnz	r1, 800875a <_realloc_r+0x14>
 8008750:	4611      	mov	r1, r2
 8008752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008756:	f7ff bc77 	b.w	8008048 <_malloc_r>
 800875a:	b922      	cbnz	r2, 8008766 <_realloc_r+0x20>
 800875c:	f7ff fc26 	bl	8007fac <_free_r>
 8008760:	4625      	mov	r5, r4
 8008762:	4628      	mov	r0, r5
 8008764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008766:	f000 f814 	bl	8008792 <_malloc_usable_size_r>
 800876a:	42a0      	cmp	r0, r4
 800876c:	d20f      	bcs.n	800878e <_realloc_r+0x48>
 800876e:	4621      	mov	r1, r4
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff fc69 	bl	8008048 <_malloc_r>
 8008776:	4605      	mov	r5, r0
 8008778:	2800      	cmp	r0, #0
 800877a:	d0f2      	beq.n	8008762 <_realloc_r+0x1c>
 800877c:	4631      	mov	r1, r6
 800877e:	4622      	mov	r2, r4
 8008780:	f7ff fc00 	bl	8007f84 <memcpy>
 8008784:	4631      	mov	r1, r6
 8008786:	4638      	mov	r0, r7
 8008788:	f7ff fc10 	bl	8007fac <_free_r>
 800878c:	e7e9      	b.n	8008762 <_realloc_r+0x1c>
 800878e:	4635      	mov	r5, r6
 8008790:	e7e7      	b.n	8008762 <_realloc_r+0x1c>

08008792 <_malloc_usable_size_r>:
 8008792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008796:	1f18      	subs	r0, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	bfbc      	itt	lt
 800879c:	580b      	ldrlt	r3, [r1, r0]
 800879e:	18c0      	addlt	r0, r0, r3
 80087a0:	4770      	bx	lr
 80087a2:	0000      	movs	r0, r0
 80087a4:	0000      	movs	r0, r0
	...

080087a8 <pow>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	ed2d 8b0a 	vpush	{d8-d12}
 80087ae:	eeb0 9b40 	vmov.f64	d9, d0
 80087b2:	eeb0 8b41 	vmov.f64	d8, d1
 80087b6:	4c8c      	ldr	r4, [pc, #560]	; (80089e8 <pow+0x240>)
 80087b8:	b08a      	sub	sp, #40	; 0x28
 80087ba:	f000 f971 	bl	8008aa0 <__ieee754_pow>
 80087be:	f994 3000 	ldrsb.w	r3, [r4]
 80087c2:	eeb0 ab40 	vmov.f64	d10, d0
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	4626      	mov	r6, r4
 80087ca:	d04b      	beq.n	8008864 <pow+0xbc>
 80087cc:	eeb4 8b48 	vcmp.f64	d8, d8
 80087d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d4:	d646      	bvs.n	8008864 <pow+0xbc>
 80087d6:	eeb4 9b49 	vcmp.f64	d9, d9
 80087da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087de:	d719      	bvc.n	8008814 <pow+0x6c>
 80087e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80087e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e8:	d13c      	bne.n	8008864 <pow+0xbc>
 80087ea:	2201      	movs	r2, #1
 80087ec:	9200      	str	r2, [sp, #0]
 80087ee:	497f      	ldr	r1, [pc, #508]	; (80089ec <pow+0x244>)
 80087f0:	4a7f      	ldr	r2, [pc, #508]	; (80089f0 <pow+0x248>)
 80087f2:	9201      	str	r2, [sp, #4]
 80087f4:	2000      	movs	r0, #0
 80087f6:	2200      	movs	r2, #0
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	9208      	str	r2, [sp, #32]
 80087fc:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008800:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008804:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008808:	d02a      	beq.n	8008860 <pow+0xb8>
 800880a:	4668      	mov	r0, sp
 800880c:	f000 fce2 	bl	80091d4 <matherr>
 8008810:	bb00      	cbnz	r0, 8008854 <pow+0xac>
 8008812:	e04e      	b.n	80088b2 <pow+0x10a>
 8008814:	ed9f bb72 	vldr	d11, [pc, #456]	; 80089e0 <pow+0x238>
 8008818:	eeb4 9b4b 	vcmp.f64	d9, d11
 800881c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008820:	eeb0 cb4b 	vmov.f64	d12, d11
 8008824:	d14a      	bne.n	80088bc <pow+0x114>
 8008826:	eeb4 8b4b 	vcmp.f64	d8, d11
 800882a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882e:	d11f      	bne.n	8008870 <pow+0xc8>
 8008830:	2201      	movs	r2, #1
 8008832:	9200      	str	r2, [sp, #0]
 8008834:	4a6e      	ldr	r2, [pc, #440]	; (80089f0 <pow+0x248>)
 8008836:	9201      	str	r2, [sp, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	9208      	str	r2, [sp, #32]
 800883c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008840:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008844:	ed8d bb06 	vstr	d11, [sp, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0de      	beq.n	800880a <pow+0x62>
 800884c:	4b67      	ldr	r3, [pc, #412]	; (80089ec <pow+0x244>)
 800884e:	2200      	movs	r2, #0
 8008850:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008854:	9b08      	ldr	r3, [sp, #32]
 8008856:	b11b      	cbz	r3, 8008860 <pow+0xb8>
 8008858:	f7ff fb5a 	bl	8007f10 <__errno>
 800885c:	9b08      	ldr	r3, [sp, #32]
 800885e:	6003      	str	r3, [r0, #0]
 8008860:	ed9d ab06 	vldr	d10, [sp, #24]
 8008864:	eeb0 0b4a 	vmov.f64	d0, d10
 8008868:	b00a      	add	sp, #40	; 0x28
 800886a:	ecbd 8b0a 	vpop	{d8-d12}
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	eeb0 0b48 	vmov.f64	d0, d8
 8008874:	f000 fca6 	bl	80091c4 <finite>
 8008878:	2800      	cmp	r0, #0
 800887a:	d0f3      	beq.n	8008864 <pow+0xbc>
 800887c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8008880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008884:	d5ee      	bpl.n	8008864 <pow+0xbc>
 8008886:	2301      	movs	r3, #1
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	4b59      	ldr	r3, [pc, #356]	; (80089f0 <pow+0x248>)
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	2300      	movs	r3, #0
 8008890:	9308      	str	r3, [sp, #32]
 8008892:	f994 3000 	ldrsb.w	r3, [r4]
 8008896:	ed8d 9b02 	vstr	d9, [sp, #8]
 800889a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800889e:	b913      	cbnz	r3, 80088a6 <pow+0xfe>
 80088a0:	ed8d bb06 	vstr	d11, [sp, #24]
 80088a4:	e7b1      	b.n	800880a <pow+0x62>
 80088a6:	4953      	ldr	r1, [pc, #332]	; (80089f4 <pow+0x24c>)
 80088a8:	2000      	movs	r0, #0
 80088aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d1ab      	bne.n	800880a <pow+0x62>
 80088b2:	f7ff fb2d 	bl	8007f10 <__errno>
 80088b6:	2321      	movs	r3, #33	; 0x21
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	e7cb      	b.n	8008854 <pow+0xac>
 80088bc:	f000 fc82 	bl	80091c4 <finite>
 80088c0:	4605      	mov	r5, r0
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d164      	bne.n	8008990 <pow+0x1e8>
 80088c6:	eeb0 0b49 	vmov.f64	d0, d9
 80088ca:	f000 fc7b 	bl	80091c4 <finite>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d05e      	beq.n	8008990 <pow+0x1e8>
 80088d2:	eeb0 0b48 	vmov.f64	d0, d8
 80088d6:	f000 fc75 	bl	80091c4 <finite>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d058      	beq.n	8008990 <pow+0x1e8>
 80088de:	eeb4 ab4a 	vcmp.f64	d10, d10
 80088e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e6:	f994 3000 	ldrsb.w	r3, [r4]
 80088ea:	4a41      	ldr	r2, [pc, #260]	; (80089f0 <pow+0x248>)
 80088ec:	d70e      	bvc.n	800890c <pow+0x164>
 80088ee:	2101      	movs	r1, #1
 80088f0:	e9cd 1200 	strd	r1, r2, [sp]
 80088f4:	9508      	str	r5, [sp, #32]
 80088f6:	ed8d 9b02 	vstr	d9, [sp, #8]
 80088fa:	ed8d 8b04 	vstr	d8, [sp, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0ce      	beq.n	80088a0 <pow+0xf8>
 8008902:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8008906:	ed8d 7b06 	vstr	d7, [sp, #24]
 800890a:	e7d0      	b.n	80088ae <pow+0x106>
 800890c:	2103      	movs	r1, #3
 800890e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008912:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008916:	ee28 8b07 	vmul.f64	d8, d8, d7
 800891a:	e9cd 1200 	strd	r1, r2, [sp]
 800891e:	9508      	str	r5, [sp, #32]
 8008920:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008924:	b9fb      	cbnz	r3, 8008966 <pow+0x1be>
 8008926:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800892a:	4b33      	ldr	r3, [pc, #204]	; (80089f8 <pow+0x250>)
 800892c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008934:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008938:	d54b      	bpl.n	80089d2 <pow+0x22a>
 800893a:	eeb0 0b48 	vmov.f64	d0, d8
 800893e:	f000 fc53 	bl	80091e8 <rint>
 8008942:	eeb4 0b48 	vcmp.f64	d0, d8
 8008946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894a:	d004      	beq.n	8008956 <pow+0x1ae>
 800894c:	4b2b      	ldr	r3, [pc, #172]	; (80089fc <pow+0x254>)
 800894e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008952:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008956:	f996 3000 	ldrsb.w	r3, [r6]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d139      	bne.n	80089d2 <pow+0x22a>
 800895e:	f7ff fad7 	bl	8007f10 <__errno>
 8008962:	2322      	movs	r3, #34	; 0x22
 8008964:	e7a8      	b.n	80088b8 <pow+0x110>
 8008966:	4b26      	ldr	r3, [pc, #152]	; (8008a00 <pow+0x258>)
 8008968:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800896c:	2200      	movs	r2, #0
 800896e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008972:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008976:	d5ee      	bpl.n	8008956 <pow+0x1ae>
 8008978:	eeb0 0b48 	vmov.f64	d0, d8
 800897c:	f000 fc34 	bl	80091e8 <rint>
 8008980:	eeb4 0b48 	vcmp.f64	d0, d8
 8008984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008988:	d0e5      	beq.n	8008956 <pow+0x1ae>
 800898a:	2200      	movs	r2, #0
 800898c:	4b19      	ldr	r3, [pc, #100]	; (80089f4 <pow+0x24c>)
 800898e:	e7e0      	b.n	8008952 <pow+0x1aa>
 8008990:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8008994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008998:	f47f af64 	bne.w	8008864 <pow+0xbc>
 800899c:	eeb0 0b49 	vmov.f64	d0, d9
 80089a0:	f000 fc10 	bl	80091c4 <finite>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f43f af5d 	beq.w	8008864 <pow+0xbc>
 80089aa:	eeb0 0b48 	vmov.f64	d0, d8
 80089ae:	f000 fc09 	bl	80091c4 <finite>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	f43f af56 	beq.w	8008864 <pow+0xbc>
 80089b8:	2304      	movs	r3, #4
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <pow+0x248>)
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	2300      	movs	r3, #0
 80089c2:	9308      	str	r3, [sp, #32]
 80089c4:	ed8d 9b02 	vstr	d9, [sp, #8]
 80089c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80089cc:	ed8d cb06 	vstr	d12, [sp, #24]
 80089d0:	e7c1      	b.n	8008956 <pow+0x1ae>
 80089d2:	4668      	mov	r0, sp
 80089d4:	f000 fbfe 	bl	80091d4 <matherr>
 80089d8:	2800      	cmp	r0, #0
 80089da:	f47f af3b 	bne.w	8008854 <pow+0xac>
 80089de:	e7be      	b.n	800895e <pow+0x1b6>
	...
 80089e8:	24000078 	.word	0x24000078
 80089ec:	3ff00000 	.word	0x3ff00000
 80089f0:	080094e3 	.word	0x080094e3
 80089f4:	fff00000 	.word	0xfff00000
 80089f8:	47efffff 	.word	0x47efffff
 80089fc:	c7efffff 	.word	0xc7efffff
 8008a00:	7ff00000 	.word	0x7ff00000
 8008a04:	00000000 	.word	0x00000000

08008a08 <sqrt>:
 8008a08:	b500      	push	{lr}
 8008a0a:	ed2d 8b02 	vpush	{d8}
 8008a0e:	eeb0 8b40 	vmov.f64	d8, d0
 8008a12:	b08b      	sub	sp, #44	; 0x2c
 8008a14:	f000 fbca 	bl	80091ac <__ieee754_sqrt>
 8008a18:	4b1f      	ldr	r3, [pc, #124]	; (8008a98 <sqrt+0x90>)
 8008a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	d024      	beq.n	8008a6c <sqrt+0x64>
 8008a22:	eeb4 8b48 	vcmp.f64	d8, d8
 8008a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2a:	d61f      	bvs.n	8008a6c <sqrt+0x64>
 8008a2c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8008a90 <sqrt+0x88>
 8008a30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a38:	d518      	bpl.n	8008a6c <sqrt+0x64>
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	9200      	str	r2, [sp, #0]
 8008a3e:	4a17      	ldr	r2, [pc, #92]	; (8008a9c <sqrt+0x94>)
 8008a40:	9201      	str	r2, [sp, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	9208      	str	r2, [sp, #32]
 8008a46:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008a4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a4e:	b993      	cbnz	r3, 8008a76 <sqrt+0x6e>
 8008a50:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a54:	4668      	mov	r0, sp
 8008a56:	f000 fbbd 	bl	80091d4 <matherr>
 8008a5a:	b190      	cbz	r0, 8008a82 <sqrt+0x7a>
 8008a5c:	9b08      	ldr	r3, [sp, #32]
 8008a5e:	b11b      	cbz	r3, 8008a68 <sqrt+0x60>
 8008a60:	f7ff fa56 	bl	8007f10 <__errno>
 8008a64:	9b08      	ldr	r3, [sp, #32]
 8008a66:	6003      	str	r3, [r0, #0]
 8008a68:	ed9d 0b06 	vldr	d0, [sp, #24]
 8008a6c:	b00b      	add	sp, #44	; 0x2c
 8008a6e:	ecbd 8b02 	vpop	{d8}
 8008a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8008a7c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8008a80:	d1e8      	bne.n	8008a54 <sqrt+0x4c>
 8008a82:	f7ff fa45 	bl	8007f10 <__errno>
 8008a86:	2321      	movs	r3, #33	; 0x21
 8008a88:	6003      	str	r3, [r0, #0]
 8008a8a:	e7e7      	b.n	8008a5c <sqrt+0x54>
 8008a8c:	f3af 8000 	nop.w
	...
 8008a98:	24000078 	.word	0x24000078
 8008a9c:	080094e7 	.word	0x080094e7

08008aa0 <__ieee754_pow>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	ec57 6b11 	vmov	r6, r7, d1
 8008aa8:	ed2d 8b02 	vpush	{d8}
 8008aac:	eeb0 8b40 	vmov.f64	d8, d0
 8008ab0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008ab4:	ea58 0306 	orrs.w	r3, r8, r6
 8008ab8:	b085      	sub	sp, #20
 8008aba:	46b9      	mov	r9, r7
 8008abc:	ee11 2a10 	vmov	r2, s2
 8008ac0:	f000 8306 	beq.w	80090d0 <__ieee754_pow+0x630>
 8008ac4:	ee18 aa90 	vmov	sl, s17
 8008ac8:	4bb9      	ldr	r3, [pc, #740]	; (8008db0 <__ieee754_pow+0x310>)
 8008aca:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8008ace:	429c      	cmp	r4, r3
 8008ad0:	ee10 ba10 	vmov	fp, s0
 8008ad4:	dc0b      	bgt.n	8008aee <__ieee754_pow+0x4e>
 8008ad6:	d105      	bne.n	8008ae4 <__ieee754_pow+0x44>
 8008ad8:	f1bb 0f00 	cmp.w	fp, #0
 8008adc:	d107      	bne.n	8008aee <__ieee754_pow+0x4e>
 8008ade:	45a0      	cmp	r8, r4
 8008ae0:	dc0d      	bgt.n	8008afe <__ieee754_pow+0x5e>
 8008ae2:	e001      	b.n	8008ae8 <__ieee754_pow+0x48>
 8008ae4:	4598      	cmp	r8, r3
 8008ae6:	dc02      	bgt.n	8008aee <__ieee754_pow+0x4e>
 8008ae8:	4598      	cmp	r8, r3
 8008aea:	d110      	bne.n	8008b0e <__ieee754_pow+0x6e>
 8008aec:	b17a      	cbz	r2, 8008b0e <__ieee754_pow+0x6e>
 8008aee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008af2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008af6:	ea54 030b 	orrs.w	r3, r4, fp
 8008afa:	f000 82e9 	beq.w	80090d0 <__ieee754_pow+0x630>
 8008afe:	48ad      	ldr	r0, [pc, #692]	; (8008db4 <__ieee754_pow+0x314>)
 8008b00:	b005      	add	sp, #20
 8008b02:	ecbd 8b02 	vpop	{d8}
 8008b06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0a:	f000 bb65 	b.w	80091d8 <nan>
 8008b0e:	f1ba 0f00 	cmp.w	sl, #0
 8008b12:	da4e      	bge.n	8008bb2 <__ieee754_pow+0x112>
 8008b14:	4ba8      	ldr	r3, [pc, #672]	; (8008db8 <__ieee754_pow+0x318>)
 8008b16:	4598      	cmp	r8, r3
 8008b18:	dc49      	bgt.n	8008bae <__ieee754_pow+0x10e>
 8008b1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008b1e:	4598      	cmp	r8, r3
 8008b20:	dd47      	ble.n	8008bb2 <__ieee754_pow+0x112>
 8008b22:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008b26:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b2a:	2b14      	cmp	r3, #20
 8008b2c:	dd24      	ble.n	8008b78 <__ieee754_pow+0xd8>
 8008b2e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008b32:	fa22 f503 	lsr.w	r5, r2, r3
 8008b36:	fa05 f303 	lsl.w	r3, r5, r3
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d139      	bne.n	8008bb2 <__ieee754_pow+0x112>
 8008b3e:	f005 0501 	and.w	r5, r5, #1
 8008b42:	f1c5 0502 	rsb	r5, r5, #2
 8008b46:	2a00      	cmp	r2, #0
 8008b48:	d15a      	bne.n	8008c00 <__ieee754_pow+0x160>
 8008b4a:	4b99      	ldr	r3, [pc, #612]	; (8008db0 <__ieee754_pow+0x310>)
 8008b4c:	4598      	cmp	r8, r3
 8008b4e:	d122      	bne.n	8008b96 <__ieee754_pow+0xf6>
 8008b50:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008b54:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008b58:	ea53 030b 	orrs.w	r3, r3, fp
 8008b5c:	f000 82b8 	beq.w	80090d0 <__ieee754_pow+0x630>
 8008b60:	4b96      	ldr	r3, [pc, #600]	; (8008dbc <__ieee754_pow+0x31c>)
 8008b62:	429c      	cmp	r4, r3
 8008b64:	dd27      	ble.n	8008bb6 <__ieee754_pow+0x116>
 8008b66:	f1b9 0f00 	cmp.w	r9, #0
 8008b6a:	f280 82b4 	bge.w	80090d6 <__ieee754_pow+0x636>
 8008b6e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8008d80 <__ieee754_pow+0x2e0>
 8008b72:	ed8d 7b00 	vstr	d7, [sp]
 8008b76:	e026      	b.n	8008bc6 <__ieee754_pow+0x126>
 8008b78:	2a00      	cmp	r2, #0
 8008b7a:	d140      	bne.n	8008bfe <__ieee754_pow+0x15e>
 8008b7c:	f1c3 0314 	rsb	r3, r3, #20
 8008b80:	fa48 f503 	asr.w	r5, r8, r3
 8008b84:	fa05 f303 	lsl.w	r3, r5, r3
 8008b88:	4543      	cmp	r3, r8
 8008b8a:	f040 82aa 	bne.w	80090e2 <__ieee754_pow+0x642>
 8008b8e:	f005 0501 	and.w	r5, r5, #1
 8008b92:	f1c5 0502 	rsb	r5, r5, #2
 8008b96:	4b8a      	ldr	r3, [pc, #552]	; (8008dc0 <__ieee754_pow+0x320>)
 8008b98:	4598      	cmp	r8, r3
 8008b9a:	d11b      	bne.n	8008bd4 <__ieee754_pow+0x134>
 8008b9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ba0:	f280 829c 	bge.w	80090dc <__ieee754_pow+0x63c>
 8008ba4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008ba8:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8008bac:	e7e1      	b.n	8008b72 <__ieee754_pow+0xd2>
 8008bae:	2502      	movs	r5, #2
 8008bb0:	e7c9      	b.n	8008b46 <__ieee754_pow+0xa6>
 8008bb2:	2500      	movs	r5, #0
 8008bb4:	e7c7      	b.n	8008b46 <__ieee754_pow+0xa6>
 8008bb6:	f1b9 0f00 	cmp.w	r9, #0
 8008bba:	dad8      	bge.n	8008b6e <__ieee754_pow+0xce>
 8008bbc:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8008bc0:	4633      	mov	r3, r6
 8008bc2:	e9cd 3400 	strd	r3, r4, [sp]
 8008bc6:	ed9d 0b00 	vldr	d0, [sp]
 8008bca:	b005      	add	sp, #20
 8008bcc:	ecbd 8b02 	vpop	{d8}
 8008bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008bd8:	d102      	bne.n	8008be0 <__ieee754_pow+0x140>
 8008bda:	ee28 7b08 	vmul.f64	d7, d8, d8
 8008bde:	e7c8      	b.n	8008b72 <__ieee754_pow+0xd2>
 8008be0:	4b78      	ldr	r3, [pc, #480]	; (8008dc4 <__ieee754_pow+0x324>)
 8008be2:	4599      	cmp	r9, r3
 8008be4:	d10c      	bne.n	8008c00 <__ieee754_pow+0x160>
 8008be6:	f1ba 0f00 	cmp.w	sl, #0
 8008bea:	db09      	blt.n	8008c00 <__ieee754_pow+0x160>
 8008bec:	eeb0 0b48 	vmov.f64	d0, d8
 8008bf0:	b005      	add	sp, #20
 8008bf2:	ecbd 8b02 	vpop	{d8}
 8008bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfa:	f000 bad7 	b.w	80091ac <__ieee754_sqrt>
 8008bfe:	2500      	movs	r5, #0
 8008c00:	eeb0 0b48 	vmov.f64	d0, d8
 8008c04:	f000 fad5 	bl	80091b2 <fabs>
 8008c08:	ed8d 0b00 	vstr	d0, [sp]
 8008c0c:	f1bb 0f00 	cmp.w	fp, #0
 8008c10:	d128      	bne.n	8008c64 <__ieee754_pow+0x1c4>
 8008c12:	b124      	cbz	r4, 8008c1e <__ieee754_pow+0x17e>
 8008c14:	4b6a      	ldr	r3, [pc, #424]	; (8008dc0 <__ieee754_pow+0x320>)
 8008c16:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d122      	bne.n	8008c64 <__ieee754_pow+0x1c4>
 8008c1e:	f1b9 0f00 	cmp.w	r9, #0
 8008c22:	da07      	bge.n	8008c34 <__ieee754_pow+0x194>
 8008c24:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008c28:	ed9d 6b00 	vldr	d6, [sp]
 8008c2c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8008c30:	ed8d 7b00 	vstr	d7, [sp]
 8008c34:	f1ba 0f00 	cmp.w	sl, #0
 8008c38:	dac5      	bge.n	8008bc6 <__ieee754_pow+0x126>
 8008c3a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008c3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c42:	ea54 0305 	orrs.w	r3, r4, r5
 8008c46:	d106      	bne.n	8008c56 <__ieee754_pow+0x1b6>
 8008c48:	ed9d 7b00 	vldr	d7, [sp]
 8008c4c:	ee37 7b47 	vsub.f64	d7, d7, d7
 8008c50:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8008c54:	e78d      	b.n	8008b72 <__ieee754_pow+0xd2>
 8008c56:	2d01      	cmp	r5, #1
 8008c58:	d1b5      	bne.n	8008bc6 <__ieee754_pow+0x126>
 8008c5a:	ed9d 7b00 	vldr	d7, [sp]
 8008c5e:	eeb1 7b47 	vneg.f64	d7, d7
 8008c62:	e786      	b.n	8008b72 <__ieee754_pow+0xd2>
 8008c64:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8008c68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c6c:	ea55 030a 	orrs.w	r3, r5, sl
 8008c70:	d104      	bne.n	8008c7c <__ieee754_pow+0x1dc>
 8008c72:	ee38 8b48 	vsub.f64	d8, d8, d8
 8008c76:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8008c7a:	e77a      	b.n	8008b72 <__ieee754_pow+0xd2>
 8008c7c:	4b52      	ldr	r3, [pc, #328]	; (8008dc8 <__ieee754_pow+0x328>)
 8008c7e:	4598      	cmp	r8, r3
 8008c80:	f340 80a8 	ble.w	8008dd4 <__ieee754_pow+0x334>
 8008c84:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008c88:	4598      	cmp	r8, r3
 8008c8a:	dd0b      	ble.n	8008ca4 <__ieee754_pow+0x204>
 8008c8c:	4b4b      	ldr	r3, [pc, #300]	; (8008dbc <__ieee754_pow+0x31c>)
 8008c8e:	429c      	cmp	r4, r3
 8008c90:	dc0e      	bgt.n	8008cb0 <__ieee754_pow+0x210>
 8008c92:	f1b9 0f00 	cmp.w	r9, #0
 8008c96:	f6bf af6a 	bge.w	8008b6e <__ieee754_pow+0xce>
 8008c9a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8008d88 <__ieee754_pow+0x2e8>
 8008c9e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8008ca2:	e766      	b.n	8008b72 <__ieee754_pow+0xd2>
 8008ca4:	4b49      	ldr	r3, [pc, #292]	; (8008dcc <__ieee754_pow+0x32c>)
 8008ca6:	429c      	cmp	r4, r3
 8008ca8:	ddf3      	ble.n	8008c92 <__ieee754_pow+0x1f2>
 8008caa:	4b45      	ldr	r3, [pc, #276]	; (8008dc0 <__ieee754_pow+0x320>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	dd03      	ble.n	8008cb8 <__ieee754_pow+0x218>
 8008cb0:	f1b9 0f00 	cmp.w	r9, #0
 8008cb4:	dcf1      	bgt.n	8008c9a <__ieee754_pow+0x1fa>
 8008cb6:	e75a      	b.n	8008b6e <__ieee754_pow+0xce>
 8008cb8:	ed9d 7b00 	vldr	d7, [sp]
 8008cbc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008cc0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8008d90 <__ieee754_pow+0x2f0>
 8008cc4:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008cc8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 8008ccc:	eeb1 3b46 	vneg.f64	d3, d6
 8008cd0:	eea3 5b07 	vfma.f64	d5, d3, d7
 8008cd4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008cd8:	eea5 7b46 	vfms.f64	d7, d5, d6
 8008cdc:	ee26 5b06 	vmul.f64	d5, d6, d6
 8008ce0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008ce4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8008d98 <__ieee754_pow+0x2f8>
 8008ce8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008cec:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008da0 <__ieee754_pow+0x300>
 8008cf0:	eea6 7b05 	vfma.f64	d7, d6, d5
 8008cf4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8008da8 <__ieee754_pow+0x308>
 8008cf8:	eeb0 4b47 	vmov.f64	d4, d7
 8008cfc:	eea6 4b05 	vfma.f64	d4, d6, d5
 8008d00:	ec53 2b14 	vmov	r2, r3, d4
 8008d04:	2200      	movs	r2, #0
 8008d06:	ec43 2b14 	vmov	d4, r2, r3
 8008d0a:	eeb0 6b44 	vmov.f64	d6, d4
 8008d0e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008d12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d16:	3d01      	subs	r5, #1
 8008d18:	ea55 030a 	orrs.w	r3, r5, sl
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	463b      	mov	r3, r7
 8008d22:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8008d26:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008d2a:	ec47 6b15 	vmov	d5, r6, r7
 8008d2e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8008d32:	ec47 6b13 	vmov	d3, r6, r7
 8008d36:	ec43 2b16 	vmov	d6, r2, r3
 8008d3a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008d3e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8008d42:	4b23      	ldr	r3, [pc, #140]	; (8008dd0 <__ieee754_pow+0x330>)
 8008d44:	eea5 7b04 	vfma.f64	d7, d5, d4
 8008d48:	ee24 6b06 	vmul.f64	d6, d4, d6
 8008d4c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008d50:	ee15 1a90 	vmov	r1, s11
 8008d54:	4299      	cmp	r1, r3
 8008d56:	ee15 2a10 	vmov	r2, s10
 8008d5a:	f340 819b 	ble.w	8009094 <__ieee754_pow+0x5f4>
 8008d5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008d62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008d66:	4313      	orrs	r3, r2
 8008d68:	f000 810a 	beq.w	8008f80 <__ieee754_pow+0x4e0>
 8008d6c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8008d88 <__ieee754_pow+0x2e8>
 8008d70:	ee28 8b07 	vmul.f64	d8, d8, d7
 8008d74:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008d78:	e6fb      	b.n	8008b72 <__ieee754_pow+0xd2>
 8008d7a:	bf00      	nop
 8008d7c:	f3af 8000 	nop.w
	...
 8008d88:	8800759c 	.word	0x8800759c
 8008d8c:	7e37e43c 	.word	0x7e37e43c
 8008d90:	55555555 	.word	0x55555555
 8008d94:	3fd55555 	.word	0x3fd55555
 8008d98:	652b82fe 	.word	0x652b82fe
 8008d9c:	3ff71547 	.word	0x3ff71547
 8008da0:	f85ddf44 	.word	0xf85ddf44
 8008da4:	3e54ae0b 	.word	0x3e54ae0b
 8008da8:	60000000 	.word	0x60000000
 8008dac:	3ff71547 	.word	0x3ff71547
 8008db0:	7ff00000 	.word	0x7ff00000
 8008db4:	080094b5 	.word	0x080094b5
 8008db8:	433fffff 	.word	0x433fffff
 8008dbc:	3fefffff 	.word	0x3fefffff
 8008dc0:	3ff00000 	.word	0x3ff00000
 8008dc4:	3fe00000 	.word	0x3fe00000
 8008dc8:	41e00000 	.word	0x41e00000
 8008dcc:	3feffffe 	.word	0x3feffffe
 8008dd0:	408fffff 	.word	0x408fffff
 8008dd4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008dd8:	f280 80ce 	bge.w	8008f78 <__ieee754_pow+0x4d8>
 8008ddc:	ed9d 6b00 	vldr	d6, [sp]
 8008de0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 80090e8 <__ieee754_pow+0x648>
 8008de4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008de8:	ed8d 7b00 	vstr	d7, [sp]
 8008dec:	9c01      	ldr	r4, [sp, #4]
 8008dee:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8008df2:	1521      	asrs	r1, r4, #20
 8008df4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008df8:	4419      	add	r1, r3
 8008dfa:	4be3      	ldr	r3, [pc, #908]	; (8009188 <__ieee754_pow+0x6e8>)
 8008dfc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e00:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8008e04:	429c      	cmp	r4, r3
 8008e06:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8008e0a:	dd06      	ble.n	8008e1a <__ieee754_pow+0x37a>
 8008e0c:	4bdf      	ldr	r3, [pc, #892]	; (800918c <__ieee754_pow+0x6ec>)
 8008e0e:	429c      	cmp	r4, r3
 8008e10:	f340 80b4 	ble.w	8008f7c <__ieee754_pow+0x4dc>
 8008e14:	3101      	adds	r1, #1
 8008e16:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008e1a:	2400      	movs	r4, #0
 8008e1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e20:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008e24:	4603      	mov	r3, r0
 8008e26:	ec43 2b17 	vmov	d7, r2, r3
 8008e2a:	4bd9      	ldr	r3, [pc, #868]	; (8009190 <__ieee754_pow+0x6f0>)
 8008e2c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8008e30:	4463      	add	r3, ip
 8008e32:	ed93 5b00 	vldr	d5, [r3]
 8008e36:	1040      	asrs	r0, r0, #1
 8008e38:	ee37 2b45 	vsub.f64	d2, d7, d5
 8008e3c:	ee35 6b07 	vadd.f64	d6, d5, d7
 8008e40:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8008e44:	ee22 6b01 	vmul.f64	d6, d2, d1
 8008e48:	ed8d 6b00 	vstr	d6, [sp]
 8008e4c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8008e50:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8008e54:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8008e58:	f04f 0800 	mov.w	r8, #0
 8008e5c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8008e60:	2200      	movs	r2, #0
 8008e62:	ec49 8b14 	vmov	d4, r8, r9
 8008e66:	ec43 2b16 	vmov	d6, r2, r3
 8008e6a:	eeb1 3b44 	vneg.f64	d3, d4
 8008e6e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8008e72:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008e76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e7a:	eea3 2b07 	vfma.f64	d2, d3, d7
 8008e7e:	ed9d 7b00 	vldr	d7, [sp]
 8008e82:	ee22 2b01 	vmul.f64	d2, d2, d1
 8008e86:	ee27 5b07 	vmul.f64	d5, d7, d7
 8008e8a:	ee37 6b04 	vadd.f64	d6, d7, d4
 8008e8e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 80090f0 <__ieee754_pow+0x650>
 8008e92:	ee25 0b05 	vmul.f64	d0, d5, d5
 8008e96:	ee26 6b02 	vmul.f64	d6, d6, d2
 8008e9a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 80090f8 <__ieee754_pow+0x658>
 8008e9e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8008ea2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8009100 <__ieee754_pow+0x660>
 8008ea6:	eea7 1b05 	vfma.f64	d1, d7, d5
 8008eaa:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8009108 <__ieee754_pow+0x668>
 8008eae:	eea1 7b05 	vfma.f64	d7, d1, d5
 8008eb2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8009110 <__ieee754_pow+0x670>
 8008eb6:	eea7 1b05 	vfma.f64	d1, d7, d5
 8008eba:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8009118 <__ieee754_pow+0x678>
 8008ebe:	eea1 7b05 	vfma.f64	d7, d1, d5
 8008ec2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8008ec6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8008eca:	eeb0 5b47 	vmov.f64	d5, d7
 8008ece:	eea4 5b04 	vfma.f64	d5, d4, d4
 8008ed2:	ee35 5b06 	vadd.f64	d5, d5, d6
 8008ed6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008eda:	f8cd 8008 	str.w	r8, [sp, #8]
 8008ede:	ed9d 5b02 	vldr	d5, [sp, #8]
 8008ee2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ee6:	eea3 7b04 	vfma.f64	d7, d3, d4
 8008eea:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008eee:	ed9d 6b00 	vldr	d6, [sp]
 8008ef2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ef6:	eea2 7b05 	vfma.f64	d7, d2, d5
 8008efa:	eeb0 6b47 	vmov.f64	d6, d7
 8008efe:	eea4 6b05 	vfma.f64	d6, d4, d5
 8008f02:	ed8d 6b00 	vstr	d6, [sp]
 8008f06:	f8cd 8000 	str.w	r8, [sp]
 8008f0a:	ed9d 2b00 	vldr	d2, [sp]
 8008f0e:	eeb0 6b42 	vmov.f64	d6, d2
 8008f12:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008f16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008f1a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8009120 <__ieee754_pow+0x680>
 8008f1e:	4b9d      	ldr	r3, [pc, #628]	; (8009194 <__ieee754_pow+0x6f4>)
 8008f20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f24:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8009128 <__ieee754_pow+0x688>
 8008f28:	4463      	add	r3, ip
 8008f2a:	eea2 7b06 	vfma.f64	d7, d2, d6
 8008f2e:	ed93 6b00 	vldr	d6, [r3]
 8008f32:	4b99      	ldr	r3, [pc, #612]	; (8009198 <__ieee754_pow+0x6f8>)
 8008f34:	ee37 6b06 	vadd.f64	d6, d7, d6
 8008f38:	449c      	add	ip, r3
 8008f3a:	ed9c 1b00 	vldr	d1, [ip]
 8008f3e:	eeb0 4b46 	vmov.f64	d4, d6
 8008f42:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8009130 <__ieee754_pow+0x690>
 8008f46:	ee07 1a90 	vmov	s15, r1
 8008f4a:	eea2 4b03 	vfma.f64	d4, d2, d3
 8008f4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f52:	ee34 4b01 	vadd.f64	d4, d4, d1
 8008f56:	ee34 5b07 	vadd.f64	d5, d4, d7
 8008f5a:	ed8d 5b00 	vstr	d5, [sp]
 8008f5e:	f8cd 8000 	str.w	r8, [sp]
 8008f62:	ed9d 4b00 	vldr	d4, [sp]
 8008f66:	ee34 7b47 	vsub.f64	d7, d4, d7
 8008f6a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8008f6e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8008f72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f76:	e6ce      	b.n	8008d16 <__ieee754_pow+0x276>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e73a      	b.n	8008df2 <__ieee754_pow+0x352>
 8008f7c:	2401      	movs	r4, #1
 8008f7e:	e74d      	b.n	8008e1c <__ieee754_pow+0x37c>
 8008f80:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8009138 <__ieee754_pow+0x698>
 8008f84:	ee35 5b46 	vsub.f64	d5, d5, d6
 8008f88:	ee37 4b04 	vadd.f64	d4, d7, d4
 8008f8c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8008f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f94:	f73f aeea 	bgt.w	8008d6c <__ieee754_pow+0x2cc>
 8008f98:	4a80      	ldr	r2, [pc, #512]	; (800919c <__ieee754_pow+0x6fc>)
 8008f9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	f340 808e 	ble.w	80090c0 <__ieee754_pow+0x620>
 8008fa4:	151b      	asrs	r3, r3, #20
 8008fa6:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8008faa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008fae:	4103      	asrs	r3, r0
 8008fb0:	440b      	add	r3, r1
 8008fb2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008fb6:	487a      	ldr	r0, [pc, #488]	; (80091a0 <__ieee754_pow+0x700>)
 8008fb8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008fbc:	4110      	asrs	r0, r2
 8008fbe:	ea23 0500 	bic.w	r5, r3, r0
 8008fc2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8008fc6:	2400      	movs	r4, #0
 8008fc8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8008fcc:	f1c2 0214 	rsb	r2, r2, #20
 8008fd0:	ec45 4b15 	vmov	d5, r4, r5
 8008fd4:	4110      	asrs	r0, r2
 8008fd6:	2900      	cmp	r1, #0
 8008fd8:	bfb8      	it	lt
 8008fda:	4240      	neglt	r0, r0
 8008fdc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008fe0:	ee36 5b07 	vadd.f64	d5, d6, d7
 8008fe4:	ec53 2b15 	vmov	r2, r3, d5
 8008fe8:	2200      	movs	r2, #0
 8008fea:	ec43 2b15 	vmov	d5, r2, r3
 8008fee:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8009140 <__ieee754_pow+0x6a0>
 8008ff2:	ee35 6b46 	vsub.f64	d6, d5, d6
 8008ff6:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008ffa:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8009148 <__ieee754_pow+0x6a8>
 8008ffe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009002:	eea6 7b04 	vfma.f64	d7, d6, d4
 8009006:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8009150 <__ieee754_pow+0x6b0>
 800900a:	eeb0 4b47 	vmov.f64	d4, d7
 800900e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8009012:	eeb0 3b44 	vmov.f64	d3, d4
 8009016:	eea5 3b46 	vfms.f64	d3, d5, d6
 800901a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8009158 <__ieee754_pow+0x6b8>
 800901e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8009022:	ee24 6b04 	vmul.f64	d6, d4, d4
 8009026:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8009160 <__ieee754_pow+0x6c0>
 800902a:	eea4 7b07 	vfma.f64	d7, d4, d7
 800902e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8009032:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8009168 <__ieee754_pow+0x6c8>
 8009036:	eea3 5b06 	vfma.f64	d5, d3, d6
 800903a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8009170 <__ieee754_pow+0x6d0>
 800903e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8009042:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8009178 <__ieee754_pow+0x6d8>
 8009046:	eea3 5b06 	vfma.f64	d5, d3, d6
 800904a:	eeb0 3b44 	vmov.f64	d3, d4
 800904e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8009052:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009056:	eeb0 6b43 	vmov.f64	d6, d3
 800905a:	ee24 3b03 	vmul.f64	d3, d4, d3
 800905e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8009062:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8009066:	ee36 7b47 	vsub.f64	d7, d6, d7
 800906a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800906e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8009072:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009076:	ed8d 7b00 	vstr	d7, [sp]
 800907a:	9901      	ldr	r1, [sp, #4]
 800907c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8009080:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009084:	da1e      	bge.n	80090c4 <__ieee754_pow+0x624>
 8009086:	eeb0 0b47 	vmov.f64	d0, d7
 800908a:	f000 f939 	bl	8009300 <scalbn>
 800908e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8009092:	e56e      	b.n	8008b72 <__ieee754_pow+0xd2>
 8009094:	4b43      	ldr	r3, [pc, #268]	; (80091a4 <__ieee754_pow+0x704>)
 8009096:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800909a:	4298      	cmp	r0, r3
 800909c:	f77f af7c 	ble.w	8008f98 <__ieee754_pow+0x4f8>
 80090a0:	4b41      	ldr	r3, [pc, #260]	; (80091a8 <__ieee754_pow+0x708>)
 80090a2:	440b      	add	r3, r1
 80090a4:	4313      	orrs	r3, r2
 80090a6:	d002      	beq.n	80090ae <__ieee754_pow+0x60e>
 80090a8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8009180 <__ieee754_pow+0x6e0>
 80090ac:	e660      	b.n	8008d70 <__ieee754_pow+0x2d0>
 80090ae:	ee35 5b46 	vsub.f64	d5, d5, d6
 80090b2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80090b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ba:	f6ff af6d 	blt.w	8008f98 <__ieee754_pow+0x4f8>
 80090be:	e7f3      	b.n	80090a8 <__ieee754_pow+0x608>
 80090c0:	2000      	movs	r0, #0
 80090c2:	e78d      	b.n	8008fe0 <__ieee754_pow+0x540>
 80090c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090c8:	460b      	mov	r3, r1
 80090ca:	ec43 2b10 	vmov	d0, r2, r3
 80090ce:	e7de      	b.n	800908e <__ieee754_pow+0x5ee>
 80090d0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80090d4:	e54d      	b.n	8008b72 <__ieee754_pow+0xd2>
 80090d6:	e9cd 6700 	strd	r6, r7, [sp]
 80090da:	e574      	b.n	8008bc6 <__ieee754_pow+0x126>
 80090dc:	ed8d 8b00 	vstr	d8, [sp]
 80090e0:	e571      	b.n	8008bc6 <__ieee754_pow+0x126>
 80090e2:	4615      	mov	r5, r2
 80090e4:	e557      	b.n	8008b96 <__ieee754_pow+0xf6>
 80090e6:	bf00      	nop
 80090e8:	00000000 	.word	0x00000000
 80090ec:	43400000 	.word	0x43400000
 80090f0:	4a454eef 	.word	0x4a454eef
 80090f4:	3fca7e28 	.word	0x3fca7e28
 80090f8:	93c9db65 	.word	0x93c9db65
 80090fc:	3fcd864a 	.word	0x3fcd864a
 8009100:	a91d4101 	.word	0xa91d4101
 8009104:	3fd17460 	.word	0x3fd17460
 8009108:	518f264d 	.word	0x518f264d
 800910c:	3fd55555 	.word	0x3fd55555
 8009110:	db6fabff 	.word	0xdb6fabff
 8009114:	3fdb6db6 	.word	0x3fdb6db6
 8009118:	33333303 	.word	0x33333303
 800911c:	3fe33333 	.word	0x3fe33333
 8009120:	dc3a03fd 	.word	0xdc3a03fd
 8009124:	3feec709 	.word	0x3feec709
 8009128:	145b01f5 	.word	0x145b01f5
 800912c:	be3e2fe0 	.word	0xbe3e2fe0
 8009130:	e0000000 	.word	0xe0000000
 8009134:	3feec709 	.word	0x3feec709
 8009138:	652b82fe 	.word	0x652b82fe
 800913c:	3c971547 	.word	0x3c971547
 8009140:	fefa39ef 	.word	0xfefa39ef
 8009144:	3fe62e42 	.word	0x3fe62e42
 8009148:	0ca86c39 	.word	0x0ca86c39
 800914c:	be205c61 	.word	0xbe205c61
 8009150:	00000000 	.word	0x00000000
 8009154:	3fe62e43 	.word	0x3fe62e43
 8009158:	72bea4d0 	.word	0x72bea4d0
 800915c:	3e663769 	.word	0x3e663769
 8009160:	c5d26bf1 	.word	0xc5d26bf1
 8009164:	bebbbd41 	.word	0xbebbbd41
 8009168:	af25de2c 	.word	0xaf25de2c
 800916c:	3f11566a 	.word	0x3f11566a
 8009170:	16bebd93 	.word	0x16bebd93
 8009174:	bf66c16c 	.word	0xbf66c16c
 8009178:	5555553e 	.word	0x5555553e
 800917c:	3fc55555 	.word	0x3fc55555
 8009180:	c2f8f359 	.word	0xc2f8f359
 8009184:	01a56e1f 	.word	0x01a56e1f
 8009188:	0003988e 	.word	0x0003988e
 800918c:	000bb679 	.word	0x000bb679
 8009190:	080094f0 	.word	0x080094f0
 8009194:	08009510 	.word	0x08009510
 8009198:	08009500 	.word	0x08009500
 800919c:	3fe00000 	.word	0x3fe00000
 80091a0:	000fffff 	.word	0x000fffff
 80091a4:	4090cbff 	.word	0x4090cbff
 80091a8:	3f6f3400 	.word	0x3f6f3400

080091ac <__ieee754_sqrt>:
 80091ac:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80091b0:	4770      	bx	lr

080091b2 <fabs>:
 80091b2:	ec51 0b10 	vmov	r0, r1, d0
 80091b6:	ee10 2a10 	vmov	r2, s0
 80091ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091be:	ec43 2b10 	vmov	d0, r2, r3
 80091c2:	4770      	bx	lr

080091c4 <finite>:
 80091c4:	ee10 3a90 	vmov	r3, s1
 80091c8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80091cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80091d0:	0fc0      	lsrs	r0, r0, #31
 80091d2:	4770      	bx	lr

080091d4 <matherr>:
 80091d4:	2000      	movs	r0, #0
 80091d6:	4770      	bx	lr

080091d8 <nan>:
 80091d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80091e0 <nan+0x8>
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	00000000 	.word	0x00000000
 80091e4:	7ff80000 	.word	0x7ff80000

080091e8 <rint>:
 80091e8:	b530      	push	{r4, r5, lr}
 80091ea:	b085      	sub	sp, #20
 80091ec:	ed8d 0b00 	vstr	d0, [sp]
 80091f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091f4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80091f8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 80091fc:	2813      	cmp	r0, #19
 80091fe:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8009202:	dc5a      	bgt.n	80092ba <rint+0xd2>
 8009204:	2800      	cmp	r0, #0
 8009206:	da2f      	bge.n	8009268 <rint+0x80>
 8009208:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800920c:	4311      	orrs	r1, r2
 800920e:	d027      	beq.n	8009260 <rint+0x78>
 8009210:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8009214:	4315      	orrs	r5, r2
 8009216:	426a      	negs	r2, r5
 8009218:	432a      	orrs	r2, r5
 800921a:	0b12      	lsrs	r2, r2, #12
 800921c:	0c5b      	lsrs	r3, r3, #17
 800921e:	045b      	lsls	r3, r3, #17
 8009220:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8009224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009228:	ea42 0103 	orr.w	r1, r2, r3
 800922c:	4b31      	ldr	r3, [pc, #196]	; (80092f4 <rint+0x10c>)
 800922e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009232:	ed93 6b00 	vldr	d6, [r3]
 8009236:	ec41 0b17 	vmov	d7, r0, r1
 800923a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800923e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009242:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009246:	ee37 7b46 	vsub.f64	d7, d7, d6
 800924a:	ed8d 7b00 	vstr	d7, [sp]
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009258:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800925c:	e9cd 0100 	strd	r0, r1, [sp]
 8009260:	ed9d 0b00 	vldr	d0, [sp]
 8009264:	b005      	add	sp, #20
 8009266:	bd30      	pop	{r4, r5, pc}
 8009268:	4923      	ldr	r1, [pc, #140]	; (80092f8 <rint+0x110>)
 800926a:	4101      	asrs	r1, r0
 800926c:	ea03 0501 	and.w	r5, r3, r1
 8009270:	4315      	orrs	r5, r2
 8009272:	d0f5      	beq.n	8009260 <rint+0x78>
 8009274:	0849      	lsrs	r1, r1, #1
 8009276:	ea03 0501 	and.w	r5, r3, r1
 800927a:	432a      	orrs	r2, r5
 800927c:	d00b      	beq.n	8009296 <rint+0xae>
 800927e:	ea23 0101 	bic.w	r1, r3, r1
 8009282:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009286:	2813      	cmp	r0, #19
 8009288:	fa43 f300 	asr.w	r3, r3, r0
 800928c:	bf0c      	ite	eq
 800928e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8009292:	2200      	movne	r2, #0
 8009294:	430b      	orrs	r3, r1
 8009296:	4619      	mov	r1, r3
 8009298:	4b16      	ldr	r3, [pc, #88]	; (80092f4 <rint+0x10c>)
 800929a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800929e:	ed94 6b00 	vldr	d6, [r4]
 80092a2:	4610      	mov	r0, r2
 80092a4:	ec41 0b17 	vmov	d7, r0, r1
 80092a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80092ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80092b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80092b8:	e008      	b.n	80092cc <rint+0xe4>
 80092ba:	2833      	cmp	r0, #51	; 0x33
 80092bc:	dd09      	ble.n	80092d2 <rint+0xea>
 80092be:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80092c2:	d1cd      	bne.n	8009260 <rint+0x78>
 80092c4:	ed9d 7b00 	vldr	d7, [sp]
 80092c8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80092cc:	ed8d 7b00 	vstr	d7, [sp]
 80092d0:	e7c6      	b.n	8009260 <rint+0x78>
 80092d2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 80092d6:	f04f 31ff 	mov.w	r1, #4294967295
 80092da:	40c1      	lsrs	r1, r0
 80092dc:	420a      	tst	r2, r1
 80092de:	d0bf      	beq.n	8009260 <rint+0x78>
 80092e0:	0849      	lsrs	r1, r1, #1
 80092e2:	420a      	tst	r2, r1
 80092e4:	bf1f      	itttt	ne
 80092e6:	ea22 0101 	bicne.w	r1, r2, r1
 80092ea:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80092ee:	4102      	asrne	r2, r0
 80092f0:	430a      	orrne	r2, r1
 80092f2:	e7d0      	b.n	8009296 <rint+0xae>
 80092f4:	08009520 	.word	0x08009520
 80092f8:	000fffff 	.word	0x000fffff
 80092fc:	00000000 	.word	0x00000000

08009300 <scalbn>:
 8009300:	b500      	push	{lr}
 8009302:	ed2d 8b02 	vpush	{d8}
 8009306:	b083      	sub	sp, #12
 8009308:	ed8d 0b00 	vstr	d0, [sp]
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009312:	b9a2      	cbnz	r2, 800933e <scalbn+0x3e>
 8009314:	9a00      	ldr	r2, [sp, #0]
 8009316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800931a:	4313      	orrs	r3, r2
 800931c:	d03a      	beq.n	8009394 <scalbn+0x94>
 800931e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80093d8 <scalbn+0xd8>
 8009322:	4b35      	ldr	r3, [pc, #212]	; (80093f8 <scalbn+0xf8>)
 8009324:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009328:	4298      	cmp	r0, r3
 800932a:	ed8d 7b00 	vstr	d7, [sp]
 800932e:	da11      	bge.n	8009354 <scalbn+0x54>
 8009330:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80093e0 <scalbn+0xe0>
 8009334:	ed9d 6b00 	vldr	d6, [sp]
 8009338:	ee27 7b06 	vmul.f64	d7, d7, d6
 800933c:	e007      	b.n	800934e <scalbn+0x4e>
 800933e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009342:	428a      	cmp	r2, r1
 8009344:	d10a      	bne.n	800935c <scalbn+0x5c>
 8009346:	ed9d 7b00 	vldr	d7, [sp]
 800934a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800934e:	ed8d 7b00 	vstr	d7, [sp]
 8009352:	e01f      	b.n	8009394 <scalbn+0x94>
 8009354:	9b01      	ldr	r3, [sp, #4]
 8009356:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800935a:	3a36      	subs	r2, #54	; 0x36
 800935c:	4402      	add	r2, r0
 800935e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009362:	428a      	cmp	r2, r1
 8009364:	dd0a      	ble.n	800937c <scalbn+0x7c>
 8009366:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80093e8 <scalbn+0xe8>
 800936a:	eeb0 0b48 	vmov.f64	d0, d8
 800936e:	ed9d 1b00 	vldr	d1, [sp]
 8009372:	f000 f843 	bl	80093fc <copysign>
 8009376:	ee20 7b08 	vmul.f64	d7, d0, d8
 800937a:	e7e8      	b.n	800934e <scalbn+0x4e>
 800937c:	2a00      	cmp	r2, #0
 800937e:	dd10      	ble.n	80093a2 <scalbn+0xa2>
 8009380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009384:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009388:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800938c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009390:	e9cd 0100 	strd	r0, r1, [sp]
 8009394:	ed9d 0b00 	vldr	d0, [sp]
 8009398:	b003      	add	sp, #12
 800939a:	ecbd 8b02 	vpop	{d8}
 800939e:	f85d fb04 	ldr.w	pc, [sp], #4
 80093a2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80093a6:	da06      	bge.n	80093b6 <scalbn+0xb6>
 80093a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80093ac:	4298      	cmp	r0, r3
 80093ae:	dcda      	bgt.n	8009366 <scalbn+0x66>
 80093b0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80093e0 <scalbn+0xe0>
 80093b4:	e7d9      	b.n	800936a <scalbn+0x6a>
 80093b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80093be:	3236      	adds	r2, #54	; 0x36
 80093c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80093c4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80093c8:	ec41 0b17 	vmov	d7, r0, r1
 80093cc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80093f0 <scalbn+0xf0>
 80093d0:	e7b2      	b.n	8009338 <scalbn+0x38>
 80093d2:	bf00      	nop
 80093d4:	f3af 8000 	nop.w
 80093d8:	00000000 	.word	0x00000000
 80093dc:	43500000 	.word	0x43500000
 80093e0:	c2f8f359 	.word	0xc2f8f359
 80093e4:	01a56e1f 	.word	0x01a56e1f
 80093e8:	8800759c 	.word	0x8800759c
 80093ec:	7e37e43c 	.word	0x7e37e43c
 80093f0:	00000000 	.word	0x00000000
 80093f4:	3c900000 	.word	0x3c900000
 80093f8:	ffff3cb0 	.word	0xffff3cb0

080093fc <copysign>:
 80093fc:	ec51 0b10 	vmov	r0, r1, d0
 8009400:	ee11 0a90 	vmov	r0, s3
 8009404:	ee10 2a10 	vmov	r2, s0
 8009408:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800940c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009410:	ea41 0300 	orr.w	r3, r1, r0
 8009414:	ec43 2b10 	vmov	d0, r2, r3
 8009418:	4770      	bx	lr
	...

0800941c <_init>:
 800941c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941e:	bf00      	nop
 8009420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009422:	bc08      	pop	{r3}
 8009424:	469e      	mov	lr, r3
 8009426:	4770      	bx	lr

08009428 <_fini>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	bf00      	nop
 800942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942e:	bc08      	pop	{r3}
 8009430:	469e      	mov	lr, r3
 8009432:	4770      	bx	lr
